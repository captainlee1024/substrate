#![feature(prelude_import)]
// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! The Substrate runtime. This can be compiled with `#[no_std]`, ready for Wasm.

// `construct_runtime!` does a lot of recursion and requires us to increase the limit to 512.
#![recursion_limit = "512"]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;

use codec::{Decode, Encode, MaxEncodedLen};
use frame_election_provider_support::{
    onchain, BalancingConfig, ElectionDataProvider, SequentialPhragmen,
    VoteWeight,
};
use frame_support::{
    construct_runtime, dispatch::DispatchClass, pallet_prelude::Get,
    parameter_types,
    traits::{
        fungible::ItemOf,
        tokens::{nonfungibles_v2::Inspect, GetSalary, PayFromAccount},
        AsEnsureOriginWithArg, ConstBool, ConstU128, ConstU16, ConstU32,
        Currency, EitherOfDiverse, EqualPrivilegeOnly, Everything, Imbalance,
        InstanceFilter, KeyOwnerProofSystem, LockIdentifier, Nothing,
        OnUnbalanced, U128CurrencyToVote, WithdrawReasons,
    },
    weights::{
        constants::{
            BlockExecutionWeight, ExtrinsicBaseWeight, RocksDbWeight,
            WEIGHT_REF_TIME_PER_SECOND,
        },
        ConstantMultiplier, IdentityFee, Weight,
    },
    BoundedVec, PalletId, RuntimeDebug,
};
use frame_system::{
    limits::{BlockLength, BlockWeights},
    EnsureRoot, EnsureRootWithSuccess, EnsureSigned, EnsureWithSuccess,
};
pub use node_primitives::{AccountId, Signature};
use node_primitives::{
    AccountIndex, Balance, BlockNumber, Hash, Index, Moment,
};
use pallet_election_provider_multi_phase::SolutionAccuracyOf;
use pallet_im_online::sr25519::AuthorityId as ImOnlineId;
use pallet_nfts::PalletFeatures;
use pallet_nis::WithMaximumOf;
use pallet_session::historical as pallet_session_historical;
pub use pallet_transaction_payment::{
    CurrencyAdapter, Multiplier, TargetedFeeAdjustment,
};
use pallet_transaction_payment::{FeeDetails, RuntimeDispatchInfo};
use sp_api::impl_runtime_apis;
use sp_authority_discovery::AuthorityId as AuthorityDiscoveryId;
use sp_consensus_grandpa::AuthorityId as GrandpaId;
use sp_core::{crypto::KeyTypeId, OpaqueMetadata};
use sp_inherents::{CheckInherentsResult, InherentData};
use sp_runtime::{
    create_runtime_str, curve::PiecewiseLinear, generic, impl_opaque_keys,
    traits::{
        self, BlakeTwo256, Block as BlockT, Bounded, ConvertInto, NumberFor,
        OpaqueKeys, SaturatedConversion, StaticLookup,
    },
    transaction_validity::{
        TransactionPriority, TransactionSource, TransactionValidity,
    },
    ApplyExtrinsicResult, FixedPointNumber, FixedU128, Perbill, Percent,
    Permill, Perquintill,
};
use sp_std::prelude::*;
#[cfg(any(feature = "std", test))]
use sp_version::NativeVersion;
use sp_version::RuntimeVersion;
use static_assertions::const_assert;

#[cfg(any(feature = "std", test))]
pub use frame_system::Call as SystemCall;
#[cfg(any(feature = "std", test))]
pub use pallet_balances::Call as BalancesCall;
#[cfg(any(feature = "std", test))]
pub use pallet_staking::StakerStatus;
#[cfg(any(feature = "std", test))]
pub use pallet_sudo::Call as SudoCall;
#[cfg(any(feature = "std", test))]
pub use sp_runtime::BuildStorage;

/// Implementations of some helper traits passed into runtime modules as associated types.
pub mod impls {




    // Make the WASM binary available.



    // Per convention: if the runtime behavior changes, increment spec_version
    // and set impl_version to 0. If only runtime
    // implementation changes and behavior does not, then leave spec_version as
    // is and increment impl_version.




    // for fees, 80% to treasury, 20% to author
    // for tips, if any, 80% to treasury, 20% to author (though this can be anything)


    // Operational transactions have some extra reserved space, so that they
    // are included even if block reached `MAXIMUM_BLOCK_WEIGHT`.





    // One storage item; key size is 32; value is size 4+4+16+32 bytes = 56 bytes.
    // Additional storage item size of 32 bytes.


    // One storage item; key size 32, value size 8; .
    // Additional storage item size of 33 bytes.






    // One cent: $10,000 / MB


    // NOTE: Currently it is not possible to change the epoch duration after the chain has started.
    //       Attempting to do so will brick block production.




    // For weight estimation, we assume that the most locks on an individual account will be 50.
    // This number may need to be adjusted in the future if this assumption no longer holds true.












    // 1/4 the bonding duration.


    // send the slashed funds to the treasury.
    // rewards are minted from the void
    // This a placeholder, to be introduced in the next PR as an instance of bags-list


    // phase durations. 1/4 of the last session for each.

    // signed config


    // miner configs
    // Solution can occupy 90% of normal block size


    // OnChain values are lower.
    // The maximum winners that can be elected by the Election pallet which is equivalent to the
    // maximum active validators the staking pallet can have.







    // The unsigned submissions have to respect the weight of the submit_unsigned call, thus their
    // weight estimate function is wired to this call's weight.

    // burn slashes
    // nothing to do upon rewards
















    // Same as EnactmentPeriod
    // To cancel a proposal which has been passed, 2/3 of the council must agree to it.
    // To cancel a proposal before it has been passed, the technical committee must be unanimous or
    // Root must agree.
    // Any single technical committee member may veto a coming council proposal, however they can
    // only do it once and it lasts only for the cool-off period.



    // 1 storage item created, key size is 32 bytes, value size is 16+16.
    // additional data per vote is 32 bytes (account id).

    // Make sure that there are no more than `MaxMembers` members elected via elections-phragmen.

    // NOTE: this implies that council's genesis members cannot be set directly and must come from
    // this module.


















    // take the biggest period possible.
    // The `System::block_number` is initialized with `n+1`,
    // so the actual block number is `n`.








    // 258 bytes on-chain
    // 66 bytes on-chain
    // 53 bytes on-chain







    // `VestingInfo` encode length is 36bytes. 28 schedules gets encoded as 1009 bytes, which is the
    // highest number of schedules that encodes less than 2^10.





















    // Warning: this is not advised, as it might allow the chain to be temporarily DOS-ed.
    // Preferably, if the chain's governance/maintenance team is planning on using a specific
    // account for the migration, put it here to make sure only that account can trigger the signed
    // migrations.









    // Authorship must be before session in order to note author in the correct session and era
    // for im-online and staking.

    // 检查版本
    // 检查创世块哈希


    // All migrations executed on runtime upgrade as a nested tuple of types implementing
    // `OnRuntimeUpgrade`.


























































    // NOTE: intentional unwrap: we don't want to propagate the error backwards, and want to
    // have a backtrace here. If any of the pre/post migration checks fail, we shall stop
    // right here and right now.

    // NOTE: intentional unwrap: we don't want to propagate the error backwards, and want to
    // have a backtrace here.


    // Trying to add benchmarks directly to the Session Pallet caused cyclic dependency
    // issues. To get around that, we separated the Session benchmarks into its own crate,
    // which is why we need these two lines below.





    // Trying to add benchmarks directly to the Session Pallet caused cyclic dependency
    // issues. To get around that, we separated the Session benchmarks into its own crate,
    // which is why we need these two lines below.



    // Treasury Account
    // TODO: this is manual for now, someday we might be able to use a
    // macro for this particular key






    //! Some configurable implementations as associated type for the substrate runtime.
    use crate::{
        AccountId, AllianceMotion, Assets, Authorship, Balances, Hash,
        NegativeImbalance, Runtime, RuntimeCall,
    };
    use frame_support::{
        pallet_prelude::*,
        traits::{
            fungibles::{Balanced, Credit},
            Currency, OnUnbalanced,
        },
    };
    use pallet_alliance::{IdentityVerifier, ProposalIndex, ProposalProvider};
    use pallet_asset_tx_payment::HandleCredit;
    use sp_std::prelude::*;
    pub struct Author;
    impl OnUnbalanced<NegativeImbalance> for Author {
        fn on_nonzero_unbalanced(amount: NegativeImbalance) {
            if let Some(author) = Authorship::author() {
                    Balances::resolve_creating(&author, amount);
                }
        }
    }
    /// A `HandleCredit` implementation that naively transfers the fees to the block author.
    /// Will drop and burn the assets in case the transfer fails.
    pub struct CreditToBlockAuthor;
    impl HandleCredit<AccountId, Assets> for CreditToBlockAuthor {
        fn handle_credit(credit: Credit<AccountId, Assets>) {
            if let Some(author) =
                        pallet_authorship::Pallet::<Runtime>::author() {
                    let _ = Assets::resolve(&author, credit);
                }
        }
    }
    pub struct AllianceIdentityVerifier;
    impl IdentityVerifier<AccountId> for AllianceIdentityVerifier {
        fn has_identity(who: &AccountId, fields: u64) -> bool {
            crate::Identity::has_identity(who, fields)
        }
        fn has_good_judgement(who: &AccountId) -> bool {
            use pallet_identity::Judgement;
            crate::Identity::identity(who).map(|registration|
                        registration.judgements).map_or(false,
                |judgements|
                    {
                        judgements.iter().any(|(_, j)|
                                match j {
                                    Judgement::KnownGood | Judgement::Reasonable => true,
                                    _ => false,
                                })
                    })
        }
        fn super_account_id(who: &AccountId) -> Option<AccountId> {
            crate::Identity::super_of(who).map(|parent| parent.0)
        }
    }
    pub struct AllianceProposalProvider;
    impl ProposalProvider<AccountId, Hash, RuntimeCall> for
        AllianceProposalProvider {
        fn propose_proposal(who: AccountId, threshold: u32,
            proposal: Box<RuntimeCall>, length_bound: u32)
            -> Result<(u32, u32), DispatchError> {
            AllianceMotion::do_propose_proposed(who, threshold, proposal,
                length_bound)
        }
        fn vote_proposal(who: AccountId, proposal: Hash, index: ProposalIndex,
            approve: bool) -> Result<bool, DispatchError> {
            AllianceMotion::do_vote(who, proposal, index, approve)
        }
        fn close_proposal(proposal_hash: Hash, proposal_index: ProposalIndex,
            proposal_weight_bound: Weight, length_bound: u32)
            -> DispatchResultWithPostInfo {
            AllianceMotion::do_close(proposal_hash, proposal_index,
                proposal_weight_bound, length_bound)
        }
        fn proposal_of(proposal_hash: Hash) -> Option<RuntimeCall> {
            AllianceMotion::proposal_of(proposal_hash)
        }
    }
}
#[cfg(not(feature = "runtime-benchmarks"))]
use impls::AllianceIdentityVerifier;
use impls::{AllianceProposalProvider, Author, CreditToBlockAuthor};
/// Constant values used within the runtime.
pub mod constants {
    //! A set of constant values used in substrate runtime.
    /// Money matters.
    pub mod currency {
        use node_primitives::Balance;
        pub const MILLICENTS: Balance = 1_000_000_000;
        pub const CENTS: Balance = 1_000 * MILLICENTS;
        pub const DOLLARS: Balance = 100 * CENTS;
        pub const fn deposit(items: u32, bytes: u32) -> Balance {
            items as Balance * 15 * CENTS + (bytes as Balance) * 6 * CENTS
        }
    }
    /// Time.
    pub mod time {
        use node_primitives::{BlockNumber, Moment};
        /// Since BABE is probabilistic this is the average expected block time that
        /// we are targeting. Blocks will be produced at a minimum duration defined
        /// by `SLOT_DURATION`, but some slots will not be allocated to any
        /// authority and hence no block will be produced. We expect to have this
        /// block time on average following the defined slot duration and the value
        /// of `c` configured for BABE (where `1 - c` represents the probability of
        /// a slot being empty).
        /// This value is only used indirectly to define the unit constants below
        /// that are expressed in blocks. The rest of the code should use
        /// `SLOT_DURATION` instead (like the Timestamp pallet for calculating the
        /// minimum period).
        ///
        /// If using BABE with secondary slots (default) then all of the slots will
        /// always be assigned, in which case `MILLISECS_PER_BLOCK` and
        /// `SLOT_DURATION` should have the same value.
        ///
        /// <https://research.web3.foundation/en/latest/polkadot/block-production/Babe.html#-6.-practical-results>
        pub const MILLISECS_PER_BLOCK: Moment = 3000;
        pub const SECS_PER_BLOCK: Moment = MILLISECS_PER_BLOCK / 1000;
        pub const SLOT_DURATION: Moment = MILLISECS_PER_BLOCK;
        pub const PRIMARY_PROBABILITY: (u64, u64) = (1, 4);
        pub const EPOCH_DURATION_IN_BLOCKS: BlockNumber = 10 * MINUTES;
        pub const EPOCH_DURATION_IN_SLOTS: u64 =
            {
                const SLOT_FILL_RATE: f64 =
                    MILLISECS_PER_BLOCK as f64 / SLOT_DURATION as f64;
                (EPOCH_DURATION_IN_BLOCKS as f64 * SLOT_FILL_RATE) as u64
            };
        pub const MINUTES: BlockNumber = 60 / (SECS_PER_BLOCK as BlockNumber);
        pub const HOURS: BlockNumber = MINUTES * 60;
        pub const DAYS: BlockNumber = HOURS * 24;
    }
}
use constants::{currency::*, time::*};
use sp_runtime::generic::Era;
/// Generated voter bag information.
mod voter_bags {
    //! Autogenerated bag thresholds.
    //!
    //! Generated on 2022-08-15T19:26:59.939787+00:00
    //! Arguments
    //! Total issuance: 100000000000000
    //! Minimum balance: 100000000000000
    //! for the node runtime.
    /// Existential weight for this runtime.
    #[cfg(any(test, feature = "std"))]
    #[allow(unused)]
    pub const EXISTENTIAL_WEIGHT: u64 = 100_000_000_000_000;
    /// Constant ratio between bags for this runtime.
    #[cfg(any(test, feature = "std"))]
    #[allow(unused)]
    pub const CONSTANT_RATIO: f64 = 1.0628253590743408;
    /// Upper thresholds delimiting the bag list.
    pub const THRESHOLDS: [u64; 200] =
        [100_000_000_000_000, 106_282_535_907_434, 112_959_774_389_150,
                120_056_512_776_105, 127_599_106_300_477, 135_615_565_971_369,
                144_135_662_599_590, 153_191_037_357_827, 162_815_319_286_803,
                173_044_250_183_800, 183_915_817_337_347, 195_470_394_601_017,
                207_750_892_330_229, 220_802_916_738_890, 234_674_939_267_673,
                249_418_476_592_914, 265_088_281_944_639, 281_742_548_444_211,
                299_443_125_216_738, 318_255_747_080_822, 338_250_278_668_647,
                359_500_973_883_001, 382_086_751_654_776, 406_091_489_025_036,
                431_604_332_640_068, 458_720_029_816_222, 487_539_280_404_019,
                518_169_110_758_247, 550_723_271_202_866, 585_322_658_466_782,
                622_095_764_659_305, 661_179_154_452_653, 702_717_972_243_610,
                746_866_481_177_808, 793_788_636_038_393, 843_658_692_126_636,
                896_661_852_395_681, 952_994_955_240_703,
                1_012_867_205_499_736, 1_076_500_951_379_881,
                1_144_132_510_194_192, 1_216_013_045_975_769,
                1_292_409_502_228_280, 1_373_605_593_276_862,
                1_459_902_857_901_004, 1_551_621_779_162_291,
                1_649_102_974_585_730, 1_752_708_461_114_642,
                1_862_822_999_536_805, 1_979_855_523_374_646,
                2_104_240_657_545_975, 2_236_440_332_435_128,
                2_376_945_499_368_703, 2_526_277_953_866_680,
                2_684_992_273_439_945, 2_853_677_877_130_641,
                3_032_961_214_443_876, 3_223_508_091_799_862,
                3_426_026_145_146_232, 3_641_267_467_913_124,
                3_870_031_404_070_482, 4_113_167_516_660_186,
                4_371_578_742_827_277, 4_646_224_747_067_156,
                4_938_125_485_141_739, 5_248_364_991_899_922,
                5_578_095_407_069_235, 5_928_541_253_969_291,
                6_301_003_987_036_955, 6_696_866_825_051_405,
                7_117_599_888_008_300, 7_564_765_656_719_910,
                8_040_024_775_416_580, 8_545_142_218_898_723,
                9_081_993_847_142_344, 9_652_573_371_700_016,
                10_258_999_759_768_490, 10_903_525_103_419_522,
                11_588_542_983_217_942, 12_316_597_357_287_042,
                13_090_392_008_832_678, 13_912_800_587_211_472,
                14_786_877_279_832_732, 15_715_868_154_526_436,
                16_703_223_214_499_558, 17_752_609_210_649_358,
                18_867_923_258_814_856, 20_053_307_312_537_008,
                21_313_163_545_075_252, 22_652_170_697_804_756,
                24_075_301_455_707_600, 25_587_840_914_485_432,
                27_195_406_207_875_088, 28_903_967_368_057_400,
                30_719_869_496_628_636, 32_649_856_328_471_220,
                34_701_095_276_033_064, 36_881_204_047_022_752,
                39_198_278_934_370_992, 41_660_924_883_519_016,
                44_278_287_448_695_240, 47_060_086_756_856_400,
                50_016_653_605_425_536, 53_158_967_827_883_320,
                56_498_699_069_691_424, 60_048_250_125_977_912,
                63_820_803_001_928_304, 67_830_367_866_937_216,
                72_091_835_084_322_176, 76_621_030_509_822_880,
                81_434_774_264_248_528, 86_550_943_198_537_824,
                91_988_537_283_208_848, 97_767_750_168_749_840,
                103_910_044_178_992_000, 110_438_230_015_967_792,
                117_376_551_472_255_616, 124_750_775_465_407_920,
                132_588_287_728_824_640, 140_918_194_514_440_064,
                149_771_430_684_917_568, 159_180_874_596_775_264,
                169_181_470_201_085_280, 179_810_356_815_193_344,
                191_107_007_047_393_216, 203_113_373_386_768_288,
                215_874_044_002_592_672, 229_436_408_331_885_600,
                243_850_833_070_063_392, 259_170_849_218_267_264,
                275_453_350_882_006_752, 292_758_806_559_399_232,
                311_151_483_703_668_992, 330_699_687_393_865_920,
                351_476_014_000_157_824, 373_557_620_785_735_808,
                397_026_512_446_556_096, 421_969_845_653_044_224,
                448_480_252_724_740_928, 476_656_185_639_923_904,
                506_602_281_657_757_760, 538_429_751_910_786_752,
                572_256_794_410_890_176, 608_209_033_002_485_632,
                646_419_983_893_124_352, 687_031_551_494_039_552,
                730_194_555_412_054_016, 776_069_290_549_944_960,
                824_826_122_395_314_176, 876_646_119_708_695_936,
                931_721_726_960_522_368, 990_257_479_014_182_144,
                1_052_470_760_709_299_712, 1_118_592_614_166_106_112,
                1_188_868_596_808_997_376, 1_263_559_693_295_730_432,
                1_342_943_284_738_898_688, 1_427_314_178_819_094_784,
                1_516_985_704_615_302_400, 1_612_290_876_218_400_768,
                1_713_583_629_449_105_408, 1_821_240_136_273_157_632,
                1_935_660_201_795_120_128, 2_057_268_749_018_809_600,
                2_186_517_396_888_336_384, 2_323_886_137_470_138_880,
                2_469_885_118_504_583_168, 2_625_056_537_947_004_416,
                2_789_976_657_533_970_944, 2_965_257_942_852_572_160,
                3_151_551_337_860_326_400, 3_349_548_682_302_620_672,
                3_559_985_281_005_267_968, 3_783_642_634_583_792_128,
                4_021_351_341_710_503_936, 4_273_994_183_717_548_544,
                4_542_509_402_991_247_872, 4_827_894_187_332_742_144,
                5_131_208_373_224_844_288, 5_453_578_381_757_959_168,
                5_796_201_401_831_965_696, 6_160_349_836_169_256_960,
                6_547_376_026_650_146_816, 6_958_717_276_519_173_120,
                7_395_901_188_113_309_696, 7_860_551_335_934_872_576,
                8_354_393_296_137_270_272, 8_879_261_054_815_360_000,
                9_437_103_818_898_946_048, 10_029_993_254_943_105_024,
                10_660_131_182_698_121_216, 11_329_857_752_030_707_712,
                12_041_660_133_563_240_448, 12_798_181_755_305_525_248,
                13_602_232_119_581_272_064, 14_456_797_236_706_498_560,
                15_365_050_714_167_523_328, 16_330_365_542_480_556_032,
                17_356_326_621_502_140_416, 18_446_744_073_709_551_615];
}
/// Runtime API definition for assets.
pub mod assets_api {
    //! Runtime API definition for assets.
    use codec::Codec;
    use sp_std::vec::Vec;
    #[doc(hidden)]
    #[allow(dead_code)]
    #[allow(deprecated)]
    pub mod runtime_decl_for_assets_api {
        pub use super::*;
        pub trait AssetsApiV1<Block: sp_api::BlockT, AccountId, AssetBalance,
            AssetId> where AccountId: Codec, AssetBalance: Codec,
            AssetId: Codec {
            #[doc =
            " Returns the list of `AssetId`s and corresponding balance that an `AccountId` has."]
            fn account_balances(account: AccountId)
            -> Vec<(AssetId, AssetBalance)>;
        }
        pub use AssetsApiV1 as AssetsApi;
        #[inline(always)]
        pub fn runtime_metadata<Block: sp_api::BlockT, AccountId,
            AssetBalance, AssetId>()
            -> sp_api::metadata_ir::RuntimeApiMetadataIR where
            AccountId: sp_api::scale_info::TypeInfo + 'static,
            Vec<(AssetId, AssetBalance)>: sp_api::scale_info::TypeInfo +
            'static {
            sp_api::metadata_ir::RuntimeApiMetadataIR {
                name: "AssetsApi",
                methods: <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([sp_api::metadata_ir::RuntimeApiMethodMetadataIR {
                                    name: "account_balances",
                                    inputs: <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([sp_api::metadata_ir::RuntimeApiMethodParamMetadataIR {
                                                        name: "account",
                                                        ty: sp_api::scale_info::meta_type::<AccountId>(),
                                                    }])),
                                    output: sp_api::scale_info::meta_type::<Vec<(AssetId,
                                            AssetBalance)>>(),
                                    docs: <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([" Returns the list of `AssetId`s and corresponding balance that an `AccountId` has."])),
                                }])),
                docs: ::alloc::vec::Vec::new(),
            }
        }
        pub const VERSION: u32 = 1u32;
        pub const ID: [u8; 8] =
            [132u8, 83u8, 181u8, 11u8, 34u8, 41u8, 57u8, 119u8];
    }
    #[cfg(any(feature = "std", test))]
    pub trait AssetsApi<Block: sp_api::BlockT, AccountId, AssetBalance,
        AssetId>: sp_api::Core<Block> where AccountId: Codec,
        AssetBalance: Codec, AssetId: Codec {
        #[doc =
        " Returns the list of `AssetId`s and corresponding balance that an `AccountId` has."]
        fn account_balances(&self,
            __runtime_api_at_param__: <Block as sp_api::BlockT>::Hash,
            account: AccountId)
            ->
                std::result::Result<Vec<(AssetId, AssetBalance)>,
                sp_api::ApiError> {
            let __runtime_api_impl_params_encoded__ =
                sp_api::Encode::encode(&(&account));
            <Self as
                        AssetsApi<_, _, _,
                        _>>::__runtime_api_internal_call_api_at(self,
                    __runtime_api_at_param__,
                    sp_api::ExecutionContext::OffchainCall(None),
                    __runtime_api_impl_params_encoded__,
                    &(|_version|
                            {
                                "AssetsApi_account_balances"
                            })).and_then(|r|
                    std::result::Result::map_err(<Vec<(AssetId, AssetBalance)>
                                as sp_api::Decode>::decode(&mut &r[..]),
                        |err|
                            sp_api::ApiError::FailedToDecodeReturnValue {
                                function: "AssetsApi_account_balances",
                                error: err,
                            }))
        }
        #[doc =
        " Returns the list of `AssetId`s and corresponding balance that an `AccountId` has."]
        fn account_balances_with_context(&self,
            __runtime_api_at_param__: <Block as sp_api::BlockT>::Hash,
            context: sp_api::ExecutionContext, account: AccountId)
            ->
                std::result::Result<Vec<(AssetId, AssetBalance)>,
                sp_api::ApiError> {
            let __runtime_api_impl_params_encoded__ =
                sp_api::Encode::encode(&(&account));
            <Self as
                        AssetsApi<_, _, _,
                        _>>::__runtime_api_internal_call_api_at(self,
                    __runtime_api_at_param__, context,
                    __runtime_api_impl_params_encoded__,
                    &(|_version|
                            {
                                "AssetsApi_account_balances"
                            })).and_then(|r|
                    std::result::Result::map_err(<Vec<(AssetId, AssetBalance)>
                                as sp_api::Decode>::decode(&mut &r[..]),
                        |err|
                            sp_api::ApiError::FailedToDecodeReturnValue {
                                function: "AssetsApi_account_balances",
                                error: err,
                            }))
        }
        #[doc = r" !!INTERNAL USE ONLY!!"]
        #[doc(hidden)]
        fn __runtime_api_internal_call_api_at(&self,
        at: <Block as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError>;
    }
    #[cfg(any(feature = "std", test))]
    impl<Block: sp_api::BlockT, AccountId, AssetBalance, AssetId>
        sp_api::RuntimeApiInfo for
        dyn AssetsApi<Block, AccountId, AssetBalance, AssetId> {
        const ID: [u8; 8] =
            [132u8, 83u8, 181u8, 11u8, 34u8, 41u8, 57u8, 119u8];
        const VERSION: u32 = 1u32;
    }
}
/// Wasm binary unwrapped. If built with `SKIP_WASM_BUILD`, the function panics.
#[cfg(feature = "std")]
pub fn wasm_binary_unwrap() -> &'static [u8] {
    WASM_BINARY.expect("Development wasm binary is not available. This means the client is built with \
		 `SKIP_WASM_BUILD` flag and it is only usable for production chains. Please rebuild with \
		 the flag disabled.")
}
#[doc = " Runtime version."]
pub const VERSION: RuntimeVersion =
    RuntimeVersion {
        spec_name: { ::sp_runtime::RuntimeString::Borrowed("node") },
        impl_name: {
            ::sp_runtime::RuntimeString::Borrowed("substrate-node")
        },
        authoring_version: 10,
        spec_version: 268,
        impl_version: 0,
        apis: RUNTIME_API_VERSIONS,
        transaction_version: 2,
        state_version: 1,
    };
const _: () = {};
/// The BABE epoch configuration at genesis.
pub const BABE_GENESIS_EPOCH_CONFIG: sp_consensus_babe::BabeEpochConfiguration
    =
    sp_consensus_babe::BabeEpochConfiguration {
        c: PRIMARY_PROBABILITY,
        allowed_slots: sp_consensus_babe::AllowedSlots::PrimaryAndSecondaryPlainSlots,
    };
/// Native version.
#[cfg(any(feature = "std", test))]
pub fn native_version() -> NativeVersion {
    NativeVersion {
        runtime_version: VERSION,
        can_author_with: Default::default(),
    }
}
type NegativeImbalance = <Balances as Currency<AccountId>>::NegativeImbalance;
pub struct DealWithFees;
impl OnUnbalanced<NegativeImbalance> for DealWithFees {
    fn on_unbalanceds<B>(mut fees_then_tips:
            impl Iterator<Item = NegativeImbalance>) {
        if let Some(fees) = fees_then_tips.next() {
                let mut split = fees.ration(80, 20);
                if let Some(tips) = fees_then_tips.next() {
                        tips.ration_merge_into(80, 20, &mut split);
                    }
                Treasury::on_unbalanced(split.0);
                Author::on_unbalanced(split.1);
            }
    }
}
/// We assume that ~10% of the block weight is consumed by `on_initialize` handlers.
/// This is used to limit the maximal weight of a single extrinsic.
const AVERAGE_ON_INITIALIZE_RATIO: Perbill = Perbill::from_percent(10);
/// We allow `Normal` extrinsics to fill up the block up to 75%, the rest can be used
/// by  Operational  extrinsics.
const NORMAL_DISPATCH_RATIO: Perbill = Perbill::from_percent(75);
/// We allow for 2 seconds of compute with a 6 second average block time, with maximum proof size.
const MAXIMUM_BLOCK_WEIGHT: Weight =
    Weight::from_parts(WEIGHT_REF_TIME_PER_SECOND.saturating_mul(2),
        u64::MAX);
pub struct BlockHashCount;
impl BlockHashCount<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 2400 }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    BlockHashCount<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BlockHashCount<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct Version;
impl Version<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> RuntimeVersion { VERSION }
}
impl<_I: From<RuntimeVersion>> ::frame_support::traits::Get<_I> for Version<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Version<> {
    type Type = RuntimeVersion;
    fn get() -> RuntimeVersion { Self::get() }
}
pub struct RuntimeBlockLength;
impl RuntimeBlockLength<> {
    /// Returns the value of this parameter type.
    pub fn get() -> BlockLength {
        BlockLength::max_with_normal_ratio(5 * 1024 * 1024,
            NORMAL_DISPATCH_RATIO)
    }
}
impl<_I: From<BlockLength>> ::frame_support::traits::Get<_I> for
    RuntimeBlockLength<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for RuntimeBlockLength<> {
    type Type = BlockLength;
    fn get() -> BlockLength { Self::get() }
}
pub struct RuntimeBlockWeights;
impl RuntimeBlockWeights<> {
    /// Returns the value of this parameter type.
    pub fn get() -> BlockWeights {
        BlockWeights::builder().base_block(BlockExecutionWeight::get()).for_class(DispatchClass::all(),
                            |weights|
                                {
                                    weights.base_extrinsic = ExtrinsicBaseWeight::get();
                                }).for_class(DispatchClass::Normal,
                        |weights|
                            {
                                weights.max_total =
                                    Some(NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT);
                            }).for_class(DispatchClass::Operational,
                    |weights|
                        {
                            weights.max_total = Some(MAXIMUM_BLOCK_WEIGHT);
                            weights.reserved =
                                Some(MAXIMUM_BLOCK_WEIGHT -
                                        NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT);
                        }).avg_block_initialization(AVERAGE_ON_INITIALIZE_RATIO).build_or_panic()
    }
}
impl<_I: From<BlockWeights>> ::frame_support::traits::Get<_I> for
    RuntimeBlockWeights<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for RuntimeBlockWeights<> {
    type Type = BlockWeights;
    fn get() -> BlockWeights { Self::get() }
}
pub struct MaxCollectivesProposalWeight;
impl MaxCollectivesProposalWeight<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Weight {
        Perbill::from_percent(50) * RuntimeBlockWeights::get().max_block
    }
}
impl<_I: From<Weight>> ::frame_support::traits::Get<_I> for
    MaxCollectivesProposalWeight<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxCollectivesProposalWeight<> {
    type Type = Weight;
    fn get() -> Weight { Self::get() }
}
#[allow(unknown_lints, eq_op)]
const _:
    [(); 0 -
        !{
                    const ASSERT: bool =
                        NORMAL_DISPATCH_RATIO.deconstruct() >=
                            AVERAGE_ON_INITIALIZE_RATIO.deconstruct();
                    ASSERT
                } as usize] =
    [];
impl frame_system::Config for Runtime {
    type BaseCallFilter = Everything;
    type BlockWeights = RuntimeBlockWeights;
    type BlockLength = RuntimeBlockLength;
    type DbWeight = RocksDbWeight;
    type RuntimeOrigin = RuntimeOrigin;
    type RuntimeCall = RuntimeCall;
    type Index = Index;
    type BlockNumber = BlockNumber;
    type Hash = Hash;
    type Hashing = BlakeTwo256;
    type AccountId = AccountId;
    type Lookup = Indices;
    type Header = generic::Header<BlockNumber, BlakeTwo256>;
    type RuntimeEvent = RuntimeEvent;
    type BlockHashCount = BlockHashCount;
    type Version = Version;
    type PalletInfo = PalletInfo;
    type AccountData = pallet_balances::AccountData<Balance>;
    type OnNewAccount = ();
    type OnKilledAccount = ();
    type SystemWeightInfo = frame_system::weights::SubstrateWeight<Runtime>;
    type SS58Prefix = ConstU16<42>;
    type OnSetCode = ();
    type MaxConsumers = ConstU32<16>;
}
impl pallet_insecure_randomness_collective_flip::Config for Runtime {}
impl pallet_utility::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeCall = RuntimeCall;
    type PalletsOrigin = OriginCaller;
    type WeightInfo = pallet_utility::weights::SubstrateWeight<Runtime>;
}
pub struct DepositBase;
impl DepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(1, 88) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for DepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct DepositFactor;
impl DepositFactor<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(0, 32) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for DepositFactor<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DepositFactor<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_multisig::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeCall = RuntimeCall;
    type Currency = Balances;
    type DepositBase = DepositBase;
    type DepositFactor = DepositFactor;
    type MaxSignatories = ConstU32<100>;
    type WeightInfo = pallet_multisig::weights::SubstrateWeight<Runtime>;
}
pub struct ProxyDepositBase;
impl ProxyDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(1, 8) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ProxyDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ProxyDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct ProxyDepositFactor;
impl ProxyDepositFactor<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(0, 33) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ProxyDepositFactor<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ProxyDepositFactor<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct AnnouncementDepositBase;
impl AnnouncementDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(1, 8) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    AnnouncementDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AnnouncementDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct AnnouncementDepositFactor;
impl AnnouncementDepositFactor<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(0, 66) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    AnnouncementDepositFactor<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AnnouncementDepositFactor<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
/// The type used to represent the kinds of proxying allowed.
pub enum ProxyType { Any, NonTransfer, Governance, Staking, }
#[automatically_derived]
impl ::core::marker::Copy for ProxyType { }
#[automatically_derived]
impl ::core::clone::Clone for ProxyType {
    #[inline]
    fn clone(&self) -> ProxyType { *self }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for ProxyType { }
#[automatically_derived]
impl ::core::cmp::Eq for ProxyType {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for ProxyType { }
#[automatically_derived]
impl ::core::cmp::PartialEq for ProxyType {
    #[inline]
    fn eq(&self, other: &ProxyType) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for ProxyType {
    #[inline]
    fn cmp(&self, other: &ProxyType) -> ::core::cmp::Ordering {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag)
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for ProxyType {
    #[inline]
    fn partial_cmp(&self, other: &ProxyType)
        -> ::core::option::Option<::core::cmp::Ordering> {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        ::core::cmp::PartialOrd::partial_cmp(&__self_tag, &__arg1_tag)
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Encode for ProxyType {
            fn encode_to<__CodecOutputEdqy: ::codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    ProxyType::Any => {
                        __codec_dest_edqy.push_byte(0usize as
                                ::core::primitive::u8);
                    }
                    ProxyType::NonTransfer => {
                        __codec_dest_edqy.push_byte(1usize as
                                ::core::primitive::u8);
                    }
                    ProxyType::Governance => {
                        __codec_dest_edqy.push_byte(2usize as
                                ::core::primitive::u8);
                    }
                    ProxyType::Staking => {
                        __codec_dest_edqy.push_byte(3usize as
                                ::core::primitive::u8);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::codec::EncodeLike for ProxyType { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Decode for ProxyType {
            fn decode<__CodecInputEdqy: ::codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `ProxyType`, failed to read variant byte"))?
                    {
                    __codec_x_edqy if
                        __codec_x_edqy == 0usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(ProxyType::Any)
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 1usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(ProxyType::NonTransfer)
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 2usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(ProxyType::Governance)
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 3usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(ProxyType::Staking)
                    }
                    _ =>
                        ::core::result::Result::Err(<_ as
                                    ::core::convert::Into<_>>::into("Could not decode `ProxyType`, variant doesn't exist")),
                }
            }
        }
    };
impl core::fmt::Debug for ProxyType {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::Any => fmt.debug_tuple("ProxyType::Any").finish(),
            Self::NonTransfer =>
                fmt.debug_tuple("ProxyType::NonTransfer").finish(),
            Self::Governance =>
                fmt.debug_tuple("ProxyType::Governance").finish(),
            Self::Staking => fmt.debug_tuple("ProxyType::Staking").finish(),
            _ => Ok(()),
        }
    }
}
const _: () =
    {
        impl ::codec::MaxEncodedLen for ProxyType {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.max(0_usize).max(0_usize).max(0_usize).max(0_usize).saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for ProxyType {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("ProxyType",
                                    "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["The type used to represent the kinds of proxying allowed."]).variant(::scale_info::build::Variants::new().variant("Any",
                                    |v|
                                        v.index(0usize as
                                                ::core::primitive::u8)).variant("NonTransfer",
                                |v|
                                    v.index(1usize as
                                            ::core::primitive::u8)).variant("Governance",
                            |v|
                                v.index(2usize as
                                        ::core::primitive::u8)).variant("Staking",
                        |v| v.index(3usize as ::core::primitive::u8)))
            }
        }
        ;
    };
impl Default for ProxyType {
    fn default() -> Self { Self::Any }
}
impl InstanceFilter<RuntimeCall> for ProxyType {
    fn filter(&self, c: &RuntimeCall) -> bool {
        match self {
            ProxyType::Any => true,
            ProxyType::NonTransfer =>
                !match c {
                        RuntimeCall::Balances(..) | RuntimeCall::Assets(..) |
                            RuntimeCall::Uniques(..) | RuntimeCall::Nfts(..) |
                            RuntimeCall::Vesting(pallet_vesting::Call::vested_transfer {
                            .. }) |
                            RuntimeCall::Indices(pallet_indices::Call::transfer { .. })
                            => true,
                        _ => false,
                    },
            ProxyType::Governance =>
                match c {
                    RuntimeCall::Democracy(..) | RuntimeCall::Council(..) |
                        RuntimeCall::Society(..) |
                        RuntimeCall::TechnicalCommittee(..) |
                        RuntimeCall::Elections(..) | RuntimeCall::Treasury(..) =>
                        true,
                    _ => false,
                },
            ProxyType::Staking =>
                match c {
                    RuntimeCall::Staking(..) | RuntimeCall::FastUnstake(..) =>
                        true,
                    _ => false,
                },
        }
    }
    fn is_superset(&self, o: &Self) -> bool {
        match (self, o) {
            (x, y) if x == y => true,
            (ProxyType::Any, _) => true,
            (_, ProxyType::Any) => false,
            (ProxyType::NonTransfer, _) => true,
            _ => false,
        }
    }
}
impl pallet_proxy::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeCall = RuntimeCall;
    type Currency = Balances;
    type ProxyType = ProxyType;
    type ProxyDepositBase = ProxyDepositBase;
    type ProxyDepositFactor = ProxyDepositFactor;
    type MaxProxies = ConstU32<32>;
    type WeightInfo = pallet_proxy::weights::SubstrateWeight<Runtime>;
    type MaxPending = ConstU32<32>;
    type CallHasher = BlakeTwo256;
    type AnnouncementDepositBase = AnnouncementDepositBase;
    type AnnouncementDepositFactor = AnnouncementDepositFactor;
}
pub struct MaximumSchedulerWeight;
impl MaximumSchedulerWeight<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Weight {
        Perbill::from_percent(80) * RuntimeBlockWeights::get().max_block
    }
}
impl<_I: From<Weight>> ::frame_support::traits::Get<_I> for
    MaximumSchedulerWeight<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaximumSchedulerWeight<> {
    type Type = Weight;
    fn get() -> Weight { Self::get() }
}
impl pallet_scheduler::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeOrigin = RuntimeOrigin;
    type PalletsOrigin = OriginCaller;
    type RuntimeCall = RuntimeCall;
    type MaximumWeight = MaximumSchedulerWeight;
    type ScheduleOrigin = EnsureRoot<AccountId>;
    #[cfg(not(feature = "runtime-benchmarks"))]
    type MaxScheduledPerBlock = ConstU32<50>;
    type WeightInfo = pallet_scheduler::weights::SubstrateWeight<Runtime>;
    type OriginPrivilegeCmp = EqualPrivilegeOnly;
    type Preimages = Preimage;
}
impl pallet_glutton::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type AdminOrigin = EnsureRoot<AccountId>;
    type WeightInfo = pallet_glutton::weights::SubstrateWeight<Runtime>;
}
pub struct PreimageMaxSize;
impl PreimageMaxSize<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 4096 * 1024 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for PreimageMaxSize<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for PreimageMaxSize<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct PreimageBaseDeposit;
impl PreimageBaseDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    PreimageBaseDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for PreimageBaseDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct PreimageByteDeposit;
impl PreimageByteDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * CENTS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    PreimageByteDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for PreimageByteDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_preimage::Config for Runtime {
    type WeightInfo = pallet_preimage::weights::SubstrateWeight<Runtime>;
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type ManagerOrigin = EnsureRoot<AccountId>;
    type BaseDeposit = PreimageBaseDeposit;
    type ByteDeposit = PreimageByteDeposit;
}
pub struct EpochDuration;
impl EpochDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u64 { EPOCH_DURATION_IN_SLOTS }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for EpochDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for EpochDuration<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
pub struct ExpectedBlockTime;
impl ExpectedBlockTime<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Moment { MILLISECS_PER_BLOCK }
}
impl<_I: From<Moment>> ::frame_support::traits::Get<_I> for
    ExpectedBlockTime<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ExpectedBlockTime<> {
    type Type = Moment;
    fn get() -> Moment { Self::get() }
}
pub struct ReportLongevity;
impl ReportLongevity<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u64 {
        BondingDuration::get() as u64 * SessionsPerEra::get() as u64 *
            EpochDuration::get()
    }
}
impl<_I: From<u64>> ::frame_support::traits::Get<_I> for ReportLongevity<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ReportLongevity<> {
    type Type = u64;
    fn get() -> u64 { Self::get() }
}
impl pallet_babe::Config for Runtime {
    type EpochDuration = EpochDuration;
    type ExpectedBlockTime = ExpectedBlockTime;
    type EpochChangeTrigger = pallet_babe::ExternalTrigger;
    type DisabledValidators = Session;
    type WeightInfo = ();
    type MaxAuthorities = MaxAuthorities;
    type KeyOwnerProof =
        <Historical as
        KeyOwnerProofSystem<(KeyTypeId, pallet_babe::AuthorityId)>>::Proof;
    type EquivocationReportSystem =
        pallet_babe::EquivocationReportSystem<Self, Offences, Historical,
        ReportLongevity>;
}
pub struct IndexDeposit;
impl IndexDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for IndexDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for IndexDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_indices::Config for Runtime {
    type AccountIndex = AccountIndex;
    type Currency = Balances;
    type Deposit = IndexDeposit;
    type RuntimeEvent = RuntimeEvent;
    type WeightInfo = pallet_indices::weights::SubstrateWeight<Runtime>;
}
pub struct ExistentialDeposit;
impl ExistentialDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ExistentialDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ExistentialDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MaxLocks;
impl MaxLocks<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 50 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxLocks<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxLocks<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxReserves;
impl MaxReserves<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 50 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxReserves<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxReserves<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_balances::Config for Runtime {
    type MaxLocks = MaxLocks;
    type MaxReserves = MaxReserves;
    type ReserveIdentifier = [u8; 8];
    type Balance = Balance;
    type DustRemoval = ();
    type RuntimeEvent = RuntimeEvent;
    type ExistentialDeposit = ExistentialDeposit;
    type AccountStore = frame_system::Pallet<Runtime>;
    type WeightInfo = pallet_balances::weights::SubstrateWeight<Runtime>;
    type FreezeIdentifier = ();
    type MaxFreezes = ();
    type RuntimeHoldReason = RuntimeHoldReason;
    type MaxHolds = ConstU32<2>;
}
pub struct TransactionByteFee;
impl TransactionByteFee<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 10 * MILLICENTS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    TransactionByteFee<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TransactionByteFee<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct OperationalFeeMultiplier;
impl OperationalFeeMultiplier<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u8 { 5 }
}
impl<_I: From<u8>> ::frame_support::traits::Get<_I> for
    OperationalFeeMultiplier<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for OperationalFeeMultiplier<> {
    type Type = u8;
    fn get() -> u8 { Self::get() }
}
pub struct TargetBlockFullness;
impl TargetBlockFullness<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Perquintill { Perquintill::from_percent(25) }
}
impl<_I: From<Perquintill>> ::frame_support::traits::Get<_I> for
    TargetBlockFullness<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TargetBlockFullness<> {
    type Type = Perquintill;
    fn get() -> Perquintill { Self::get() }
}
pub struct AdjustmentVariable;
impl AdjustmentVariable<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Multiplier {
        Multiplier::saturating_from_rational(1, 100_000)
    }
}
impl<_I: From<Multiplier>> ::frame_support::traits::Get<_I> for
    AdjustmentVariable<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AdjustmentVariable<> {
    type Type = Multiplier;
    fn get() -> Multiplier { Self::get() }
}
pub struct MinimumMultiplier;
impl MinimumMultiplier<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Multiplier {
        Multiplier::saturating_from_rational(1, 1_000_000_000u128)
    }
}
impl<_I: From<Multiplier>> ::frame_support::traits::Get<_I> for
    MinimumMultiplier<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinimumMultiplier<> {
    type Type = Multiplier;
    fn get() -> Multiplier { Self::get() }
}
pub struct MaximumMultiplier;
impl MaximumMultiplier<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Multiplier { Bounded::max_value() }
}
impl<_I: From<Multiplier>> ::frame_support::traits::Get<_I> for
    MaximumMultiplier<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaximumMultiplier<> {
    type Type = Multiplier;
    fn get() -> Multiplier { Self::get() }
}
impl pallet_transaction_payment::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type OnChargeTransaction = CurrencyAdapter<Balances, DealWithFees>;
    type OperationalFeeMultiplier = OperationalFeeMultiplier;
    type WeightToFee = IdentityFee<Balance>;
    type LengthToFee = ConstantMultiplier<Balance, TransactionByteFee>;
    type FeeMultiplierUpdate =
        TargetedFeeAdjustment<Self, TargetBlockFullness, AdjustmentVariable,
        MinimumMultiplier, MaximumMultiplier>;
}
impl pallet_asset_tx_payment::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Fungibles = Assets;
    type OnChargeAssetTransaction =
        pallet_asset_tx_payment::FungiblesAdapter<pallet_assets::BalanceToAssetBalance<Balances,
        Runtime, ConvertInto>, CreditToBlockAuthor>;
}
pub struct MinimumPeriod;
impl MinimumPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Moment { SLOT_DURATION / 2 }
}
impl<_I: From<Moment>> ::frame_support::traits::Get<_I> for MinimumPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinimumPeriod<> {
    type Type = Moment;
    fn get() -> Moment { Self::get() }
}
impl pallet_timestamp::Config for Runtime {
    type Moment = Moment;
    type OnTimestampSet = Babe;
    type MinimumPeriod = MinimumPeriod;
    type WeightInfo = pallet_timestamp::weights::SubstrateWeight<Runtime>;
}
impl pallet_authorship::Config for Runtime {
    type FindAuthor = pallet_session::FindAccountFromAuthorIndex<Self, Babe>;
    type EventHandler = (Staking, ImOnline);
}
use ::sp_runtime::serde as __opaque_keys_serde_import__SessionKeys;
#[serde(crate = "__opaque_keys_serde_import__SessionKeys")]
pub struct SessionKeys {
    pub grandpa: <Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public,
    pub babe: <Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public,
    pub im_online: <ImOnline as
    ::sp_runtime::BoundToRuntimeAppPublic>::Public,
    pub authority_discovery: <AuthorityDiscovery as
    ::sp_runtime::BoundToRuntimeAppPublic>::Public,
}
#[automatically_derived]
impl ::core::clone::Clone for SessionKeys {
    #[inline]
    fn clone(&self) -> SessionKeys {
        SessionKeys {
            grandpa: ::core::clone::Clone::clone(&self.grandpa),
            babe: ::core::clone::Clone::clone(&self.babe),
            im_online: ::core::clone::Clone::clone(&self.im_online),
            authority_discovery: ::core::clone::Clone::clone(&self.authority_discovery),
        }
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for SessionKeys { }
#[automatically_derived]
impl ::core::cmp::PartialEq for SessionKeys {
    #[inline]
    fn eq(&self, other: &SessionKeys) -> bool {
        self.grandpa == other.grandpa && self.babe == other.babe &&
                self.im_online == other.im_online &&
            self.authority_discovery == other.authority_discovery
    }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for SessionKeys { }
#[automatically_derived]
impl ::core::cmp::Eq for SessionKeys {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _:
                ::core::cmp::AssertParamIsEq<<Grandpa as
                ::sp_runtime::BoundToRuntimeAppPublic>::Public>;
        let _:
                ::core::cmp::AssertParamIsEq<<Babe as
                ::sp_runtime::BoundToRuntimeAppPublic>::Public>;
        let _:
                ::core::cmp::AssertParamIsEq<<ImOnline as
                ::sp_runtime::BoundToRuntimeAppPublic>::Public>;
        let _:
                ::core::cmp::AssertParamIsEq<<AuthorityDiscovery as
                ::sp_runtime::BoundToRuntimeAppPublic>::Public>;
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Encode for SessionKeys {
            fn encode_to<__CodecOutputEdqy: ::codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                ::codec::Encode::encode_to(&self.grandpa, __codec_dest_edqy);
                ::codec::Encode::encode_to(&self.babe, __codec_dest_edqy);
                ::codec::Encode::encode_to(&self.im_online,
                    __codec_dest_edqy);
                ::codec::Encode::encode_to(&self.authority_discovery,
                    __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::codec::EncodeLike for SessionKeys { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Decode for SessionKeys {
            fn decode<__CodecInputEdqy: ::codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::codec::Error> {
                ::core::result::Result::Ok(SessionKeys {
                        grandpa: {
                            let __codec_res_edqy =
                                <<Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                                        as ::codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) =>
                                    return ::core::result::Result::Err(e.chain("Could not decode `SessionKeys::grandpa`")),
                                ::core::result::Result::Ok(__codec_res_edqy) =>
                                    __codec_res_edqy,
                            }
                        },
                        babe: {
                            let __codec_res_edqy =
                                <<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                                        ::codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) =>
                                    return ::core::result::Result::Err(e.chain("Could not decode `SessionKeys::babe`")),
                                ::core::result::Result::Ok(__codec_res_edqy) =>
                                    __codec_res_edqy,
                            }
                        },
                        im_online: {
                            let __codec_res_edqy =
                                <<ImOnline as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                                        as ::codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) =>
                                    return ::core::result::Result::Err(e.chain("Could not decode `SessionKeys::im_online`")),
                                ::core::result::Result::Ok(__codec_res_edqy) =>
                                    __codec_res_edqy,
                            }
                        },
                        authority_discovery: {
                            let __codec_res_edqy =
                                <<AuthorityDiscovery as
                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                                        ::codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) =>
                                    return ::core::result::Result::Err(e.chain("Could not decode `SessionKeys::authority_discovery`")),
                                ::core::result::Result::Ok(__codec_res_edqy) =>
                                    __codec_res_edqy,
                            }
                        },
                    })
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for SessionKeys {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("SessionKeys",
                                "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).composite(::scale_info::build::Fields::named().field(|f|
                                        f.ty::<<Grandpa as
                                                    ::sp_runtime::BoundToRuntimeAppPublic>::Public>().name("grandpa").type_name("<Grandpa as $crate::BoundToRuntimeAppPublic>::Public")).field(|f|
                                    f.ty::<<Babe as
                                                ::sp_runtime::BoundToRuntimeAppPublic>::Public>().name("babe").type_name("<Babe as $crate::BoundToRuntimeAppPublic>::Public")).field(|f|
                                f.ty::<<ImOnline as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>().name("im_online").type_name("<ImOnline as $crate::BoundToRuntimeAppPublic>::Public")).field(|f|
                            f.ty::<<AuthorityDiscovery as
                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>().name("authority_discovery").type_name("<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public")))
            }
        }
        ;
    };
impl core::fmt::Debug for SessionKeys {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        fmt.debug_struct("SessionKeys").field("grandpa",
                            &self.grandpa).field("babe",
                        &self.babe).field("im_online",
                    &self.im_online).field("authority_discovery",
                &self.authority_discovery).finish()
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        use __opaque_keys_serde_import__SessionKeys as _serde;
        #[allow(unused_macros)]
        macro_rules! try {
            ($__expr : expr) =>
            {
                match $__expr
                {
                    _serde :: __private :: Ok(__val) => __val, _serde ::
                    __private :: Err(__err) =>
                    { return _serde :: __private :: Err(__err) ; }
                }
            }
        }
        #[automatically_derived]
        impl __opaque_keys_serde_import__SessionKeys::Serialize for
            SessionKeys {
            fn serialize<__S>(&self, __serializer: __S)
                ->
                    __opaque_keys_serde_import__SessionKeys::__private::Result<__S::Ok,
                    __S::Error> where
                __S: __opaque_keys_serde_import__SessionKeys::Serializer {
                let mut __serde_state =
                    match _serde::Serializer::serialize_struct(__serializer,
                            "SessionKeys", false as usize + 1 + 1 + 1 + 1) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "grandpa", &self.grandpa) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "babe", &self.babe) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "im_online", &self.im_online) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "authority_discovery", &self.authority_discovery) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        use __opaque_keys_serde_import__SessionKeys as _serde;
        #[allow(unused_macros)]
        macro_rules! try {
            ($__expr : expr) =>
            {
                match $__expr
                {
                    _serde :: __private :: Ok(__val) => __val, _serde ::
                    __private :: Err(__err) =>
                    { return _serde :: __private :: Err(__err) ; }
                }
            }
        }
        #[automatically_derived]
        impl<'de> __opaque_keys_serde_import__SessionKeys::Deserialize<'de>
            for SessionKeys {
            fn deserialize<__D>(__deserializer: __D)
                ->
                    __opaque_keys_serde_import__SessionKeys::__private::Result<Self,
                    __D::Error> where
                __D: __opaque_keys_serde_import__SessionKeys::Deserializer<'de> {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(&self,
                        __formatter: &mut _serde::__private::Formatter)
                        -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter,
                            "field identifier")
                    }
                    fn visit_u64<__E>(self, __value: u64)
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(self, __value: &str)
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            "grandpa" => _serde::__private::Ok(__Field::__field0),
                            "babe" => _serde::__private::Ok(__Field::__field1),
                            "im_online" => _serde::__private::Ok(__Field::__field2),
                            "authority_discovery" =>
                                _serde::__private::Ok(__Field::__field3),
                            _ => { _serde::__private::Ok(__Field::__ignore) }
                        }
                    }
                    fn visit_bytes<__E>(self, __value: &[u8])
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            b"grandpa" => _serde::__private::Ok(__Field::__field0),
                            b"babe" => _serde::__private::Ok(__Field::__field1),
                            b"im_online" => _serde::__private::Ok(__Field::__field2),
                            b"authority_discovery" =>
                                _serde::__private::Ok(__Field::__field3),
                            _ => { _serde::__private::Ok(__Field::__ignore) }
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(__deserializer: __D)
                        -> _serde::__private::Result<Self, __D::Error> where
                        __D: _serde::Deserializer<'de> {
                        _serde::Deserializer::deserialize_identifier(__deserializer,
                            __FieldVisitor)
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SessionKeys>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SessionKeys;
                    fn expecting(&self,
                        __formatter: &mut _serde::__private::Formatter)
                        -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter,
                            "struct SessionKeys")
                    }
                    #[inline]
                    fn visit_seq<__A>(self, mut __seq: __A)
                        -> _serde::__private::Result<Self::Value, __A::Error> where
                        __A: _serde::de::SeqAccess<'de> {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<<Grandpa
                                            as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(0usize,
                                                &"struct SessionKeys with 4 elements"));
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<<Babe as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(1usize,
                                                &"struct SessionKeys with 4 elements"));
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<<ImOnline
                                            as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(2usize,
                                                &"struct SessionKeys with 4 elements"));
                                }
                            };
                        let __field3 =
                            match match _serde::de::SeqAccess::next_element::<<AuthorityDiscovery
                                            as
                                            ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(3usize,
                                                &"struct SessionKeys with 4 elements"));
                                }
                            };
                        _serde::__private::Ok(SessionKeys {
                                grandpa: __field0,
                                babe: __field1,
                                im_online: __field2,
                                authority_discovery: __field3,
                            })
                    }
                    #[inline]
                    fn visit_map<__A>(self, mut __map: __A)
                        -> _serde::__private::Result<Self::Value, __A::Error> where
                        __A: _serde::de::MapAccess<'de> {
                        let mut __field0:
                                _serde::__private::Option<<Grandpa as
                                ::sp_runtime::BoundToRuntimeAppPublic>::Public> =
                            _serde::__private::None;
                        let mut __field1:
                                _serde::__private::Option<<Babe as
                                ::sp_runtime::BoundToRuntimeAppPublic>::Public> =
                            _serde::__private::None;
                        let mut __field2:
                                _serde::__private::Option<<ImOnline as
                                ::sp_runtime::BoundToRuntimeAppPublic>::Public> =
                            _serde::__private::None;
                        let mut __field3:
                                _serde::__private::Option<<AuthorityDiscovery as
                                ::sp_runtime::BoundToRuntimeAppPublic>::Public> =
                            _serde::__private::None;
                        while let _serde::__private::Some(__key) =
                                match _serde::de::MapAccess::next_key::<__Field>(&mut __map)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("grandpa"));
                                        }
                                    __field0 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<<Grandpa
                                                        as
                                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("babe"));
                                        }
                                    __field1 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<<Babe
                                                        as
                                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("im_online"));
                                        }
                                    __field2 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<<ImOnline
                                                        as
                                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("authority_discovery"));
                                        }
                                    __field3 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<<AuthorityDiscovery
                                                        as
                                                        ::sp_runtime::BoundToRuntimeAppPublic>::Public>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                _ => {
                                    let _ =
                                        match _serde::de::MapAccess::next_value::<_serde::de::IgnoredAny>(&mut __map)
                                            {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        };
                                }
                            }
                        }
                        let __field0 =
                            match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("grandpa") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field1 =
                            match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("babe") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field2 =
                            match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("im_online") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field3 =
                            match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("authority_discovery")
                                        {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        _serde::__private::Ok(SessionKeys {
                                grandpa: __field0,
                                babe: __field1,
                                im_online: __field2,
                                authority_discovery: __field3,
                            })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] =
                    &["grandpa", "babe", "im_online", "authority_discovery"];
                _serde::Deserializer::deserialize_struct(__deserializer,
                    "SessionKeys", FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SessionKeys>,
                        lifetime: _serde::__private::PhantomData,
                    })
            }
        }
    };
impl SessionKeys {
    /// Generate a set of keys with optionally using the given seed.
    ///
    /// The generated key pairs are stored in the keystore.
    ///
    /// Returns the concatenated SCALE encoded public keys.
    pub fn generate(seed: Option<::sp_runtime::sp_std::vec::Vec<u8>>)
        -> ::sp_runtime::sp_std::vec::Vec<u8> {
        let keys =
            Self {
                grandpa: <<Grandpa as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::generate_pair(seed.clone()),
                babe: <<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                        as
                        ::sp_runtime::RuntimeAppPublic>::generate_pair(seed.clone()),
                im_online: <<ImOnline as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::generate_pair(seed.clone()),
                authority_discovery: <<AuthorityDiscovery as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::generate_pair(seed.clone()),
            };
        ::sp_runtime::codec::Encode::encode(&keys)
    }
    /// Converts `Self` into a `Vec` of `(raw public key, KeyTypeId)`.
    pub fn into_raw_public_keys(self)
        ->
            ::sp_runtime::sp_std::vec::Vec<(::sp_runtime::sp_std::vec::Vec<u8>,
            ::sp_runtime::KeyTypeId)> {
        let mut keys = Vec::new();
        keys.push((::sp_runtime::RuntimeAppPublic::to_raw_vec(&self.grandpa),
                <<Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                    ::sp_runtime::RuntimeAppPublic>::ID));
        keys.push((::sp_runtime::RuntimeAppPublic::to_raw_vec(&self.babe),
                <<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                    ::sp_runtime::RuntimeAppPublic>::ID));
        keys.push((::sp_runtime::RuntimeAppPublic::to_raw_vec(&self.im_online),
                <<ImOnline as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                    as ::sp_runtime::RuntimeAppPublic>::ID));
        keys.push((::sp_runtime::RuntimeAppPublic::to_raw_vec(&self.authority_discovery),
                <<AuthorityDiscovery as
                    ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                    ::sp_runtime::RuntimeAppPublic>::ID));
        keys
    }
    /// Decode `Self` from the given `encoded` slice and convert `Self` into the raw public
    /// keys (see [`Self::into_raw_public_keys`]).
    ///
    /// Returns `None` when the decoding failed, otherwise `Some(_)`.
    pub fn decode_into_raw_public_keys(encoded: &[u8])
        ->
            Option<::sp_runtime::sp_std::vec::Vec<(::sp_runtime::sp_std::vec::Vec<u8>,
            ::sp_runtime::KeyTypeId)>> {
        <Self as
                        ::sp_runtime::codec::Decode>::decode(&mut &encoded[..]).ok().map(|s|
                s.into_raw_public_keys())
    }
}
impl ::sp_runtime::traits::OpaqueKeys for SessionKeys {
    type KeyTypeIdProviders = (Grandpa, Babe, ImOnline, AuthorityDiscovery);
    fn key_ids() -> &'static [::sp_runtime::KeyTypeId] {
        &[<<Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::ID,
                    <<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::ID,
                    <<ImOnline as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                        as ::sp_runtime::RuntimeAppPublic>::ID,
                    <<AuthorityDiscovery as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::ID]
    }
    fn get_raw(&self, i: ::sp_runtime::KeyTypeId) -> &[u8] {
        match i {
            i if
                i ==
                    <<Grandpa as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                        as ::sp_runtime::RuntimeAppPublic>::ID =>
                self.grandpa.as_ref(),
            i if
                i ==
                    <<Babe as ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::ID => self.babe.as_ref(),
            i if
                i ==
                    <<ImOnline as ::sp_runtime::BoundToRuntimeAppPublic>::Public
                        as ::sp_runtime::RuntimeAppPublic>::ID =>
                self.im_online.as_ref(),
            i if
                i ==
                    <<AuthorityDiscovery as
                        ::sp_runtime::BoundToRuntimeAppPublic>::Public as
                        ::sp_runtime::RuntimeAppPublic>::ID =>
                self.authority_discovery.as_ref(),
            _ => &[],
        }
    }
}
impl pallet_session::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type ValidatorId = <Self as frame_system::Config>::AccountId;
    type ValidatorIdOf = pallet_staking::StashOf<Self>;
    type ShouldEndSession = Babe;
    type NextSessionRotation = Babe;
    type SessionManager =
        pallet_session::historical::NoteHistoricalRoot<Self, Staking>;
    type SessionHandler = <SessionKeys as OpaqueKeys>::KeyTypeIdProviders;
    type Keys = SessionKeys;
    type WeightInfo = pallet_session::weights::SubstrateWeight<Runtime>;
}
impl pallet_session::historical::Config for Runtime {
    type FullIdentification = pallet_staking::Exposure<AccountId, Balance>;
    type FullIdentificationOf = pallet_staking::ExposureOf<Runtime>;
}
const REWARD_CURVE: PiecewiseLinear<'static> =
    {
        extern crate sp_runtime as _sp_runtime;
        _sp_runtime::curve::PiecewiseLinear::<'static> {
            points: &[(_sp_runtime::Perbill::from_parts(0u32),
                            _sp_runtime::Perbill::from_parts(25000000u32)),
                        (_sp_runtime::Perbill::from_parts(500000000u32),
                            _sp_runtime::Perbill::from_parts(100000000u32)),
                        (_sp_runtime::Perbill::from_parts(514743000u32),
                            _sp_runtime::Perbill::from_parts(86136000u32)),
                        (_sp_runtime::Perbill::from_parts(529486000u32),
                            _sp_runtime::Perbill::from_parts(74835000u32)),
                        (_sp_runtime::Perbill::from_parts(544229000u32),
                            _sp_runtime::Perbill::from_parts(65623000u32)),
                        (_sp_runtime::Perbill::from_parts(558972000u32),
                            _sp_runtime::Perbill::from_parts(58114000u32)),
                        (_sp_runtime::Perbill::from_parts(573715000u32),
                            _sp_runtime::Perbill::from_parts(51993000u32)),
                        (_sp_runtime::Perbill::from_parts(588456000u32),
                            _sp_runtime::Perbill::from_parts(47004000u32)),
                        (_sp_runtime::Perbill::from_parts(603197000u32),
                            _sp_runtime::Perbill::from_parts(42937000u32)),
                        (_sp_runtime::Perbill::from_parts(617937000u32),
                            _sp_runtime::Perbill::from_parts(39622000u32)),
                        (_sp_runtime::Perbill::from_parts(632675000u32),
                            _sp_runtime::Perbill::from_parts(36920000u32)),
                        (_sp_runtime::Perbill::from_parts(647415000u32),
                            _sp_runtime::Perbill::from_parts(34717000u32)),
                        (_sp_runtime::Perbill::from_parts(662156000u32),
                            _sp_runtime::Perbill::from_parts(32921000u32)),
                        (_sp_runtime::Perbill::from_parts(676897000u32),
                            _sp_runtime::Perbill::from_parts(31457000u32)),
                        (_sp_runtime::Perbill::from_parts(691632000u32),
                            _sp_runtime::Perbill::from_parts(30264000u32)),
                        (_sp_runtime::Perbill::from_parts(706375000u32),
                            _sp_runtime::Perbill::from_parts(29291000u32)),
                        (_sp_runtime::Perbill::from_parts(721114000u32),
                            _sp_runtime::Perbill::from_parts(28498000u32)),
                        (_sp_runtime::Perbill::from_parts(735842000u32),
                            _sp_runtime::Perbill::from_parts(27852000u32)),
                        (_sp_runtime::Perbill::from_parts(750579000u32),
                            _sp_runtime::Perbill::from_parts(27325000u32)),
                        (_sp_runtime::Perbill::from_parts(765292000u32),
                            _sp_runtime::Perbill::from_parts(26896000u32)),
                        (_sp_runtime::Perbill::from_parts(780013000u32),
                            _sp_runtime::Perbill::from_parts(26546000u32)),
                        (_sp_runtime::Perbill::from_parts(794712000u32),
                            _sp_runtime::Perbill::from_parts(26261000u32)),
                        (_sp_runtime::Perbill::from_parts(809448000u32),
                            _sp_runtime::Perbill::from_parts(26028000u32)),
                        (_sp_runtime::Perbill::from_parts(824189000u32),
                            _sp_runtime::Perbill::from_parts(25838000u32)),
                        (_sp_runtime::Perbill::from_parts(838837000u32),
                            _sp_runtime::Perbill::from_parts(25684000u32)),
                        (_sp_runtime::Perbill::from_parts(853524000u32),
                            _sp_runtime::Perbill::from_parts(25558000u32)),
                        (_sp_runtime::Perbill::from_parts(868243000u32),
                            _sp_runtime::Perbill::from_parts(25455000u32)),
                        (_sp_runtime::Perbill::from_parts(882966000u32),
                            _sp_runtime::Perbill::from_parts(25371000u32)),
                        (_sp_runtime::Perbill::from_parts(897571000u32),
                            _sp_runtime::Perbill::from_parts(25303000u32)),
                        (_sp_runtime::Perbill::from_parts(912311000u32),
                            _sp_runtime::Perbill::from_parts(25247000u32)),
                        (_sp_runtime::Perbill::from_parts(926819000u32),
                            _sp_runtime::Perbill::from_parts(25202000u32)),
                        (_sp_runtime::Perbill::from_parts(941413000u32),
                            _sp_runtime::Perbill::from_parts(25165000u32)),
                        (_sp_runtime::Perbill::from_parts(955889000u32),
                            _sp_runtime::Perbill::from_parts(25135000u32)),
                        (_sp_runtime::Perbill::from_parts(970009000u32),
                            _sp_runtime::Perbill::from_parts(25111000u32)),
                        (_sp_runtime::Perbill::from_parts(984340000u32),
                            _sp_runtime::Perbill::from_parts(25091000u32)),
                        (_sp_runtime::Perbill::from_parts(998289000u32),
                            _sp_runtime::Perbill::from_parts(25075000u32)),
                        (_sp_runtime::Perbill::from_parts(1000000000u32),
                            _sp_runtime::Perbill::from_parts(25073000u32))],
            maximum: _sp_runtime::Perbill::from_parts(100000000u32),
        }
    };
pub struct SessionsPerEra;
impl SessionsPerEra<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> sp_staking::SessionIndex { 6 }
}
impl<_I: From<sp_staking::SessionIndex>> ::frame_support::traits::Get<_I> for
    SessionsPerEra<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SessionsPerEra<> {
    type Type = sp_staking::SessionIndex;
    fn get() -> sp_staking::SessionIndex { Self::get() }
}
pub struct BondingDuration;
impl BondingDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> sp_staking::EraIndex { 24 * 28 }
}
impl<_I: From<sp_staking::EraIndex>> ::frame_support::traits::Get<_I> for
    BondingDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BondingDuration<> {
    type Type = sp_staking::EraIndex;
    fn get() -> sp_staking::EraIndex { Self::get() }
}
pub struct SlashDeferDuration;
impl SlashDeferDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> sp_staking::EraIndex { 24 * 7 }
}
impl<_I: From<sp_staking::EraIndex>> ::frame_support::traits::Get<_I> for
    SlashDeferDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SlashDeferDuration<> {
    type Type = sp_staking::EraIndex;
    fn get() -> sp_staking::EraIndex { Self::get() }
}
pub struct RewardCurve;
impl RewardCurve<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> &'static PiecewiseLinear<'static> { &REWARD_CURVE }
}
impl<_I: From<&'static PiecewiseLinear<'static>>>
    ::frame_support::traits::Get<_I> for RewardCurve<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for RewardCurve<> {
    type Type = &'static PiecewiseLinear<'static>;
    fn get() -> &'static PiecewiseLinear<'static> { Self::get() }
}
pub struct MaxNominatorRewardedPerValidator;
impl MaxNominatorRewardedPerValidator<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 256 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MaxNominatorRewardedPerValidator<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxNominatorRewardedPerValidator<>
    {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct OffendingValidatorsThreshold;
impl OffendingValidatorsThreshold<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Perbill { Perbill::from_percent(17) }
}
impl<_I: From<Perbill>> ::frame_support::traits::Get<_I> for
    OffendingValidatorsThreshold<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for OffendingValidatorsThreshold<> {
    type Type = Perbill;
    fn get() -> Perbill { Self::get() }
}
pub struct OffchainRepeat;
impl OffchainRepeat<> {
    /// Returns the value of this parameter type.
    pub fn get() -> BlockNumber { 5 }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    OffchainRepeat<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for OffchainRepeat<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct HistoryDepth;
impl HistoryDepth<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 { 84 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for HistoryDepth<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for HistoryDepth<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct StakingBenchmarkingConfig;
impl pallet_staking::BenchmarkingConfig for StakingBenchmarkingConfig {
    type MaxNominators = ConstU32<1000>;
    type MaxValidators = ConstU32<1000>;
}
impl pallet_staking::Config for Runtime {
    type MaxNominations = MaxNominations;
    type Currency = Balances;
    type CurrencyBalance = Balance;
    type UnixTime = Timestamp;
    type CurrencyToVote = U128CurrencyToVote;
    type RewardRemainder = Treasury;
    type RuntimeEvent = RuntimeEvent;
    type Slash = Treasury;
    type Reward = ();
    type SessionsPerEra = SessionsPerEra;
    type BondingDuration = BondingDuration;
    type SlashDeferDuration = SlashDeferDuration;
    /// A super-majority of the council can cancel the slash.
    type AdminOrigin =
        EitherOfDiverse<EnsureRoot<AccountId>,
        pallet_collective::EnsureProportionAtLeast<AccountId,
        CouncilCollective, 3, 4>>;
    type SessionInterface = Self;
    type EraPayout = pallet_staking::ConvertCurve<RewardCurve>;
    type NextNewSession = Session;
    type MaxNominatorRewardedPerValidator = MaxNominatorRewardedPerValidator;
    type OffendingValidatorsThreshold = OffendingValidatorsThreshold;
    type ElectionProvider = ElectionProviderMultiPhase;
    type GenesisElectionProvider =
        onchain::OnChainExecution<OnChainSeqPhragmen>;
    type VoterList = VoterList;
    type TargetList = pallet_staking::UseValidatorsMap<Self>;
    type MaxUnlockingChunks = ConstU32<32>;
    type HistoryDepth = HistoryDepth;
    type OnStakerSlash = NominationPools;
    type WeightInfo = pallet_staking::weights::SubstrateWeight<Runtime>;
    type BenchmarkingConfig = StakingBenchmarkingConfig;
}
impl pallet_fast_unstake::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type ControlOrigin = frame_system::EnsureRoot<AccountId>;
    type BatchSize = ConstU32<64>;
    type Deposit = ConstU128<{ DOLLARS }>;
    type Currency = Balances;
    type Staking = Staking;
    type MaxErasToCheckPerBlock = ConstU32<1>;
    type WeightInfo = ();
}
pub struct SignedPhase;
impl SignedPhase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { EPOCH_DURATION_IN_BLOCKS / 4 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for SignedPhase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SignedPhase<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct UnsignedPhase;
impl UnsignedPhase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { EPOCH_DURATION_IN_BLOCKS / 4 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for UnsignedPhase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for UnsignedPhase<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct SignedRewardBase;
impl SignedRewardBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    SignedRewardBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SignedRewardBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct SignedDepositBase;
impl SignedDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    SignedDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SignedDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct SignedDepositByte;
impl SignedDepositByte<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * CENTS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    SignedDepositByte<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SignedDepositByte<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct BetterUnsignedThreshold;
impl BetterUnsignedThreshold<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Perbill { Perbill::from_rational(1u32, 10_000) }
}
impl<_I: From<Perbill>> ::frame_support::traits::Get<_I> for
    BetterUnsignedThreshold<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BetterUnsignedThreshold<> {
    type Type = Perbill;
    fn get() -> Perbill { Self::get() }
}
pub struct MultiPhaseUnsignedPriority;
impl MultiPhaseUnsignedPriority<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> TransactionPriority {
        StakingUnsignedPriority::get() - 1u64
    }
}
impl<_I: From<TransactionPriority>> ::frame_support::traits::Get<_I> for
    MultiPhaseUnsignedPriority<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MultiPhaseUnsignedPriority<> {
    type Type = TransactionPriority;
    fn get() -> TransactionPriority { Self::get() }
}
pub struct MinerMaxWeight;
impl MinerMaxWeight<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Weight {
        RuntimeBlockWeights::get().get(DispatchClass::Normal).max_extrinsic.expect("Normal extrinsics have a weight limit configured; qed").saturating_sub(BlockExecutionWeight::get())
    }
}
impl<_I: From<Weight>> ::frame_support::traits::Get<_I> for MinerMaxWeight<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinerMaxWeight<> {
    type Type = Weight;
    fn get() -> Weight { Self::get() }
}
pub struct MinerMaxLength;
impl MinerMaxLength<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 {
        Perbill::from_rational(9u32, 10) *
            *RuntimeBlockLength::get().max.get(DispatchClass::Normal)
    }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MinerMaxLength<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinerMaxLength<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
extern crate frame_election_provider_support as _feps;
#[doc = r" A struct to encode a election assignment in a compact way."]
impl _feps::codec::Encode for NposSolution16 {
    fn encode(&self) -> _feps::sp_std::prelude::Vec<u8> {
        let mut r = ::alloc::vec::Vec::new();
        let votes1 =
            self.votes1.iter().map(|(v, t)|
                        (_feps::codec::Compact(v.clone()),
                            _feps::codec::Compact(t.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes1.encode_to(&mut r);
        let votes2 =
            self.votes2.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes2.encode_to(&mut r);
        let votes3 =
            self.votes3.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes3.encode_to(&mut r);
        let votes4 =
            self.votes4.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes4.encode_to(&mut r);
        let votes5 =
            self.votes5.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes5.encode_to(&mut r);
        let votes6 =
            self.votes6.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes6.encode_to(&mut r);
        let votes7 =
            self.votes7.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes7.encode_to(&mut r);
        let votes8 =
            self.votes8.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone())),
                                    (_feps::codec::Compact(inner[6usize].0.clone()),
                                        _feps::codec::Compact(inner[6usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes8.encode_to(&mut r);
        let votes9 =
            self.votes9.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone())),
                                    (_feps::codec::Compact(inner[6usize].0.clone()),
                                        _feps::codec::Compact(inner[6usize].1.clone())),
                                    (_feps::codec::Compact(inner[7usize].0.clone()),
                                        _feps::codec::Compact(inner[7usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes9.encode_to(&mut r);
        let votes10 =
            self.votes10.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone())),
                                    (_feps::codec::Compact(inner[6usize].0.clone()),
                                        _feps::codec::Compact(inner[6usize].1.clone())),
                                    (_feps::codec::Compact(inner[7usize].0.clone()),
                                        _feps::codec::Compact(inner[7usize].1.clone())),
                                    (_feps::codec::Compact(inner[8usize].0.clone()),
                                        _feps::codec::Compact(inner[8usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes10.encode_to(&mut r);
        let votes11 =
            self.votes11.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone())),
                                    (_feps::codec::Compact(inner[6usize].0.clone()),
                                        _feps::codec::Compact(inner[6usize].1.clone())),
                                    (_feps::codec::Compact(inner[7usize].0.clone()),
                                        _feps::codec::Compact(inner[7usize].1.clone())),
                                    (_feps::codec::Compact(inner[8usize].0.clone()),
                                        _feps::codec::Compact(inner[8usize].1.clone())),
                                    (_feps::codec::Compact(inner[9usize].0.clone()),
                                        _feps::codec::Compact(inner[9usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes11.encode_to(&mut r);
        let votes12 =
            self.votes12.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone())),
                                    (_feps::codec::Compact(inner[6usize].0.clone()),
                                        _feps::codec::Compact(inner[6usize].1.clone())),
                                    (_feps::codec::Compact(inner[7usize].0.clone()),
                                        _feps::codec::Compact(inner[7usize].1.clone())),
                                    (_feps::codec::Compact(inner[8usize].0.clone()),
                                        _feps::codec::Compact(inner[8usize].1.clone())),
                                    (_feps::codec::Compact(inner[9usize].0.clone()),
                                        _feps::codec::Compact(inner[9usize].1.clone())),
                                    (_feps::codec::Compact(inner[10usize].0.clone()),
                                        _feps::codec::Compact(inner[10usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes12.encode_to(&mut r);
        let votes13 =
            self.votes13.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone())),
                                    (_feps::codec::Compact(inner[6usize].0.clone()),
                                        _feps::codec::Compact(inner[6usize].1.clone())),
                                    (_feps::codec::Compact(inner[7usize].0.clone()),
                                        _feps::codec::Compact(inner[7usize].1.clone())),
                                    (_feps::codec::Compact(inner[8usize].0.clone()),
                                        _feps::codec::Compact(inner[8usize].1.clone())),
                                    (_feps::codec::Compact(inner[9usize].0.clone()),
                                        _feps::codec::Compact(inner[9usize].1.clone())),
                                    (_feps::codec::Compact(inner[10usize].0.clone()),
                                        _feps::codec::Compact(inner[10usize].1.clone())),
                                    (_feps::codec::Compact(inner[11usize].0.clone()),
                                        _feps::codec::Compact(inner[11usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes13.encode_to(&mut r);
        let votes14 =
            self.votes14.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone())),
                                    (_feps::codec::Compact(inner[6usize].0.clone()),
                                        _feps::codec::Compact(inner[6usize].1.clone())),
                                    (_feps::codec::Compact(inner[7usize].0.clone()),
                                        _feps::codec::Compact(inner[7usize].1.clone())),
                                    (_feps::codec::Compact(inner[8usize].0.clone()),
                                        _feps::codec::Compact(inner[8usize].1.clone())),
                                    (_feps::codec::Compact(inner[9usize].0.clone()),
                                        _feps::codec::Compact(inner[9usize].1.clone())),
                                    (_feps::codec::Compact(inner[10usize].0.clone()),
                                        _feps::codec::Compact(inner[10usize].1.clone())),
                                    (_feps::codec::Compact(inner[11usize].0.clone()),
                                        _feps::codec::Compact(inner[11usize].1.clone())),
                                    (_feps::codec::Compact(inner[12usize].0.clone()),
                                        _feps::codec::Compact(inner[12usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes14.encode_to(&mut r);
        let votes15 =
            self.votes15.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone())),
                                    (_feps::codec::Compact(inner[6usize].0.clone()),
                                        _feps::codec::Compact(inner[6usize].1.clone())),
                                    (_feps::codec::Compact(inner[7usize].0.clone()),
                                        _feps::codec::Compact(inner[7usize].1.clone())),
                                    (_feps::codec::Compact(inner[8usize].0.clone()),
                                        _feps::codec::Compact(inner[8usize].1.clone())),
                                    (_feps::codec::Compact(inner[9usize].0.clone()),
                                        _feps::codec::Compact(inner[9usize].1.clone())),
                                    (_feps::codec::Compact(inner[10usize].0.clone()),
                                        _feps::codec::Compact(inner[10usize].1.clone())),
                                    (_feps::codec::Compact(inner[11usize].0.clone()),
                                        _feps::codec::Compact(inner[11usize].1.clone())),
                                    (_feps::codec::Compact(inner[12usize].0.clone()),
                                        _feps::codec::Compact(inner[12usize].1.clone())),
                                    (_feps::codec::Compact(inner[13usize].0.clone()),
                                        _feps::codec::Compact(inner[13usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes15.encode_to(&mut r);
        let votes16 =
            self.votes16.iter().map(|(v, inner, t_last)|
                        (_feps::codec::Compact(v.clone()),
                            [(_feps::codec::Compact(inner[0usize].0.clone()),
                                        _feps::codec::Compact(inner[0usize].1.clone())),
                                    (_feps::codec::Compact(inner[1usize].0.clone()),
                                        _feps::codec::Compact(inner[1usize].1.clone())),
                                    (_feps::codec::Compact(inner[2usize].0.clone()),
                                        _feps::codec::Compact(inner[2usize].1.clone())),
                                    (_feps::codec::Compact(inner[3usize].0.clone()),
                                        _feps::codec::Compact(inner[3usize].1.clone())),
                                    (_feps::codec::Compact(inner[4usize].0.clone()),
                                        _feps::codec::Compact(inner[4usize].1.clone())),
                                    (_feps::codec::Compact(inner[5usize].0.clone()),
                                        _feps::codec::Compact(inner[5usize].1.clone())),
                                    (_feps::codec::Compact(inner[6usize].0.clone()),
                                        _feps::codec::Compact(inner[6usize].1.clone())),
                                    (_feps::codec::Compact(inner[7usize].0.clone()),
                                        _feps::codec::Compact(inner[7usize].1.clone())),
                                    (_feps::codec::Compact(inner[8usize].0.clone()),
                                        _feps::codec::Compact(inner[8usize].1.clone())),
                                    (_feps::codec::Compact(inner[9usize].0.clone()),
                                        _feps::codec::Compact(inner[9usize].1.clone())),
                                    (_feps::codec::Compact(inner[10usize].0.clone()),
                                        _feps::codec::Compact(inner[10usize].1.clone())),
                                    (_feps::codec::Compact(inner[11usize].0.clone()),
                                        _feps::codec::Compact(inner[11usize].1.clone())),
                                    (_feps::codec::Compact(inner[12usize].0.clone()),
                                        _feps::codec::Compact(inner[12usize].1.clone())),
                                    (_feps::codec::Compact(inner[13usize].0.clone()),
                                        _feps::codec::Compact(inner[13usize].1.clone())),
                                    (_feps::codec::Compact(inner[14usize].0.clone()),
                                        _feps::codec::Compact(inner[14usize].1.clone()))],
                            _feps::codec::Compact(t_last.clone()))).collect::<_feps::sp_std::prelude::Vec<_>>();
        votes16.encode_to(&mut r);
        r
    }
}
impl _feps::codec::Decode for NposSolution16 {
    fn decode<I: _feps::codec::Input>(value: &mut I)
        -> Result<Self, _feps::codec::Error> {
        let votes1 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes1 =
            votes1.into_iter().map(|(v, t)|
                        (v.0, t.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes2 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 2usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes2 =
            votes2.into_iter().map(|(v, inner, t_last)|
                        (v.0, [((inner[0usize].0).0, (inner[0usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes3 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 3usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes3 =
            votes3.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes4 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 4usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes4 =
            votes4.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes5 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 5usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes5 =
            votes5.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes6 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 6usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes6 =
            votes6.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes7 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 7usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes7 =
            votes7.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes8 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 8usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes8 =
            votes8.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes9 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 9usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes9 =
            votes9.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes10 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 10usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes10 =
            votes10.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes11 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 11usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes11 =
            votes11.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes12 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 12usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes12 =
            votes12.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes13 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 13usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes13 =
            votes13.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0),
                                    ((inner[11usize].0).0, (inner[11usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes14 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 14usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes14 =
            votes14.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0),
                                    ((inner[11usize].0).0, (inner[11usize].1).0),
                                    ((inner[12usize].0).0, (inner[12usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes15 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 15usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes15 =
            votes15.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0),
                                    ((inner[11usize].0).0, (inner[11usize].1).0),
                                    ((inner[12usize].0).0, (inner[12usize].1).0),
                                    ((inner[13usize].0).0, (inner[13usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        let votes16 =
            <_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                        [(_feps::codec::Compact<u16>,
                        _feps::codec::Compact<sp_runtime::PerU16>); 16usize - 1],
                        _feps::codec::Compact<u16>)> as
                        _feps::codec::Decode>::decode(value)?;
        let votes16 =
            votes16.into_iter().map(|(v, inner, t_last)|
                        (v.0,
                            [((inner[0usize].0).0, (inner[0usize].1).0),
                                    ((inner[1usize].0).0, (inner[1usize].1).0),
                                    ((inner[2usize].0).0, (inner[2usize].1).0),
                                    ((inner[3usize].0).0, (inner[3usize].1).0),
                                    ((inner[4usize].0).0, (inner[4usize].1).0),
                                    ((inner[5usize].0).0, (inner[5usize].1).0),
                                    ((inner[6usize].0).0, (inner[6usize].1).0),
                                    ((inner[7usize].0).0, (inner[7usize].1).0),
                                    ((inner[8usize].0).0, (inner[8usize].1).0),
                                    ((inner[9usize].0).0, (inner[9usize].1).0),
                                    ((inner[10usize].0).0, (inner[10usize].1).0),
                                    ((inner[11usize].0).0, (inner[11usize].1).0),
                                    ((inner[12usize].0).0, (inner[12usize].1).0),
                                    ((inner[13usize].0).0, (inner[13usize].1).0),
                                    ((inner[14usize].0).0, (inner[14usize].1).0)],
                            t_last.0)).collect::<_feps::sp_std::prelude::Vec<_>>();
        Ok(NposSolution16 {
                votes1,
                votes2,
                votes3,
                votes4,
                votes5,
                votes6,
                votes7,
                votes8,
                votes9,
                votes10,
                votes11,
                votes12,
                votes13,
                votes14,
                votes15,
                votes16,
            })
    }
}
impl _feps::scale_info::TypeInfo for NposSolution16 {
    type Identity = Self;
    fn type_info()
        -> _feps::scale_info::Type<_feps::scale_info::form::MetaForm> {
        _feps::scale_info::Type::builder().path(_feps::scale_info::Path::new("NposSolution16",
                    "kitchensink_runtime")).composite(_feps::scale_info::build::Fields::named().field(|f|
                                                                                f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                                                        _feps::codec::Compact<u16>)>>().name("votes1")).field(|f|
                                                                            f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                                                    (_feps::codec::Compact<u16>,
                                                                                    _feps::codec::Compact<sp_runtime::PerU16>),
                                                                                    _feps::codec::Compact<u16>)>>().name("votes2")).field(|f|
                                                                        f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                                                [(_feps::codec::Compact<u16>,
                                                                                _feps::codec::Compact<sp_runtime::PerU16>); 3usize - 1],
                                                                                _feps::codec::Compact<u16>)>>().name("votes3")).field(|f|
                                                                    f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                                            [(_feps::codec::Compact<u16>,
                                                                            _feps::codec::Compact<sp_runtime::PerU16>); 4usize - 1],
                                                                            _feps::codec::Compact<u16>)>>().name("votes4")).field(|f|
                                                                f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                                        [(_feps::codec::Compact<u16>,
                                                                        _feps::codec::Compact<sp_runtime::PerU16>); 5usize - 1],
                                                                        _feps::codec::Compact<u16>)>>().name("votes5")).field(|f|
                                                            f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                                    [(_feps::codec::Compact<u16>,
                                                                    _feps::codec::Compact<sp_runtime::PerU16>); 6usize - 1],
                                                                    _feps::codec::Compact<u16>)>>().name("votes6")).field(|f|
                                                        f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                                [(_feps::codec::Compact<u16>,
                                                                _feps::codec::Compact<sp_runtime::PerU16>); 7usize - 1],
                                                                _feps::codec::Compact<u16>)>>().name("votes7")).field(|f|
                                                    f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                            [(_feps::codec::Compact<u16>,
                                                            _feps::codec::Compact<sp_runtime::PerU16>); 8usize - 1],
                                                            _feps::codec::Compact<u16>)>>().name("votes8")).field(|f|
                                                f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                        [(_feps::codec::Compact<u16>,
                                                        _feps::codec::Compact<sp_runtime::PerU16>); 9usize - 1],
                                                        _feps::codec::Compact<u16>)>>().name("votes9")).field(|f|
                                            f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                    [(_feps::codec::Compact<u16>,
                                                    _feps::codec::Compact<sp_runtime::PerU16>); 10usize - 1],
                                                    _feps::codec::Compact<u16>)>>().name("votes10")).field(|f|
                                        f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                                [(_feps::codec::Compact<u16>,
                                                _feps::codec::Compact<sp_runtime::PerU16>); 11usize - 1],
                                                _feps::codec::Compact<u16>)>>().name("votes11")).field(|f|
                                    f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                            [(_feps::codec::Compact<u16>,
                                            _feps::codec::Compact<sp_runtime::PerU16>); 12usize - 1],
                                            _feps::codec::Compact<u16>)>>().name("votes12")).field(|f|
                                f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                        [(_feps::codec::Compact<u16>,
                                        _feps::codec::Compact<sp_runtime::PerU16>); 13usize - 1],
                                        _feps::codec::Compact<u16>)>>().name("votes13")).field(|f|
                            f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                    [(_feps::codec::Compact<u16>,
                                    _feps::codec::Compact<sp_runtime::PerU16>); 14usize - 1],
                                    _feps::codec::Compact<u16>)>>().name("votes14")).field(|f|
                        f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                                [(_feps::codec::Compact<u16>,
                                _feps::codec::Compact<sp_runtime::PerU16>); 15usize - 1],
                                _feps::codec::Compact<u16>)>>().name("votes15")).field(|f|
                    f.ty::<_feps::sp_std::prelude::Vec<(_feps::codec::Compact<u32>,
                            [(_feps::codec::Compact<u16>,
                            _feps::codec::Compact<sp_runtime::PerU16>); 16usize - 1],
                            _feps::codec::Compact<u16>)>>().name("votes16")))
    }
}
pub struct NposSolution16 {
    pub votes1: _feps::sp_std::prelude::Vec<(u32, u16)>,
    pub votes2: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 1usize], u16)>,
    pub votes3: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 2usize], u16)>,
    pub votes4: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 3usize], u16)>,
    pub votes5: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 4usize], u16)>,
    pub votes6: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 5usize], u16)>,
    pub votes7: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 6usize], u16)>,
    pub votes8: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 7usize], u16)>,
    pub votes9: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 8usize], u16)>,
    pub votes10: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 9usize], u16)>,
    pub votes11: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 10usize], u16)>,
    pub votes12: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 11usize], u16)>,
    pub votes13: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 12usize], u16)>,
    pub votes14: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 13usize], u16)>,
    pub votes15: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 14usize], u16)>,
    pub votes16: _feps::sp_std::prelude::Vec<(u32,
    [(u16, sp_runtime::PerU16); 15usize], u16)>,
}
#[automatically_derived]
impl ::core::default::Default for NposSolution16 {
    #[inline]
    fn default() -> NposSolution16 {
        NposSolution16 {
            votes1: ::core::default::Default::default(),
            votes2: ::core::default::Default::default(),
            votes3: ::core::default::Default::default(),
            votes4: ::core::default::Default::default(),
            votes5: ::core::default::Default::default(),
            votes6: ::core::default::Default::default(),
            votes7: ::core::default::Default::default(),
            votes8: ::core::default::Default::default(),
            votes9: ::core::default::Default::default(),
            votes10: ::core::default::Default::default(),
            votes11: ::core::default::Default::default(),
            votes12: ::core::default::Default::default(),
            votes13: ::core::default::Default::default(),
            votes14: ::core::default::Default::default(),
            votes15: ::core::default::Default::default(),
            votes16: ::core::default::Default::default(),
        }
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for NposSolution16 { }
#[automatically_derived]
impl ::core::cmp::PartialEq for NposSolution16 {
    #[inline]
    fn eq(&self, other: &NposSolution16) -> bool {
        self.votes1 == other.votes1 && self.votes2 == other.votes2 &&
                                                                self.votes3 == other.votes3 && self.votes4 == other.votes4
                                                        && self.votes5 == other.votes5 &&
                                                    self.votes6 == other.votes6 && self.votes7 == other.votes7
                                            && self.votes8 == other.votes8 &&
                                        self.votes9 == other.votes9 && self.votes10 == other.votes10
                                && self.votes11 == other.votes11 &&
                            self.votes12 == other.votes12 &&
                        self.votes13 == other.votes13 &&
                    self.votes14 == other.votes14 &&
                self.votes15 == other.votes15 && self.votes16 == other.votes16
    }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for NposSolution16 { }
#[automatically_derived]
impl ::core::cmp::Eq for NposSolution16 {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 1usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 2usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 3usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 4usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 5usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 6usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 7usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 8usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 9usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 10usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 11usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 12usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 13usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 14usize], u16)>>;
        let _:
                ::core::cmp::AssertParamIsEq<_feps::sp_std::prelude::Vec<(u32,
                [(u16, sp_runtime::PerU16); 15usize], u16)>>;
    }
}
#[automatically_derived]
impl ::core::clone::Clone for NposSolution16 {
    #[inline]
    fn clone(&self) -> NposSolution16 {
        NposSolution16 {
            votes1: ::core::clone::Clone::clone(&self.votes1),
            votes2: ::core::clone::Clone::clone(&self.votes2),
            votes3: ::core::clone::Clone::clone(&self.votes3),
            votes4: ::core::clone::Clone::clone(&self.votes4),
            votes5: ::core::clone::Clone::clone(&self.votes5),
            votes6: ::core::clone::Clone::clone(&self.votes6),
            votes7: ::core::clone::Clone::clone(&self.votes7),
            votes8: ::core::clone::Clone::clone(&self.votes8),
            votes9: ::core::clone::Clone::clone(&self.votes9),
            votes10: ::core::clone::Clone::clone(&self.votes10),
            votes11: ::core::clone::Clone::clone(&self.votes11),
            votes12: ::core::clone::Clone::clone(&self.votes12),
            votes13: ::core::clone::Clone::clone(&self.votes13),
            votes14: ::core::clone::Clone::clone(&self.votes14),
            votes15: ::core::clone::Clone::clone(&self.votes15),
            votes16: ::core::clone::Clone::clone(&self.votes16),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for NposSolution16 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ =
            &["votes1", "votes2", "votes3", "votes4", "votes5", "votes6",
                        "votes7", "votes8", "votes9", "votes10", "votes11",
                        "votes12", "votes13", "votes14", "votes15", "votes16"];
        let values: &[&dyn ::core::fmt::Debug] =
            &[&&self.votes1, &&self.votes2, &&self.votes3, &&self.votes4,
                        &&self.votes5, &&self.votes6, &&self.votes7, &&self.votes8,
                        &&self.votes9, &&self.votes10, &&self.votes11,
                        &&self.votes12, &&self.votes13, &&self.votes14,
                        &&self.votes15, &&self.votes16];
        ::core::fmt::Formatter::debug_struct_fields_finish(f,
            "NposSolution16", names, values)
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for NposSolution16 {
    #[inline]
    fn partial_cmp(&self, other: &NposSolution16)
        -> ::core::option::Option<::core::cmp::Ordering> {
        match ::core::cmp::PartialOrd::partial_cmp(&self.votes1,
                &other.votes1) {
            ::core::option::Option::Some(::core::cmp::Ordering::Equal) =>
                match ::core::cmp::PartialOrd::partial_cmp(&self.votes2,
                        &other.votes2) {
                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                        =>
                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes3,
                                &other.votes3) {
                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                =>
                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes4,
                                        &other.votes4) {
                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                        =>
                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes5,
                                                &other.votes5) {
                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                =>
                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes6,
                                                        &other.votes6) {
                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                        =>
                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes7,
                                                                &other.votes7) {
                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                =>
                                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes8,
                                                                        &other.votes8) {
                                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                        =>
                                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes9,
                                                                                &other.votes9) {
                                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                =>
                                                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes10,
                                                                                        &other.votes10) {
                                                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                        =>
                                                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes11,
                                                                                                &other.votes11) {
                                                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                =>
                                                                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes12,
                                                                                                        &other.votes12) {
                                                                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                        =>
                                                                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes13,
                                                                                                                &other.votes13) {
                                                                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                                =>
                                                                                                                match ::core::cmp::PartialOrd::partial_cmp(&self.votes14,
                                                                                                                        &other.votes14) {
                                                                                                                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                                        =>
                                                                                                                        match ::core::cmp::PartialOrd::partial_cmp(&self.votes15,
                                                                                                                                &other.votes15) {
                                                                                                                            ::core::option::Option::Some(::core::cmp::Ordering::Equal)
                                                                                                                                =>
                                                                                                                                ::core::cmp::PartialOrd::partial_cmp(&self.votes16,
                                                                                                                                    &other.votes16),
                                                                                                                            cmp => cmp,
                                                                                                                        },
                                                                                                                    cmp => cmp,
                                                                                                                },
                                                                                                            cmp => cmp,
                                                                                                        },
                                                                                                    cmp => cmp,
                                                                                                },
                                                                                            cmp => cmp,
                                                                                        },
                                                                                    cmp => cmp,
                                                                                },
                                                                            cmp => cmp,
                                                                        },
                                                                    cmp => cmp,
                                                                },
                                                            cmp => cmp,
                                                        },
                                                    cmp => cmp,
                                                },
                                            cmp => cmp,
                                        },
                                    cmp => cmp,
                                },
                            cmp => cmp,
                        },
                    cmp => cmp,
                },
            cmp => cmp,
        }
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for NposSolution16 {
    #[inline]
    fn cmp(&self, other: &NposSolution16) -> ::core::cmp::Ordering {
        match ::core::cmp::Ord::cmp(&self.votes1, &other.votes1) {
            ::core::cmp::Ordering::Equal =>
                match ::core::cmp::Ord::cmp(&self.votes2, &other.votes2) {
                    ::core::cmp::Ordering::Equal =>
                        match ::core::cmp::Ord::cmp(&self.votes3, &other.votes3) {
                            ::core::cmp::Ordering::Equal =>
                                match ::core::cmp::Ord::cmp(&self.votes4, &other.votes4) {
                                    ::core::cmp::Ordering::Equal =>
                                        match ::core::cmp::Ord::cmp(&self.votes5, &other.votes5) {
                                            ::core::cmp::Ordering::Equal =>
                                                match ::core::cmp::Ord::cmp(&self.votes6, &other.votes6) {
                                                    ::core::cmp::Ordering::Equal =>
                                                        match ::core::cmp::Ord::cmp(&self.votes7, &other.votes7) {
                                                            ::core::cmp::Ordering::Equal =>
                                                                match ::core::cmp::Ord::cmp(&self.votes8, &other.votes8) {
                                                                    ::core::cmp::Ordering::Equal =>
                                                                        match ::core::cmp::Ord::cmp(&self.votes9, &other.votes9) {
                                                                            ::core::cmp::Ordering::Equal =>
                                                                                match ::core::cmp::Ord::cmp(&self.votes10, &other.votes10) {
                                                                                    ::core::cmp::Ordering::Equal =>
                                                                                        match ::core::cmp::Ord::cmp(&self.votes11, &other.votes11) {
                                                                                            ::core::cmp::Ordering::Equal =>
                                                                                                match ::core::cmp::Ord::cmp(&self.votes12, &other.votes12) {
                                                                                                    ::core::cmp::Ordering::Equal =>
                                                                                                        match ::core::cmp::Ord::cmp(&self.votes13, &other.votes13) {
                                                                                                            ::core::cmp::Ordering::Equal =>
                                                                                                                match ::core::cmp::Ord::cmp(&self.votes14, &other.votes14) {
                                                                                                                    ::core::cmp::Ordering::Equal =>
                                                                                                                        match ::core::cmp::Ord::cmp(&self.votes15, &other.votes15) {
                                                                                                                            ::core::cmp::Ordering::Equal =>
                                                                                                                                ::core::cmp::Ord::cmp(&self.votes16, &other.votes16),
                                                                                                                            cmp => cmp,
                                                                                                                        },
                                                                                                                    cmp => cmp,
                                                                                                                },
                                                                                                            cmp => cmp,
                                                                                                        },
                                                                                                    cmp => cmp,
                                                                                                },
                                                                                            cmp => cmp,
                                                                                        },
                                                                                    cmp => cmp,
                                                                                },
                                                                            cmp => cmp,
                                                                        },
                                                                    cmp => cmp,
                                                                },
                                                            cmp => cmp,
                                                        },
                                                    cmp => cmp,
                                                },
                                            cmp => cmp,
                                        },
                                    cmp => cmp,
                                },
                            cmp => cmp,
                        },
                    cmp => cmp,
                },
            cmp => cmp,
        }
    }
}
use _feps::__OrInvalidIndex;
impl _feps::NposSolution for NposSolution16 {
    const LIMIT: usize = 16usize;
    type VoterIndex = u32;
    type TargetIndex = u16;
    type Accuracy = sp_runtime::PerU16;
    fn remove_voter(&mut self, to_remove: Self::VoterIndex) -> bool {
        if let Some(idx) =
                    self.votes1.iter().position(|(x, _)| *x == to_remove) {
                self.votes1.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes2.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes2.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes3.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes3.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes4.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes4.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes5.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes5.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes6.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes6.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes7.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes7.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes8.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes8.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes9.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes9.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes10.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes10.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes11.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes11.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes12.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes12.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes13.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes13.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes14.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes14.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes15.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes15.remove(idx);
                return true
            }
        if let Some(idx) =
                    self.votes16.iter().position(|(x, _, _)| *x == to_remove) {
                self.votes16.remove(idx);
                return true
            }
        return false
    }
    fn from_assignment<FV, FT,
        A>(assignments: &[_feps::Assignment<A, sp_runtime::PerU16>],
        voter_index: FV, target_index: FT) -> Result<Self, _feps::Error> where
        A: _feps::IdentifierT, for<'r> FV: Fn(&'r A)
        -> Option<Self::VoterIndex>, for<'r> FT: Fn(&'r A)
        -> Option<Self::TargetIndex> {
        if assignments.len() as u32 >
                    <MaxElectingVoters as _feps::Get<u32>>::get() {
                return Err(_feps::Error::TooManyVoters);
            }
        let mut solution: NposSolution16 = Default::default();
        for _feps::Assignment { who, distribution } in assignments {
            match distribution.len() {
                0 => continue,
                1 =>
                    solution.votes1.push((voter_index(&who).or_invalid_index()?,
                            target_index(&distribution[0].0).or_invalid_index()?)),
                2usize =>
                    solution.votes2.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1)],
                            target_index(&distribution[1usize].0).or_invalid_index()?)),
                3usize =>
                    solution.votes3.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1)],
                            target_index(&distribution[2usize].0).or_invalid_index()?)),
                4usize =>
                    solution.votes4.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1)],
                            target_index(&distribution[3usize].0).or_invalid_index()?)),
                5usize =>
                    solution.votes5.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1)],
                            target_index(&distribution[4usize].0).or_invalid_index()?)),
                6usize =>
                    solution.votes6.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1)],
                            target_index(&distribution[5usize].0).or_invalid_index()?)),
                7usize =>
                    solution.votes7.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1)],
                            target_index(&distribution[6usize].0).or_invalid_index()?)),
                8usize =>
                    solution.votes8.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1)],
                            target_index(&distribution[7usize].0).or_invalid_index()?)),
                9usize =>
                    solution.votes9.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1)],
                            target_index(&distribution[8usize].0).or_invalid_index()?)),
                10usize =>
                    solution.votes10.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1)],
                            target_index(&distribution[9usize].0).or_invalid_index()?)),
                11usize =>
                    solution.votes11.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1)],
                            target_index(&distribution[10usize].0).or_invalid_index()?)),
                12usize =>
                    solution.votes12.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1)],
                            target_index(&distribution[11usize].0).or_invalid_index()?)),
                13usize =>
                    solution.votes13.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1),
                                    (target_index(&distribution[11usize].0).or_invalid_index()?,
                                        distribution[11usize].1)],
                            target_index(&distribution[12usize].0).or_invalid_index()?)),
                14usize =>
                    solution.votes14.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1),
                                    (target_index(&distribution[11usize].0).or_invalid_index()?,
                                        distribution[11usize].1),
                                    (target_index(&distribution[12usize].0).or_invalid_index()?,
                                        distribution[12usize].1)],
                            target_index(&distribution[13usize].0).or_invalid_index()?)),
                15usize =>
                    solution.votes15.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1),
                                    (target_index(&distribution[11usize].0).or_invalid_index()?,
                                        distribution[11usize].1),
                                    (target_index(&distribution[12usize].0).or_invalid_index()?,
                                        distribution[12usize].1),
                                    (target_index(&distribution[13usize].0).or_invalid_index()?,
                                        distribution[13usize].1)],
                            target_index(&distribution[14usize].0).or_invalid_index()?)),
                16usize =>
                    solution.votes16.push((voter_index(&who).or_invalid_index()?,
                            [(target_index(&distribution[0usize].0).or_invalid_index()?,
                                        distribution[0usize].1),
                                    (target_index(&distribution[1usize].0).or_invalid_index()?,
                                        distribution[1usize].1),
                                    (target_index(&distribution[2usize].0).or_invalid_index()?,
                                        distribution[2usize].1),
                                    (target_index(&distribution[3usize].0).or_invalid_index()?,
                                        distribution[3usize].1),
                                    (target_index(&distribution[4usize].0).or_invalid_index()?,
                                        distribution[4usize].1),
                                    (target_index(&distribution[5usize].0).or_invalid_index()?,
                                        distribution[5usize].1),
                                    (target_index(&distribution[6usize].0).or_invalid_index()?,
                                        distribution[6usize].1),
                                    (target_index(&distribution[7usize].0).or_invalid_index()?,
                                        distribution[7usize].1),
                                    (target_index(&distribution[8usize].0).or_invalid_index()?,
                                        distribution[8usize].1),
                                    (target_index(&distribution[9usize].0).or_invalid_index()?,
                                        distribution[9usize].1),
                                    (target_index(&distribution[10usize].0).or_invalid_index()?,
                                        distribution[10usize].1),
                                    (target_index(&distribution[11usize].0).or_invalid_index()?,
                                        distribution[11usize].1),
                                    (target_index(&distribution[12usize].0).or_invalid_index()?,
                                        distribution[12usize].1),
                                    (target_index(&distribution[13usize].0).or_invalid_index()?,
                                        distribution[13usize].1),
                                    (target_index(&distribution[14usize].0).or_invalid_index()?,
                                        distribution[14usize].1)],
                            target_index(&distribution[15usize].0).or_invalid_index()?)),
                _ => { return Err(_feps::Error::SolutionTargetOverflow); }
            }
        };
        Ok(solution)
    }
    fn into_assignment<A: _feps::IdentifierT>(self,
        voter_at: impl Fn(Self::VoterIndex) -> Option<A>,
        target_at: impl Fn(Self::TargetIndex) -> Option<A>)
        ->
            Result<_feps::sp_std::prelude::Vec<_feps::Assignment<A,
            sp_runtime::PerU16>>, _feps::Error> {
        let mut all_assignments:
                _feps::sp_std::prelude::Vec<_feps::Assignment<A,
                sp_runtime::PerU16>> = Default::default();
        for (voter_index, target_index) in self.votes1 {
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([(target_at(target_index).or_invalid_index()?,
                                        sp_runtime::PerU16::one())])),
                })
        }
        for (voter_index, inners, t_last_idx) in self.votes2 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes3 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes4 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes5 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes6 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes7 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes8 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes9 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes10 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes11 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes12 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes13 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes14 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes15 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        for (voter_index, inners, t_last_idx) in self.votes16 {
            let mut sum = sp_runtime::PerU16::zero();
            let mut inners_parsed =
                inners.iter().map(|(ref t_idx, p)|
                                {
                                    sum =
                                        _feps::sp_arithmetic::traits::Saturating::saturating_add(sum,
                                            *p);
                                    let target = target_at(*t_idx).or_invalid_index()?;
                                    Ok((target, *p))
                                }).collect::<Result<_feps::sp_std::prelude::Vec<(A,
                        sp_runtime::PerU16)>, _feps::Error>>()?;
            if sum >= sp_runtime::PerU16::one() {
                    return Err(_feps::Error::SolutionWeightOverflow);
                }
            let p_last =
                _feps::sp_arithmetic::traits::Saturating::saturating_sub(sp_runtime::PerU16::one(),
                    sum);
            inners_parsed.push((target_at(t_last_idx).or_invalid_index()?,
                    p_last));
            all_assignments.push(_feps::Assignment {
                    who: voter_at(voter_index).or_invalid_index()?,
                    distribution: inners_parsed,
                });
        }
        Ok(all_assignments)
    }
    fn voter_count(&self) -> usize {
        let mut all_len = 0usize;
        all_len = all_len.saturating_add(self.votes1.len());
        all_len = all_len.saturating_add(self.votes2.len());
        all_len = all_len.saturating_add(self.votes3.len());
        all_len = all_len.saturating_add(self.votes4.len());
        all_len = all_len.saturating_add(self.votes5.len());
        all_len = all_len.saturating_add(self.votes6.len());
        all_len = all_len.saturating_add(self.votes7.len());
        all_len = all_len.saturating_add(self.votes8.len());
        all_len = all_len.saturating_add(self.votes9.len());
        all_len = all_len.saturating_add(self.votes10.len());
        all_len = all_len.saturating_add(self.votes11.len());
        all_len = all_len.saturating_add(self.votes12.len());
        all_len = all_len.saturating_add(self.votes13.len());
        all_len = all_len.saturating_add(self.votes14.len());
        all_len = all_len.saturating_add(self.votes15.len());
        all_len = all_len.saturating_add(self.votes16.len());
        all_len
    }
    fn edge_count(&self) -> usize {
        let mut all_edges = 0usize;
        all_edges =
            all_edges.saturating_add(self.votes1.len().saturating_mul(1usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes2.len().saturating_mul(2usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes3.len().saturating_mul(3usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes4.len().saturating_mul(4usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes5.len().saturating_mul(5usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes6.len().saturating_mul(6usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes7.len().saturating_mul(7usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes8.len().saturating_mul(8usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes9.len().saturating_mul(9usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes10.len().saturating_mul(10usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes11.len().saturating_mul(11usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes12.len().saturating_mul(12usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes13.len().saturating_mul(13usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes14.len().saturating_mul(14usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes15.len().saturating_mul(15usize
                        as usize));
        all_edges =
            all_edges.saturating_add(self.votes16.len().saturating_mul(16usize
                        as usize));
        all_edges
    }
    fn unique_targets(&self)
        -> _feps::sp_std::prelude::Vec<Self::TargetIndex> {
        use _feps::sp_std::collections::btree_set::BTreeSet;
        let mut all_targets: BTreeSet<Self::TargetIndex> = BTreeSet::new();
        let mut maybe_insert_target =
            |t: Self::TargetIndex| { all_targets.insert(t); };
        self.votes1.iter().for_each(|(_, t)| { maybe_insert_target(*t); });
        self.votes2.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes3.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes4.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes5.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes6.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes7.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes8.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes9.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes10.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes11.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes12.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes13.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes14.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes15.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        self.votes16.iter().for_each(|(_, inners, t_last)|
                {
                    inners.iter().for_each(|(t, _)|
                            { maybe_insert_target(*t); });
                    maybe_insert_target(*t_last);
                });
        all_targets.into_iter().collect()
    }
}
type __IndexAssignment =
    _feps::IndexAssignment<<NposSolution16 as
    _feps::NposSolution>::VoterIndex,
    <NposSolution16 as _feps::NposSolution>::TargetIndex,
    <NposSolution16 as _feps::NposSolution>::Accuracy>;
impl _feps::codec::MaxEncodedLen for NposSolution16 {
    fn max_encoded_len() -> usize {
        use frame_support::traits::Get;
        use _feps::codec::Encode;
        let s: u32 = MaxElectingVoters::get();
        let max_element_size =
            u32::max_encoded_len().saturating_add((16usize -
                                1).saturating_mul(u16::max_encoded_len().saturating_add(sp_runtime::PerU16::max_encoded_len()))).saturating_add(u16::max_encoded_len());
        16usize.saturating_mul(_feps::codec::Compact(0u32).encoded_size()).saturating_add((s
                        as usize).saturating_mul(max_element_size))
    }
}
impl<'a> _feps::sp_std::convert::TryFrom<&'a [__IndexAssignment]> for
    NposSolution16 {
    type Error = _feps::Error;
    fn try_from(index_assignments: &'a [__IndexAssignment])
        -> Result<Self, Self::Error> {
        let mut solution = NposSolution16::default();
        for _feps::IndexAssignment { who, distribution } in index_assignments
            {
            match distribution.len() {
                0 => {}
                1 => solution.votes1.push((*who, distribution[0].0)),
                2usize =>
                    solution.votes2.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1)],
                            distribution[1usize].0)),
                3usize =>
                    solution.votes3.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1)],
                            distribution[2usize].0)),
                4usize =>
                    solution.votes4.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1)],
                            distribution[3usize].0)),
                5usize =>
                    solution.votes5.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1)],
                            distribution[4usize].0)),
                6usize =>
                    solution.votes6.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1)],
                            distribution[5usize].0)),
                7usize =>
                    solution.votes7.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1)],
                            distribution[6usize].0)),
                8usize =>
                    solution.votes8.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1)],
                            distribution[7usize].0)),
                9usize =>
                    solution.votes9.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1)],
                            distribution[8usize].0)),
                10usize =>
                    solution.votes10.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1)],
                            distribution[9usize].0)),
                11usize =>
                    solution.votes11.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1)],
                            distribution[10usize].0)),
                12usize =>
                    solution.votes12.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1)],
                            distribution[11usize].0)),
                13usize =>
                    solution.votes13.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1),
                                    (distribution[11usize].0, distribution[11usize].1)],
                            distribution[12usize].0)),
                14usize =>
                    solution.votes14.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1),
                                    (distribution[11usize].0, distribution[11usize].1),
                                    (distribution[12usize].0, distribution[12usize].1)],
                            distribution[13usize].0)),
                15usize =>
                    solution.votes15.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1),
                                    (distribution[11usize].0, distribution[11usize].1),
                                    (distribution[12usize].0, distribution[12usize].1),
                                    (distribution[13usize].0, distribution[13usize].1)],
                            distribution[14usize].0)),
                16usize =>
                    solution.votes16.push((*who,
                            [(distribution[0usize].0, distribution[0usize].1),
                                    (distribution[1usize].0, distribution[1usize].1),
                                    (distribution[2usize].0, distribution[2usize].1),
                                    (distribution[3usize].0, distribution[3usize].1),
                                    (distribution[4usize].0, distribution[4usize].1),
                                    (distribution[5usize].0, distribution[5usize].1),
                                    (distribution[6usize].0, distribution[6usize].1),
                                    (distribution[7usize].0, distribution[7usize].1),
                                    (distribution[8usize].0, distribution[8usize].1),
                                    (distribution[9usize].0, distribution[9usize].1),
                                    (distribution[10usize].0, distribution[10usize].1),
                                    (distribution[11usize].0, distribution[11usize].1),
                                    (distribution[12usize].0, distribution[12usize].1),
                                    (distribution[13usize].0, distribution[13usize].1),
                                    (distribution[14usize].0, distribution[14usize].1)],
                            distribution[15usize].0)),
                _ => { return Err(_feps::Error::SolutionTargetOverflow); }
            }
        };
        Ok(solution)
    }
}
pub struct MaxNominations;
impl MaxNominations<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 {
        <NposSolution16 as
                frame_election_provider_support::NposSolution>::LIMIT as u32
    }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxNominations<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxNominations<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxElectingVoters;
impl MaxElectingVoters<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 { 40_000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxElectingVoters<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxElectingVoters<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxElectableTargets;
impl MaxElectableTargets<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u16 { 10_000 }
}
impl<_I: From<u16>> ::frame_support::traits::Get<_I> for MaxElectableTargets<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxElectableTargets<> {
    type Type = u16;
    fn get() -> u16 { Self::get() }
}
pub struct MaxOnChainElectingVoters;
impl MaxOnChainElectingVoters<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 { 5000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MaxOnChainElectingVoters<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxOnChainElectingVoters<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxOnChainElectableTargets;
impl MaxOnChainElectableTargets<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u16 { 1250 }
}
impl<_I: From<u16>> ::frame_support::traits::Get<_I> for
    MaxOnChainElectableTargets<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxOnChainElectableTargets<> {
    type Type = u16;
    fn get() -> u16 { Self::get() }
}
pub struct MaxActiveValidators;
impl MaxActiveValidators<> {
    /// Returns the value of this parameter type.
    pub fn get() -> u32 { 1000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxActiveValidators<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxActiveValidators<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
/// The numbers configured here could always be more than the the maximum limits of staking pallet
/// to ensure election snapshot will not run out of memory. For now, we set them to smaller values
/// since the staking is bounded and the weight pipeline takes hours for this single pallet.
pub struct ElectionProviderBenchmarkConfig;
impl pallet_election_provider_multi_phase::BenchmarkingConfig for
    ElectionProviderBenchmarkConfig {
    const VOTERS: [u32; 2] = [1000, 2000];
    const TARGETS: [u32; 2] = [500, 1000];
    const ACTIVE_VOTERS: [u32; 2] = [500, 800];
    const DESIRED_TARGETS: [u32; 2] = [200, 400];
    const SNAPSHOT_MAXIMUM_VOTERS: u32 = 1000;
    const MINER_MAXIMUM_VOTERS: u32 = 1000;
    const MAXIMUM_TARGETS: u32 = 300;
}
/// Maximum number of iterations for balancing that will be executed in the embedded OCW
/// miner of election provider multi phase.
pub const MINER_MAX_ITERATIONS: u32 = 10;
/// A source of random balance for NposSolver, which is meant to be run by the OCW election miner.
pub struct OffchainRandomBalancing;
impl Get<Option<BalancingConfig>> for OffchainRandomBalancing {
    fn get() -> Option<BalancingConfig> {
        use sp_runtime::traits::TrailingZeroInput;
        let iterations =
            match MINER_MAX_ITERATIONS {
                0 => 0,
                max => {
                    let seed = sp_io::offchain::random_seed();
                    let random =
                        <u32>::decode(&mut TrailingZeroInput::new(&seed)).expect("input is padded with zeroes; qed")
                            % max.saturating_add(1);
                    random as usize
                }
            };
        let config = BalancingConfig { iterations, tolerance: 0 };
        Some(config)
    }
}
pub struct OnChainSeqPhragmen;
impl onchain::Config for OnChainSeqPhragmen {
    type System = Runtime;
    type Solver =
        SequentialPhragmen<AccountId,
        pallet_election_provider_multi_phase::SolutionAccuracyOf<Runtime>>;
    type DataProvider =
        <Runtime as
        pallet_election_provider_multi_phase::Config>::DataProvider;
    type WeightInfo =
        frame_election_provider_support::weights::SubstrateWeight<Runtime>;
    type MaxWinners =
        <Runtime as pallet_election_provider_multi_phase::Config>::MaxWinners;
    type VotersBound = MaxOnChainElectingVoters;
    type TargetsBound = MaxOnChainElectableTargets;
}
impl pallet_election_provider_multi_phase::MinerConfig for Runtime {
    type AccountId = AccountId;
    type MaxLength = MinerMaxLength;
    type MaxWeight = MinerMaxWeight;
    type Solution = NposSolution16;
    type MaxVotesPerVoter =
        <<Self as pallet_election_provider_multi_phase::Config>::DataProvider
        as ElectionDataProvider>::MaxVotesPerVoter;
    type MaxWinners = MaxActiveValidators;
    fn solution_weight(v: u32, t: u32, a: u32, d: u32) -> Weight {
        <<Self as pallet_election_provider_multi_phase::Config>::WeightInfo as
                pallet_election_provider_multi_phase::WeightInfo>::submit_unsigned(v,
            t, a, d)
    }
}
impl pallet_election_provider_multi_phase::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type EstimateCallFee = TransactionPayment;
    type SignedPhase = SignedPhase;
    type UnsignedPhase = UnsignedPhase;
    type BetterUnsignedThreshold = BetterUnsignedThreshold;
    type BetterSignedThreshold = ();
    type OffchainRepeat = OffchainRepeat;
    type MinerTxPriority = MultiPhaseUnsignedPriority;
    type MinerConfig = Self;
    type SignedMaxSubmissions = ConstU32<10>;
    type SignedRewardBase = SignedRewardBase;
    type SignedDepositBase = SignedDepositBase;
    type SignedDepositByte = SignedDepositByte;
    type SignedMaxRefunds = ConstU32<3>;
    type SignedDepositWeight = ();
    type SignedMaxWeight = MinerMaxWeight;
    type SlashHandler = ();
    type RewardHandler = ();
    type DataProvider = Staking;
    type Fallback = onchain::OnChainExecution<OnChainSeqPhragmen>;
    type GovernanceFallback = onchain::OnChainExecution<OnChainSeqPhragmen>;
    type Solver =
        SequentialPhragmen<AccountId, SolutionAccuracyOf<Self>,
        OffchainRandomBalancing>;
    type ForceOrigin = EnsureRootOrHalfCouncil;
    type MaxElectableTargets = MaxElectableTargets;
    type MaxWinners = MaxActiveValidators;
    type MaxElectingVoters = MaxElectingVoters;
    type BenchmarkingConfig = ElectionProviderBenchmarkConfig;
    type WeightInfo =
        pallet_election_provider_multi_phase::weights::SubstrateWeight<Self>;
}
pub struct BagThresholds;
impl BagThresholds<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> &'static [u64] { &voter_bags::THRESHOLDS }
}
impl<_I: From<&'static [u64]>> ::frame_support::traits::Get<_I> for
    BagThresholds<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BagThresholds<> {
    type Type = &'static [u64];
    fn get() -> &'static [u64] { Self::get() }
}
type VoterBagsListInstance = pallet_bags_list::Instance1;
impl pallet_bags_list::Config<VoterBagsListInstance> for Runtime {
    type RuntimeEvent = RuntimeEvent;
    /// The voter bags-list is loosely kept up to date, and the real source of truth for the score
    /// of each node is the staking pallet.
    type ScoreProvider = Staking;
    type BagThresholds = BagThresholds;
    type Score = VoteWeight;
    type WeightInfo = pallet_bags_list::weights::SubstrateWeight<Runtime>;
}
pub struct PostUnbondPoolsWindow;
impl PostUnbondPoolsWindow<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 4 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    PostUnbondPoolsWindow<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for PostUnbondPoolsWindow<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct NominationPoolsPalletId;
impl NominationPoolsPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/nopls") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    NominationPoolsPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for NominationPoolsPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
pub struct MaxPointsToBalance;
impl MaxPointsToBalance<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u8 { 10 }
}
impl<_I: From<u8>> ::frame_support::traits::Get<_I> for MaxPointsToBalance<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxPointsToBalance<> {
    type Type = u8;
    fn get() -> u8 { Self::get() }
}
use sp_runtime::traits::Convert;
pub struct BalanceToU256;
impl Convert<Balance, sp_core::U256> for BalanceToU256 {
    fn convert(balance: Balance) -> sp_core::U256 {
        sp_core::U256::from(balance)
    }
}
pub struct U256ToBalance;
impl Convert<sp_core::U256, Balance> for U256ToBalance {
    fn convert(n: sp_core::U256) -> Balance {
        n.try_into().unwrap_or(Balance::max_value())
    }
}
impl pallet_nomination_pools::Config for Runtime {
    type WeightInfo = ();
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type RewardCounter = FixedU128;
    type BalanceToU256 = BalanceToU256;
    type U256ToBalance = U256ToBalance;
    type Staking = Staking;
    type PostUnbondingPoolsWindow = PostUnbondPoolsWindow;
    type MaxMetadataLen = ConstU32<256>;
    type MaxUnbonding = ConstU32<8>;
    type PalletId = NominationPoolsPalletId;
    type MaxPointsToBalance = MaxPointsToBalance;
}
pub struct VoteLockingPeriod;
impl VoteLockingPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 30 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    VoteLockingPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for VoteLockingPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
impl pallet_conviction_voting::Config for Runtime {
    type WeightInfo =
        pallet_conviction_voting::weights::SubstrateWeight<Self>;
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type VoteLockingPeriod = VoteLockingPeriod;
    type MaxVotes = ConstU32<512>;
    type MaxTurnout =
        frame_support::traits::TotalIssuanceOf<Balances, Self::AccountId>;
    type Polls = Referenda;
}
pub struct AlarmInterval;
impl AlarmInterval<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 1 }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    AlarmInterval<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AlarmInterval<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct SubmissionDeposit;
impl SubmissionDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 100 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    SubmissionDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SubmissionDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct UndecidingTimeout;
impl UndecidingTimeout<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 28 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    UndecidingTimeout<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for UndecidingTimeout<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct TracksInfo;
impl pallet_referenda::TracksInfo<Balance, BlockNumber> for TracksInfo {
    type Id = u16;
    type RuntimeOrigin =
        <RuntimeOrigin as frame_support::traits::OriginTrait>::PalletsOrigin;
    fn tracks()
        ->
            &'static [(Self::Id,
            pallet_referenda::TrackInfo<Balance, BlockNumber>)] {
        static DATA:
            [(u16, pallet_referenda::TrackInfo<Balance, BlockNumber>); 1] =
            [(0u16,
                        pallet_referenda::TrackInfo {
                            name: "root",
                            max_deciding: 1,
                            decision_deposit: 10,
                            prepare_period: 4,
                            decision_period: 4,
                            confirm_period: 2,
                            min_enactment_period: 4,
                            min_approval: pallet_referenda::Curve::LinearDecreasing {
                                length: Perbill::from_percent(100),
                                floor: Perbill::from_percent(50),
                                ceil: Perbill::from_percent(100),
                            },
                            min_support: pallet_referenda::Curve::LinearDecreasing {
                                length: Perbill::from_percent(100),
                                floor: Perbill::from_percent(0),
                                ceil: Perbill::from_percent(100),
                            },
                        })];
        &DATA[..]
    }
    fn track_for(id: &Self::RuntimeOrigin) -> Result<Self::Id, ()> {
        if let Ok(system_origin) =
                    frame_system::RawOrigin::try_from(id.clone()) {
                match system_origin {
                    frame_system::RawOrigin::Root => Ok(0),
                    _ => Err(()),
                }
            } else { Err(()) }
    }
}
impl ::pallet_referenda::Get<::pallet_referenda::Vec<(<TracksInfo as
    ::pallet_referenda::TracksInfo<Balance, BlockNumber>>::Id,
    ::pallet_referenda::TrackInfo<Balance, BlockNumber>)>> for TracksInfo {
    fn get()
        ->
            ::pallet_referenda::Vec<(<TracksInfo as
            ::pallet_referenda::TracksInfo<Balance, BlockNumber>>::Id,
            ::pallet_referenda::TrackInfo<Balance, BlockNumber>)> {
        <TracksInfo as
                    ::pallet_referenda::TracksInfo<Balance,
                    BlockNumber>>::tracks().to_vec()
    }
}
impl pallet_referenda::Config for Runtime {
    type WeightInfo = pallet_referenda::weights::SubstrateWeight<Self>;
    type RuntimeCall = RuntimeCall;
    type RuntimeEvent = RuntimeEvent;
    type Scheduler = Scheduler;
    type Currency = pallet_balances::Pallet<Self>;
    type SubmitOrigin = EnsureSigned<AccountId>;
    type CancelOrigin = EnsureRoot<AccountId>;
    type KillOrigin = EnsureRoot<AccountId>;
    type Slash = ();
    type Votes = pallet_conviction_voting::VotesOf<Runtime>;
    type Tally = pallet_conviction_voting::TallyOf<Runtime>;
    type SubmissionDeposit = SubmissionDeposit;
    type MaxQueued = ConstU32<100>;
    type UndecidingTimeout = UndecidingTimeout;
    type AlarmInterval = AlarmInterval;
    type Tracks = TracksInfo;
    type Preimages = Preimage;
}
impl pallet_referenda::Config<pallet_referenda::Instance2> for Runtime {
    type WeightInfo = pallet_referenda::weights::SubstrateWeight<Self>;
    type RuntimeCall = RuntimeCall;
    type RuntimeEvent = RuntimeEvent;
    type Scheduler = Scheduler;
    type Currency = pallet_balances::Pallet<Self>;
    type SubmitOrigin = EnsureSigned<AccountId>;
    type CancelOrigin = EnsureRoot<AccountId>;
    type KillOrigin = EnsureRoot<AccountId>;
    type Slash = ();
    type Votes = pallet_ranked_collective::Votes;
    type Tally = pallet_ranked_collective::TallyOf<Runtime>;
    type SubmissionDeposit = SubmissionDeposit;
    type MaxQueued = ConstU32<100>;
    type UndecidingTimeout = UndecidingTimeout;
    type AlarmInterval = AlarmInterval;
    type Tracks = TracksInfo;
    type Preimages = Preimage;
}
impl pallet_ranked_collective::Config for Runtime {
    type WeightInfo =
        pallet_ranked_collective::weights::SubstrateWeight<Self>;
    type RuntimeEvent = RuntimeEvent;
    type PromoteOrigin = EnsureRootWithSuccess<AccountId, ConstU16<65535>>;
    type DemoteOrigin = EnsureRootWithSuccess<AccountId, ConstU16<65535>>;
    type Polls = RankedPolls;
    type MinRankOfClass = traits::Identity;
    type VoteWeight = pallet_ranked_collective::Geometric;
}
impl pallet_remark::Config for Runtime {
    type WeightInfo = pallet_remark::weights::SubstrateWeight<Self>;
    type RuntimeEvent = RuntimeEvent;
}
impl pallet_root_testing::Config for Runtime {}
pub struct LaunchPeriod;
impl LaunchPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 28 * 24 * 60 * MINUTES }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    LaunchPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for LaunchPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct VotingPeriod;
impl VotingPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 28 * 24 * 60 * MINUTES }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    VotingPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for VotingPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct FastTrackVotingPeriod;
impl FastTrackVotingPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 3 * 24 * 60 * MINUTES }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    FastTrackVotingPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for FastTrackVotingPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct MinimumDeposit;
impl MinimumDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 100 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for MinimumDeposit<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinimumDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct EnactmentPeriod;
impl EnactmentPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 30 * 24 * 60 * MINUTES }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    EnactmentPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for EnactmentPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct CooloffPeriod;
impl CooloffPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 28 * 24 * 60 * MINUTES }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    CooloffPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CooloffPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct MaxProposals;
impl MaxProposals<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxProposals<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxProposals<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_democracy::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type EnactmentPeriod = EnactmentPeriod;
    type LaunchPeriod = LaunchPeriod;
    type VotingPeriod = VotingPeriod;
    type VoteLockingPeriod = EnactmentPeriod;
    type MinimumDeposit = MinimumDeposit;
    /// A straight majority of the council can decide what their next motion is.
    type ExternalOrigin =
        pallet_collective::EnsureProportionAtLeast<AccountId,
        CouncilCollective, 1, 2>;
    /// A super-majority can have the next scheduled referendum be a straight majority-carries vote.
    type ExternalMajorityOrigin =
        pallet_collective::EnsureProportionAtLeast<AccountId,
        CouncilCollective, 3, 4>;
    /// A unanimous council can have the next scheduled referendum be a straight default-carries
    /// (NTB) vote.
    type ExternalDefaultOrigin =
        pallet_collective::EnsureProportionAtLeast<AccountId,
        CouncilCollective, 1, 1>;
    type SubmitOrigin = EnsureSigned<AccountId>;
    /// Two thirds of the technical committee can have an ExternalMajority/ExternalDefault vote
    /// be tabled immediately and with a shorter voting/enactment period.
    type FastTrackOrigin =
        pallet_collective::EnsureProportionAtLeast<AccountId,
        TechnicalCollective, 2, 3>;
    type InstantOrigin =
        pallet_collective::EnsureProportionAtLeast<AccountId,
        TechnicalCollective, 1, 1>;
    type InstantAllowed = frame_support::traits::ConstBool<true>;
    type FastTrackVotingPeriod = FastTrackVotingPeriod;
    type CancellationOrigin =
        pallet_collective::EnsureProportionAtLeast<AccountId,
        CouncilCollective, 2, 3>;
    type CancelProposalOrigin =
        EitherOfDiverse<EnsureRoot<AccountId>,
        pallet_collective::EnsureProportionAtLeast<AccountId,
        TechnicalCollective, 1, 1>>;
    type BlacklistOrigin = EnsureRoot<AccountId>;
    type VetoOrigin =
        pallet_collective::EnsureMember<AccountId, TechnicalCollective>;
    type CooloffPeriod = CooloffPeriod;
    type Slash = Treasury;
    type Scheduler = Scheduler;
    type PalletsOrigin = OriginCaller;
    type MaxVotes = ConstU32<100>;
    type WeightInfo = pallet_democracy::weights::SubstrateWeight<Runtime>;
    type MaxProposals = MaxProposals;
    type Preimages = Preimage;
    type MaxDeposits = ConstU32<100>;
    type MaxBlacklisted = ConstU32<100>;
}
pub struct CouncilMotionDuration;
impl CouncilMotionDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 5 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    CouncilMotionDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CouncilMotionDuration<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct CouncilMaxProposals;
impl CouncilMaxProposals<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for CouncilMaxProposals<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CouncilMaxProposals<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct CouncilMaxMembers;
impl CouncilMaxMembers<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for CouncilMaxMembers<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CouncilMaxMembers<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
type CouncilCollective = pallet_collective::Instance1;
impl pallet_collective::Config<CouncilCollective> for Runtime {
    type RuntimeOrigin = RuntimeOrigin;
    type Proposal = RuntimeCall;
    type RuntimeEvent = RuntimeEvent;
    type MotionDuration = CouncilMotionDuration;
    type MaxProposals = CouncilMaxProposals;
    type MaxMembers = CouncilMaxMembers;
    type DefaultVote = pallet_collective::PrimeDefaultVote;
    type WeightInfo = pallet_collective::weights::SubstrateWeight<Runtime>;
    type SetMembersOrigin = EnsureRoot<Self::AccountId>;
    type MaxProposalWeight = MaxCollectivesProposalWeight;
}
pub struct CandidacyBond;
impl CandidacyBond<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 10 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for CandidacyBond<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CandidacyBond<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct VotingBondBase;
impl VotingBondBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(1, 64) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for VotingBondBase<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for VotingBondBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct VotingBondFactor;
impl VotingBondFactor<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(0, 32) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    VotingBondFactor<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for VotingBondFactor<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct TermDuration;
impl TermDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 7 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    TermDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TermDuration<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct DesiredMembers;
impl DesiredMembers<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 13 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for DesiredMembers<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DesiredMembers<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct DesiredRunnersUp;
impl DesiredRunnersUp<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 7 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for DesiredRunnersUp<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DesiredRunnersUp<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxVotesPerVoter;
impl MaxVotesPerVoter<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 16 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxVotesPerVoter<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxVotesPerVoter<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxVoters;
impl MaxVoters<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 512 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxVoters<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxVoters<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxCandidates;
impl MaxCandidates<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 64 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxCandidates<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxCandidates<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct ElectionsPhragmenPalletId;
impl ElectionsPhragmenPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> LockIdentifier { *b"phrelect" }
}
impl<_I: From<LockIdentifier>> ::frame_support::traits::Get<_I> for
    ElectionsPhragmenPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ElectionsPhragmenPalletId<> {
    type Type = LockIdentifier;
    fn get() -> LockIdentifier { Self::get() }
}
#[allow(unknown_lints, eq_op)]
const _:
    [(); 0 -
        !{
                    const ASSERT: bool =
                        DesiredMembers::get() <= CouncilMaxMembers::get();
                    ASSERT
                } as usize] =
    [];
impl pallet_elections_phragmen::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type PalletId = ElectionsPhragmenPalletId;
    type Currency = Balances;
    type ChangeMembers = Council;
    type InitializeMembers = Council;
    type CurrencyToVote = U128CurrencyToVote;
    type CandidacyBond = CandidacyBond;
    type VotingBondBase = VotingBondBase;
    type VotingBondFactor = VotingBondFactor;
    type LoserCandidate = ();
    type KickedMember = ();
    type DesiredMembers = DesiredMembers;
    type DesiredRunnersUp = DesiredRunnersUp;
    type TermDuration = TermDuration;
    type MaxVoters = MaxVoters;
    type MaxVotesPerVoter = MaxVotesPerVoter;
    type MaxCandidates = MaxCandidates;
    type WeightInfo =
        pallet_elections_phragmen::weights::SubstrateWeight<Runtime>;
}
pub struct TechnicalMotionDuration;
impl TechnicalMotionDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 5 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    TechnicalMotionDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TechnicalMotionDuration<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct TechnicalMaxProposals;
impl TechnicalMaxProposals<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    TechnicalMaxProposals<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TechnicalMaxProposals<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct TechnicalMaxMembers;
impl TechnicalMaxMembers<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for TechnicalMaxMembers<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TechnicalMaxMembers<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
type TechnicalCollective = pallet_collective::Instance2;
impl pallet_collective::Config<TechnicalCollective> for Runtime {
    type RuntimeOrigin = RuntimeOrigin;
    type Proposal = RuntimeCall;
    type RuntimeEvent = RuntimeEvent;
    type MotionDuration = TechnicalMotionDuration;
    type MaxProposals = TechnicalMaxProposals;
    type MaxMembers = TechnicalMaxMembers;
    type DefaultVote = pallet_collective::PrimeDefaultVote;
    type WeightInfo = pallet_collective::weights::SubstrateWeight<Runtime>;
    type SetMembersOrigin = EnsureRoot<Self::AccountId>;
    type MaxProposalWeight = MaxCollectivesProposalWeight;
}
type EnsureRootOrHalfCouncil =
    EitherOfDiverse<EnsureRoot<AccountId>,
    pallet_collective::EnsureProportionMoreThan<AccountId, CouncilCollective,
    1, 2>>;
impl pallet_membership::Config<pallet_membership::Instance1> for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type AddOrigin = EnsureRootOrHalfCouncil;
    type RemoveOrigin = EnsureRootOrHalfCouncil;
    type SwapOrigin = EnsureRootOrHalfCouncil;
    type ResetOrigin = EnsureRootOrHalfCouncil;
    type PrimeOrigin = EnsureRootOrHalfCouncil;
    type MembershipInitialized = TechnicalCommittee;
    type MembershipChanged = TechnicalCommittee;
    type MaxMembers = TechnicalMaxMembers;
    type WeightInfo = pallet_membership::weights::SubstrateWeight<Runtime>;
}
pub struct ProposalBond;
impl ProposalBond<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Permill { Permill::from_percent(5) }
}
impl<_I: From<Permill>> ::frame_support::traits::Get<_I> for ProposalBond<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ProposalBond<> {
    type Type = Permill;
    fn get() -> Permill { Self::get() }
}
pub struct ProposalBondMinimum;
impl ProposalBondMinimum<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ProposalBondMinimum<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ProposalBondMinimum<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct SpendPeriod;
impl SpendPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 1 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for SpendPeriod<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SpendPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct Burn;
impl Burn<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Permill { Permill::from_percent(50) }
}
impl<_I: From<Permill>> ::frame_support::traits::Get<_I> for Burn<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Burn<> {
    type Type = Permill;
    fn get() -> Permill { Self::get() }
}
pub struct TipCountdown;
impl TipCountdown<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 1 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    TipCountdown<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TipCountdown<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct TipFindersFee;
impl TipFindersFee<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Percent { Percent::from_percent(20) }
}
impl<_I: From<Percent>> ::frame_support::traits::Get<_I> for TipFindersFee<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TipFindersFee<> {
    type Type = Percent;
    fn get() -> Percent { Self::get() }
}
pub struct TipReportDepositBase;
impl TipReportDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    TipReportDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TipReportDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct DataDepositPerByte;
impl DataDepositPerByte<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * CENTS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    DataDepositPerByte<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DataDepositPerByte<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct TreasuryPalletId;
impl TreasuryPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/trsry") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    TreasuryPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TreasuryPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
pub struct MaximumReasonLength;
impl MaximumReasonLength<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 300 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaximumReasonLength<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaximumReasonLength<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxApprovals;
impl MaxApprovals<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxApprovals<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxApprovals<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxBalance;
impl MaxBalance<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { Balance::max_value() }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for MaxBalance<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxBalance<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_treasury::Config for Runtime {
    type PalletId = TreasuryPalletId;
    type Currency = Balances;
    type ApproveOrigin =
        EitherOfDiverse<EnsureRoot<AccountId>,
        pallet_collective::EnsureProportionAtLeast<AccountId,
        CouncilCollective, 3, 5>>;
    type RejectOrigin =
        EitherOfDiverse<EnsureRoot<AccountId>,
        pallet_collective::EnsureProportionMoreThan<AccountId,
        CouncilCollective, 1, 2>>;
    type RuntimeEvent = RuntimeEvent;
    type OnSlash = ();
    type ProposalBond = ProposalBond;
    type ProposalBondMinimum = ProposalBondMinimum;
    type ProposalBondMaximum = ();
    type SpendPeriod = SpendPeriod;
    type Burn = Burn;
    type BurnDestination = ();
    type SpendFunds = Bounties;
    type WeightInfo = pallet_treasury::weights::SubstrateWeight<Runtime>;
    type MaxApprovals = MaxApprovals;
    type SpendOrigin =
        EnsureWithSuccess<EnsureRoot<AccountId>, AccountId, MaxBalance>;
}
impl pallet_asset_rate::Config for Runtime {
    type CreateOrigin = EnsureRoot<AccountId>;
    type RemoveOrigin = EnsureRoot<AccountId>;
    type UpdateOrigin = EnsureRoot<AccountId>;
    type Balance = Balance;
    type Currency = Balances;
    type AssetId = u32;
    type RuntimeEvent = RuntimeEvent;
    type WeightInfo = pallet_asset_rate::weights::SubstrateWeight<Runtime>;
}
pub struct BountyCuratorDeposit;
impl BountyCuratorDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Permill { Permill::from_percent(50) }
}
impl<_I: From<Permill>> ::frame_support::traits::Get<_I> for
    BountyCuratorDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyCuratorDeposit<> {
    type Type = Permill;
    fn get() -> Permill { Self::get() }
}
pub struct BountyValueMinimum;
impl BountyValueMinimum<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 5 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    BountyValueMinimum<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyValueMinimum<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct BountyDepositBase;
impl BountyDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    BountyDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct CuratorDepositMultiplier;
impl CuratorDepositMultiplier<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Permill { Permill::from_percent(50) }
}
impl<_I: From<Permill>> ::frame_support::traits::Get<_I> for
    CuratorDepositMultiplier<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CuratorDepositMultiplier<> {
    type Type = Permill;
    fn get() -> Permill { Self::get() }
}
pub struct CuratorDepositMin;
impl CuratorDepositMin<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    CuratorDepositMin<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CuratorDepositMin<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct CuratorDepositMax;
impl CuratorDepositMax<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 100 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    CuratorDepositMax<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CuratorDepositMax<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct BountyDepositPayoutDelay;
impl BountyDepositPayoutDelay<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 1 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    BountyDepositPayoutDelay<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyDepositPayoutDelay<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct BountyUpdatePeriod;
impl BountyUpdatePeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 14 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    BountyUpdatePeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BountyUpdatePeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
impl pallet_bounties::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type BountyDepositBase = BountyDepositBase;
    type BountyDepositPayoutDelay = BountyDepositPayoutDelay;
    type BountyUpdatePeriod = BountyUpdatePeriod;
    type CuratorDepositMultiplier = CuratorDepositMultiplier;
    type CuratorDepositMin = CuratorDepositMin;
    type CuratorDepositMax = CuratorDepositMax;
    type BountyValueMinimum = BountyValueMinimum;
    type DataDepositPerByte = DataDepositPerByte;
    type MaximumReasonLength = MaximumReasonLength;
    type WeightInfo = pallet_bounties::weights::SubstrateWeight<Runtime>;
    type ChildBountyManager = ChildBounties;
}
#[doc = r" Allocate at most 20% of each block for message processing."]
#[doc = r""]
#[doc =
r" Is set to 20% since the scheduler can already consume a maximum of 80%."]
pub struct MessageQueueServiceWeight;
impl MessageQueueServiceWeight<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Option<Weight> {
        Some(Perbill::from_percent(20) * RuntimeBlockWeights::get().max_block)
    }
}
impl<_I: From<Option<Weight>>> ::frame_support::traits::Get<_I> for
    MessageQueueServiceWeight<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MessageQueueServiceWeight<> {
    type Type = Option<Weight>;
    fn get() -> Option<Weight> { Self::get() }
}
impl pallet_message_queue::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type WeightInfo = ();
    /// NOTE: Always set this to `NoopMessageProcessor` for benchmarking.
    type MessageProcessor =
        pallet_message_queue::mock_helpers::NoopMessageProcessor<u32>;
    type Size = u32;
    type QueueChangeHandler = ();
    type HeapSize = ConstU32<{ 64 * 1024 }>;
    type MaxStale = ConstU32<128>;
    type ServiceWeight = MessageQueueServiceWeight;
}
pub struct ChildBountyValueMinimum;
impl ChildBountyValueMinimum<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ChildBountyValueMinimum<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ChildBountyValueMinimum<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_child_bounties::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type MaxActiveChildBountyCount = ConstU32<5>;
    type ChildBountyValueMinimum = ChildBountyValueMinimum;
    type WeightInfo =
        pallet_child_bounties::weights::SubstrateWeight<Runtime>;
}
impl pallet_tips::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type DataDepositPerByte = DataDepositPerByte;
    type MaximumReasonLength = MaximumReasonLength;
    type Tippers = Elections;
    type TipCountdown = TipCountdown;
    type TipFindersFee = TipFindersFee;
    type TipReportDepositBase = TipReportDepositBase;
    type WeightInfo = pallet_tips::weights::SubstrateWeight<Runtime>;
}
pub struct DepositPerItem;
impl DepositPerItem<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(1, 0) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for DepositPerItem<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DepositPerItem<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct DepositPerByte;
impl DepositPerByte<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(0, 1) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for DepositPerByte<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DepositPerByte<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct DefaultDepositLimit;
impl DefaultDepositLimit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { deposit(1024, 1024 * 1024) }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    DefaultDepositLimit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for DefaultDepositLimit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct Schedule;
impl Schedule<> {
    /// Returns the value of this parameter type.
    pub fn get() -> pallet_contracts::Schedule<Runtime> { Default::default() }
}
impl<_I: From<pallet_contracts::Schedule<Runtime>>>
    ::frame_support::traits::Get<_I> for Schedule<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Schedule<> {
    type Type = pallet_contracts::Schedule<Runtime>;
    fn get() -> pallet_contracts::Schedule<Runtime> { Self::get() }
}
impl pallet_contracts::Config for Runtime {
    type Time = Timestamp;
    type Randomness = RandomnessCollectiveFlip;
    type Currency = Balances;
    type RuntimeEvent = RuntimeEvent;
    type RuntimeCall = RuntimeCall;
    /// The safest default is to allow no calls at all.
    ///
    /// Runtimes should whitelist dispatchables that are allowed to be called from contracts
    /// and make sure they are stable. Dispatchables exposed to contracts are not allowed to
    /// change because that would break already deployed contracts. The `Call` structure itself
    /// is not allowed to change the indices of existing pallets, too.
    type CallFilter = Nothing;
    type DepositPerItem = DepositPerItem;
    type DepositPerByte = DepositPerByte;
    type DefaultDepositLimit = DefaultDepositLimit;
    type CallStack = [pallet_contracts::Frame<Self>; 5];
    type WeightPrice = pallet_transaction_payment::Pallet<Self>;
    type WeightInfo = pallet_contracts::weights::SubstrateWeight<Self>;
    type ChainExtension = ();
    type Schedule = Schedule;
    type AddressGenerator = pallet_contracts::DefaultAddressGenerator;
    type MaxCodeLen = ConstU32<{ 123 * 1024 }>;
    type MaxStorageKeyLen = ConstU32<128>;
    type UnsafeUnstableInterface = ConstBool<false>;
    type MaxDebugBufferLen = ConstU32<{ 2 * 1024 * 1024 }>;
}
impl pallet_sudo::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeCall = RuntimeCall;
    type WeightInfo = pallet_sudo::weights::SubstrateWeight<Runtime>;
}
pub struct ImOnlineUnsignedPriority;
impl ImOnlineUnsignedPriority<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> TransactionPriority {
        TransactionPriority::max_value()
    }
}
impl<_I: From<TransactionPriority>> ::frame_support::traits::Get<_I> for
    ImOnlineUnsignedPriority<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ImOnlineUnsignedPriority<> {
    type Type = TransactionPriority;
    fn get() -> TransactionPriority { Self::get() }
}
#[doc =
r" We prioritize im-online heartbeats over election solution submission."]
pub struct StakingUnsignedPriority;
impl StakingUnsignedPriority<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> TransactionPriority {
        TransactionPriority::max_value() / 2
    }
}
impl<_I: From<TransactionPriority>> ::frame_support::traits::Get<_I> for
    StakingUnsignedPriority<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for StakingUnsignedPriority<> {
    type Type = TransactionPriority;
    fn get() -> TransactionPriority { Self::get() }
}
pub struct MaxAuthorities;
impl MaxAuthorities<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxAuthorities<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxAuthorities<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxKeys;
impl MaxKeys<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10_000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxKeys<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxKeys<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxPeerInHeartbeats;
impl MaxPeerInHeartbeats<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10_000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxPeerInHeartbeats<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxPeerInHeartbeats<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxPeerDataEncodingSize;
impl MaxPeerDataEncodingSize<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 1_000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MaxPeerDataEncodingSize<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxPeerDataEncodingSize<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl<LocalCall> frame_system::offchain::CreateSignedTransaction<LocalCall> for
    Runtime where RuntimeCall: From<LocalCall> {
    fn create_transaction<C: frame_system::offchain::AppCrypto<Self::Public,
        Self::Signature>>(call: RuntimeCall,
        public: <Signature as traits::Verify>::Signer, account: AccountId,
        nonce: Index)
        ->
            Option<(RuntimeCall,
            <UncheckedExtrinsic as traits::Extrinsic>::SignaturePayload)> {
        let tip = 0;
        let period =
            BlockHashCount::get().checked_next_power_of_two().map(|c|
                            c / 2).unwrap_or(2) as u64;
        let current_block =
            System::block_number().saturated_into::<u64>().saturating_sub(1);
        let era = Era::mortal(period, current_block);
        let extra =
            (frame_system::CheckNonZeroSender::<Runtime>::new(),
                frame_system::CheckSpecVersion::<Runtime>::new(),
                frame_system::CheckTxVersion::<Runtime>::new(),
                frame_system::CheckGenesis::<Runtime>::new(),
                frame_system::CheckEra::<Runtime>::from(era),
                frame_system::CheckNonce::<Runtime>::from(nonce),
                frame_system::CheckWeight::<Runtime>::new(),
                pallet_asset_tx_payment::ChargeAssetTxPayment::<Runtime>::from(tip,
                    None));
        let raw_payload =
            SignedPayload::new(call,
                            extra).map_err(|e|
                            {
                                {
                                    let lvl = ::log::Level::Warn;
                                    if lvl <= ::log::STATIC_MAX_LEVEL &&
                                                lvl <= ::log::max_level() {
                                            ::log::__private_api_log(::core::fmt::Arguments::new_v1(&["Unable to create signed payload: "],
                                                    &[::core::fmt::ArgumentV1::new_debug(&e)]), lvl,
                                                &("kitchensink_runtime", "kitchensink_runtime",
                                                        "bin/node/runtime/src/lib.rs", 1290u32),
                                                ::log::__private_api::Option::None);
                                        }
                                };
                            }).ok()?;
        let signature =
            raw_payload.using_encoded(|payload| C::sign(payload, public))?;
        let address = Indices::unlookup(account);
        let (call, extra, _) = raw_payload.deconstruct();
        Some((call, (address, signature, extra)))
    }
}
impl frame_system::offchain::SigningTypes for Runtime {
    type Public = <Signature as traits::Verify>::Signer;
    type Signature = Signature;
}
impl<C> frame_system::offchain::SendTransactionTypes<C> for Runtime where
    RuntimeCall: From<C> {
    type Extrinsic = UncheckedExtrinsic;
    type OverarchingCall = RuntimeCall;
}
impl pallet_im_online::Config for Runtime {
    type AuthorityId = ImOnlineId;
    type RuntimeEvent = RuntimeEvent;
    type NextSessionRotation = Babe;
    type ValidatorSet = Historical;
    type ReportUnresponsiveness = Offences;
    type UnsignedPriority = ImOnlineUnsignedPriority;
    type WeightInfo = pallet_im_online::weights::SubstrateWeight<Runtime>;
    type MaxKeys = MaxKeys;
    type MaxPeerInHeartbeats = MaxPeerInHeartbeats;
    type MaxPeerDataEncodingSize = MaxPeerDataEncodingSize;
}
impl pallet_offences::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type IdentificationTuple =
        pallet_session::historical::IdentificationTuple<Self>;
    type OnOffenceHandler = Staking;
}
impl pallet_authority_discovery::Config for Runtime {
    type MaxAuthorities = MaxAuthorities;
}
pub struct MaxSetIdSessionEntries;
impl MaxSetIdSessionEntries<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 {
        BondingDuration::get() * SessionsPerEra::get()
    }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MaxSetIdSessionEntries<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxSetIdSessionEntries<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_grandpa::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type WeightInfo = ();
    type MaxAuthorities = MaxAuthorities;
    type MaxSetIdSessionEntries = MaxSetIdSessionEntries;
    type KeyOwnerProof =
        <Historical as KeyOwnerProofSystem<(KeyTypeId, GrandpaId)>>::Proof;
    type EquivocationReportSystem =
        pallet_grandpa::EquivocationReportSystem<Self, Offences, Historical,
        ReportLongevity>;
}
pub struct BasicDeposit;
impl BasicDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 10 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for BasicDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for BasicDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct FieldDeposit;
impl FieldDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 250 * CENTS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for FieldDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for FieldDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct SubAccountDeposit;
impl SubAccountDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 2 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    SubAccountDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SubAccountDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MaxSubAccounts;
impl MaxSubAccounts<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxSubAccounts<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxSubAccounts<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxAdditionalFields;
impl MaxAdditionalFields<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxAdditionalFields<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxAdditionalFields<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxRegistrars;
impl MaxRegistrars<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 20 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxRegistrars<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxRegistrars<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_identity::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type BasicDeposit = BasicDeposit;
    type FieldDeposit = FieldDeposit;
    type SubAccountDeposit = SubAccountDeposit;
    type MaxSubAccounts = MaxSubAccounts;
    type MaxAdditionalFields = MaxAdditionalFields;
    type MaxRegistrars = MaxRegistrars;
    type Slashed = Treasury;
    type ForceOrigin = EnsureRootOrHalfCouncil;
    type RegistrarOrigin = EnsureRootOrHalfCouncil;
    type WeightInfo = pallet_identity::weights::SubstrateWeight<Runtime>;
}
pub struct ConfigDepositBase;
impl ConfigDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 5 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    ConfigDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ConfigDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct FriendDepositFactor;
impl FriendDepositFactor<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 50 * CENTS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    FriendDepositFactor<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for FriendDepositFactor<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MaxFriends;
impl MaxFriends<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u16 { 9 }
}
impl<_I: From<u16>> ::frame_support::traits::Get<_I> for MaxFriends<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxFriends<> {
    type Type = u16;
    fn get() -> u16 { Self::get() }
}
pub struct RecoveryDeposit;
impl RecoveryDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 5 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for RecoveryDeposit<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for RecoveryDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_recovery::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type WeightInfo = pallet_recovery::weights::SubstrateWeight<Runtime>;
    type RuntimeCall = RuntimeCall;
    type Currency = Balances;
    type ConfigDepositBase = ConfigDepositBase;
    type FriendDepositFactor = FriendDepositFactor;
    type MaxFriends = MaxFriends;
    type RecoveryDeposit = RecoveryDeposit;
}
pub struct CandidateDeposit;
impl CandidateDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 10 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    CandidateDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CandidateDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct WrongSideDeduction;
impl WrongSideDeduction<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 2 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    WrongSideDeduction<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for WrongSideDeduction<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MaxStrikes;
impl MaxStrikes<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxStrikes<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxStrikes<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct RotationPeriod;
impl RotationPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 80 * HOURS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    RotationPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for RotationPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct PeriodSpend;
impl PeriodSpend<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 500 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for PeriodSpend<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for PeriodSpend<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MaxLockDuration;
impl MaxLockDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 36 * 30 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    MaxLockDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxLockDuration<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct ChallengePeriod;
impl ChallengePeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 7 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    ChallengePeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ChallengePeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct MaxCandidateIntake;
impl MaxCandidateIntake<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxCandidateIntake<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxCandidateIntake<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct SocietyPalletId;
impl SocietyPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/socie") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    SocietyPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for SocietyPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
impl pallet_society::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type PalletId = SocietyPalletId;
    type Currency = Balances;
    type Randomness = RandomnessCollectiveFlip;
    type CandidateDeposit = CandidateDeposit;
    type WrongSideDeduction = WrongSideDeduction;
    type MaxStrikes = MaxStrikes;
    type PeriodSpend = PeriodSpend;
    type MembershipChanged = ();
    type RotationPeriod = RotationPeriod;
    type MaxLockDuration = MaxLockDuration;
    type FounderSetOrigin =
        pallet_collective::EnsureProportionMoreThan<AccountId,
        CouncilCollective, 1, 2>;
    type SuspensionJudgementOrigin = pallet_society::EnsureFounder<Runtime>;
    type MaxCandidateIntake = MaxCandidateIntake;
    type ChallengePeriod = ChallengePeriod;
}
pub struct MinVestedTransfer;
impl MinVestedTransfer<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 100 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    MinVestedTransfer<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinVestedTransfer<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct UnvestedFundsAllowedWithdrawReasons;
impl UnvestedFundsAllowedWithdrawReasons<> {
    /// Returns the value of this parameter type.
    pub fn get() -> WithdrawReasons {
        WithdrawReasons::except(WithdrawReasons::TRANSFER |
                WithdrawReasons::RESERVE)
    }
}
impl<_I: From<WithdrawReasons>> ::frame_support::traits::Get<_I> for
    UnvestedFundsAllowedWithdrawReasons<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for
    UnvestedFundsAllowedWithdrawReasons<> {
    type Type = WithdrawReasons;
    fn get() -> WithdrawReasons { Self::get() }
}
impl pallet_vesting::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type BlockNumberToBalance = ConvertInto;
    type MinVestedTransfer = MinVestedTransfer;
    type WeightInfo = pallet_vesting::weights::SubstrateWeight<Runtime>;
    type UnvestedFundsAllowedWithdrawReasons =
        UnvestedFundsAllowedWithdrawReasons;
    const MAX_VESTING_SCHEDULES: u32 = 28;
}
impl pallet_mmr::Config for Runtime {
    const INDEXING_PREFIX: &'static [u8] = b"mmr";
    type Hashing = <Runtime as frame_system::Config>::Hashing;
    type LeafData = pallet_mmr::ParentNumberAndHash<Self>;
    type OnNewRoot = ();
    type WeightInfo = ();
}
pub struct LotteryPalletId;
impl LotteryPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/lotto") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    LotteryPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for LotteryPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
pub struct MaxCalls;
impl MaxCalls<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxCalls<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxCalls<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxGenerateRandom;
impl MaxGenerateRandom<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxGenerateRandom<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxGenerateRandom<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_lottery::Config for Runtime {
    type PalletId = LotteryPalletId;
    type RuntimeCall = RuntimeCall;
    type Currency = Balances;
    type Randomness = RandomnessCollectiveFlip;
    type RuntimeEvent = RuntimeEvent;
    type ManagerOrigin = EnsureRoot<AccountId>;
    type MaxCalls = MaxCalls;
    type ValidateCall = Lottery;
    type MaxGenerateRandom = MaxGenerateRandom;
    type WeightInfo = pallet_lottery::weights::SubstrateWeight<Runtime>;
}
pub struct AssetDeposit;
impl AssetDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 100 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for AssetDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AssetDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct ApprovalDeposit;
impl ApprovalDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for ApprovalDeposit<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ApprovalDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct StringLimit;
impl StringLimit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 50 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for StringLimit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for StringLimit<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MetadataDepositBase;
impl MetadataDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 10 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    MetadataDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MetadataDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MetadataDepositPerByte;
impl MetadataDepositPerByte<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    MetadataDepositPerByte<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MetadataDepositPerByte<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
impl pallet_assets::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Balance = u128;
    type AssetId = u32;
    type AssetIdParameter = codec::Compact<u32>;
    type Currency = Balances;
    type CreateOrigin = AsEnsureOriginWithArg<EnsureSigned<AccountId>>;
    type ForceOrigin = EnsureRoot<AccountId>;
    type AssetDeposit = AssetDeposit;
    type AssetAccountDeposit = ConstU128<DOLLARS>;
    type MetadataDepositBase = MetadataDepositBase;
    type MetadataDepositPerByte = MetadataDepositPerByte;
    type ApprovalDeposit = ApprovalDeposit;
    type StringLimit = StringLimit;
    type Freezer = ();
    type Extra = ();
    type CallbackHandle = ();
    type WeightInfo = pallet_assets::weights::SubstrateWeight<Runtime>;
    type RemoveItemsLimit = ConstU32<1000>;
}
pub struct QueueCount;
impl QueueCount<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 300 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for QueueCount<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for QueueCount<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxQueueLen;
impl MaxQueueLen<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 1000 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxQueueLen<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxQueueLen<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct FifoQueueLen;
impl FifoQueueLen<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 500 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for FifoQueueLen<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for FifoQueueLen<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct NisBasePeriod;
impl NisBasePeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 30 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    NisBasePeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for NisBasePeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct MinBid;
impl MinBid<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 100 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for MinBid<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinBid<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MinReceipt;
impl MinReceipt<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Perquintill { Perquintill::from_percent(1) }
}
impl<_I: From<Perquintill>> ::frame_support::traits::Get<_I> for MinReceipt<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinReceipt<> {
    type Type = Perquintill;
    fn get() -> Perquintill { Self::get() }
}
pub struct IntakePeriod;
impl IntakePeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 10 }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    IntakePeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for IntakePeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct MaxIntakeWeight;
impl MaxIntakeWeight<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Weight { MAXIMUM_BLOCK_WEIGHT / 10 }
}
impl<_I: From<Weight>> ::frame_support::traits::Get<_I> for MaxIntakeWeight<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxIntakeWeight<> {
    type Type = Weight;
    fn get() -> Weight { Self::get() }
}
pub struct ThawThrottle;
impl ThawThrottle<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> (Perquintill, BlockNumber) {
        (Perquintill::from_percent(25), 5)
    }
}
impl<_I: From<(Perquintill, BlockNumber)>> ::frame_support::traits::Get<_I>
    for ThawThrottle<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ThawThrottle<> {
    type Type = (Perquintill, BlockNumber);
    fn get() -> (Perquintill, BlockNumber) { Self::get() }
}
pub struct Target;
impl Target<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Perquintill { Perquintill::zero() }
}
impl<_I: From<Perquintill>> ::frame_support::traits::Get<_I> for Target<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Target<> {
    type Type = Perquintill;
    fn get() -> Perquintill { Self::get() }
}
pub struct NisPalletId;
impl NisPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"py/nis  ") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for NisPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for NisPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
impl pallet_nis::Config for Runtime {
    type WeightInfo = pallet_nis::weights::SubstrateWeight<Runtime>;
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type CurrencyBalance = Balance;
    type FundOrigin = frame_system::EnsureSigned<AccountId>;
    type Counterpart = ItemOf<Assets, ConstU32<9u32>, AccountId>;
    type CounterpartAmount =
        WithMaximumOf<ConstU128<21_000_000_000_000_000_000u128>>;
    type Deficit = ();
    type IgnoredIssuance = ();
    type Target = Target;
    type PalletId = NisPalletId;
    type QueueCount = QueueCount;
    type MaxQueueLen = MaxQueueLen;
    type FifoQueueLen = FifoQueueLen;
    type BasePeriod = NisBasePeriod;
    type MinBid = MinBid;
    type MinReceipt = MinReceipt;
    type IntakePeriod = IntakePeriod;
    type MaxIntakeWeight = MaxIntakeWeight;
    type ThawThrottle = ThawThrottle;
    type RuntimeHoldReason = RuntimeHoldReason;
}
pub struct CollectionDeposit;
impl CollectionDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 100 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    CollectionDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for CollectionDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct ItemDeposit;
impl ItemDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for ItemDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ItemDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct KeyLimit;
impl KeyLimit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 32 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for KeyLimit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for KeyLimit<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct ValueLimit;
impl ValueLimit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 256 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for ValueLimit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ValueLimit<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct ApprovalsLimit;
impl ApprovalsLimit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 20 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for ApprovalsLimit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ApprovalsLimit<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct ItemAttributesApprovalsLimit;
impl ItemAttributesApprovalsLimit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 20 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    ItemAttributesApprovalsLimit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for ItemAttributesApprovalsLimit<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxTips;
impl MaxTips<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxTips<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxTips<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxDeadlineDuration;
impl MaxDeadlineDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { 12 * 30 * DAYS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    MaxDeadlineDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxDeadlineDuration<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
impl pallet_uniques::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type CollectionId = u32;
    type ItemId = u32;
    type Currency = Balances;
    type ForceOrigin = frame_system::EnsureRoot<AccountId>;
    type CollectionDeposit = CollectionDeposit;
    type ItemDeposit = ItemDeposit;
    type MetadataDepositBase = MetadataDepositBase;
    type AttributeDepositBase = MetadataDepositBase;
    type DepositPerByte = MetadataDepositPerByte;
    type StringLimit = StringLimit;
    type KeyLimit = KeyLimit;
    type ValueLimit = ValueLimit;
    type WeightInfo = pallet_uniques::weights::SubstrateWeight<Runtime>;
    type CreateOrigin = AsEnsureOriginWithArg<EnsureSigned<AccountId>>;
    type Locker = ();
}
pub struct Budget;
impl Budget<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 10_000 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for Budget<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Budget<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct TreasuryAccount;
impl TreasuryAccount<> {
    /// Returns the value of this parameter type.
    pub fn get() -> AccountId { Treasury::account_id() }
}
impl<_I: From<AccountId>> ::frame_support::traits::Get<_I> for
    TreasuryAccount<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for TreasuryAccount<> {
    type Type = AccountId;
    fn get() -> AccountId { Self::get() }
}
pub struct SalaryForRank;
impl GetSalary<u16, AccountId, Balance> for SalaryForRank {
    fn get_salary(a: u16, _: &AccountId) -> Balance {
        Balance::from(a) * 1000 * DOLLARS
    }
}
impl pallet_salary::Config for Runtime {
    type WeightInfo = ();
    type RuntimeEvent = RuntimeEvent;
    type Paymaster = PayFromAccount<Balances, TreasuryAccount>;
    type Members = RankedCollective;
    type Salary = SalaryForRank;
    type RegistrationPeriod = ConstU32<200>;
    type PayoutPeriod = ConstU32<200>;
    type Budget = Budget;
}
impl pallet_core_fellowship::Config for Runtime {
    type WeightInfo = ();
    type RuntimeEvent = RuntimeEvent;
    type Members = RankedCollective;
    type Balance = Balance;
    type ParamsOrigin = frame_system::EnsureRoot<AccountId>;
    type InductOrigin =
        pallet_core_fellowship::EnsureInducted<Runtime, (), 1>;
    type ApproveOrigin =
        frame_system::EnsureRootWithSuccess<AccountId, ConstU16<9>>;
    type PromoteOrigin =
        frame_system::EnsureRootWithSuccess<AccountId, ConstU16<9>>;
    type EvidenceSize = ConstU32<16_384>;
}
pub struct NftFractionalizationPalletId;
impl NftFractionalizationPalletId<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> PalletId { PalletId(*b"fraction") }
}
impl<_I: From<PalletId>> ::frame_support::traits::Get<_I> for
    NftFractionalizationPalletId<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for NftFractionalizationPalletId<> {
    type Type = PalletId;
    fn get() -> PalletId { Self::get() }
}
pub struct NewAssetSymbol;
impl NewAssetSymbol<> {
    /// Returns the value of this parameter type.
    pub fn get() -> BoundedVec<u8, StringLimit> {
        (*b"FRAC").to_vec().try_into().unwrap()
    }
}
impl<_I: From<BoundedVec<u8, StringLimit>>> ::frame_support::traits::Get<_I>
    for NewAssetSymbol<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for NewAssetSymbol<> {
    type Type = BoundedVec<u8, StringLimit>;
    fn get() -> BoundedVec<u8, StringLimit> { Self::get() }
}
pub struct NewAssetName;
impl NewAssetName<> {
    /// Returns the value of this parameter type.
    pub fn get() -> BoundedVec<u8, StringLimit> {
        (*b"Frac").to_vec().try_into().unwrap()
    }
}
impl<_I: From<BoundedVec<u8, StringLimit>>> ::frame_support::traits::Get<_I>
    for NewAssetName<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for NewAssetName<> {
    type Type = BoundedVec<u8, StringLimit>;
    fn get() -> BoundedVec<u8, StringLimit> { Self::get() }
}
impl pallet_nft_fractionalization::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Deposit = AssetDeposit;
    type Currency = Balances;
    type NewAssetSymbol = NewAssetSymbol;
    type NewAssetName = NewAssetName;
    type StringLimit = StringLimit;
    type NftCollectionId = <Self as pallet_nfts::Config>::CollectionId;
    type NftId = <Self as pallet_nfts::Config>::ItemId;
    type AssetBalance = <Self as pallet_balances::Config>::Balance;
    type AssetId = <Self as pallet_assets::Config>::AssetId;
    type Assets = Assets;
    type Nfts = Nfts;
    type PalletId = NftFractionalizationPalletId;
    type WeightInfo =
        pallet_nft_fractionalization::weights::SubstrateWeight<Runtime>;
    type RuntimeHoldReason = RuntimeHoldReason;
}
pub struct Features;
impl Features<> {
    /// Returns the value of this parameter type.
    pub fn get() -> PalletFeatures { PalletFeatures::all_enabled() }
}
impl<_I: From<PalletFeatures>> ::frame_support::traits::Get<_I> for Features<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for Features<> {
    type Type = PalletFeatures;
    fn get() -> PalletFeatures { Self::get() }
}
pub struct MaxAttributesPerCall;
impl MaxAttributesPerCall<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MaxAttributesPerCall<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxAttributesPerCall<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_nfts::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type CollectionId = u32;
    type ItemId = u32;
    type Currency = Balances;
    type ForceOrigin = frame_system::EnsureRoot<AccountId>;
    type CollectionDeposit = CollectionDeposit;
    type ItemDeposit = ItemDeposit;
    type MetadataDepositBase = MetadataDepositBase;
    type AttributeDepositBase = MetadataDepositBase;
    type DepositPerByte = MetadataDepositPerByte;
    type StringLimit = StringLimit;
    type KeyLimit = KeyLimit;
    type ValueLimit = ValueLimit;
    type ApprovalsLimit = ApprovalsLimit;
    type ItemAttributesApprovalsLimit = ItemAttributesApprovalsLimit;
    type MaxTips = MaxTips;
    type MaxDeadlineDuration = MaxDeadlineDuration;
    type MaxAttributesPerCall = MaxAttributesPerCall;
    type Features = Features;
    type OffchainSignature = Signature;
    type OffchainPublic = <Signature as traits::Verify>::Signer;
    type WeightInfo = pallet_nfts::weights::SubstrateWeight<Runtime>;
    type CreateOrigin = AsEnsureOriginWithArg<EnsureSigned<AccountId>>;
    type Locker = ();
}
impl pallet_transaction_storage::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type RuntimeCall = RuntimeCall;
    type FeeDestination = ();
    type WeightInfo =
        pallet_transaction_storage::weights::SubstrateWeight<Runtime>;
    type MaxBlockTransactions =
        ConstU32<{
            pallet_transaction_storage::DEFAULT_MAX_BLOCK_TRANSACTIONS
        }>;
    type MaxTransactionSize =
        ConstU32<{
            pallet_transaction_storage::DEFAULT_MAX_TRANSACTION_SIZE
        }>;
}
impl pallet_whitelist::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type RuntimeCall = RuntimeCall;
    type WhitelistOrigin = EnsureRoot<AccountId>;
    type DispatchWhitelistedOrigin = EnsureRoot<AccountId>;
    type Preimages = Preimage;
    type WeightInfo = pallet_whitelist::weights::SubstrateWeight<Runtime>;
}
pub struct MigrationSignedDepositPerItem;
impl MigrationSignedDepositPerItem<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 1 * CENTS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    MigrationSignedDepositPerItem<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MigrationSignedDepositPerItem<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MigrationSignedDepositBase;
impl MigrationSignedDepositBase<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 20 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    MigrationSignedDepositBase<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MigrationSignedDepositBase<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MigrationMaxKeyLen;
impl MigrationMaxKeyLen<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 512 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MigrationMaxKeyLen<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MigrationMaxKeyLen<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_state_trie_migration::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type ControlOrigin = EnsureRoot<AccountId>;
    type Currency = Balances;
    type MaxKeyLen = MigrationMaxKeyLen;
    type SignedDepositPerItem = MigrationSignedDepositPerItem;
    type SignedDepositBase = MigrationSignedDepositBase;
    type SignedFilter = EnsureSigned<Self::AccountId>;
    type WeightInfo = ();
}
const ALLIANCE_MOTION_DURATION_IN_BLOCKS: BlockNumber = 5 * DAYS;
pub struct AllianceMotionDuration;
impl AllianceMotionDuration<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber { ALLIANCE_MOTION_DURATION_IN_BLOCKS }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    AllianceMotionDuration<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AllianceMotionDuration<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
pub struct AllianceMaxProposals;
impl AllianceMaxProposals<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    AllianceMaxProposals<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AllianceMaxProposals<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct AllianceMaxMembers;
impl AllianceMaxMembers<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for AllianceMaxMembers<>
    {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AllianceMaxMembers<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
type AllianceCollective = pallet_collective::Instance3;
impl pallet_collective::Config<AllianceCollective> for Runtime {
    type RuntimeOrigin = RuntimeOrigin;
    type Proposal = RuntimeCall;
    type RuntimeEvent = RuntimeEvent;
    type MotionDuration = AllianceMotionDuration;
    type MaxProposals = AllianceMaxProposals;
    type MaxMembers = AllianceMaxMembers;
    type DefaultVote = pallet_collective::PrimeDefaultVote;
    type WeightInfo = pallet_collective::weights::SubstrateWeight<Runtime>;
    type SetMembersOrigin = EnsureRoot<Self::AccountId>;
    type MaxProposalWeight = MaxCollectivesProposalWeight;
}
pub struct MaxFellows;
impl MaxFellows<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { AllianceMaxMembers::get() }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxFellows<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxFellows<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxAllies;
impl MaxAllies<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 100 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxAllies<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxAllies<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct AllyDeposit;
impl AllyDeposit<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> Balance { 10 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for AllyDeposit<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for AllyDeposit<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct RetirementPeriod;
impl RetirementPeriod<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> BlockNumber {
        ALLIANCE_MOTION_DURATION_IN_BLOCKS + (1 * DAYS)
    }
}
impl<_I: From<BlockNumber>> ::frame_support::traits::Get<_I> for
    RetirementPeriod<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for RetirementPeriod<> {
    type Type = BlockNumber;
    fn get() -> BlockNumber { Self::get() }
}
impl pallet_alliance::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Proposal = RuntimeCall;
    type AdminOrigin =
        EitherOfDiverse<EnsureRoot<AccountId>,
        pallet_collective::EnsureProportionMoreThan<AccountId,
        AllianceCollective, 2, 3>>;
    type MembershipManager =
        EitherOfDiverse<EnsureRoot<AccountId>,
        pallet_collective::EnsureProportionMoreThan<AccountId,
        AllianceCollective, 2, 3>>;
    type AnnouncementOrigin =
        EitherOfDiverse<EnsureRoot<AccountId>,
        pallet_collective::EnsureProportionMoreThan<AccountId,
        AllianceCollective, 2, 3>>;
    type Currency = Balances;
    type Slashed = Treasury;
    type InitializeMembers = AllianceMotion;
    type MembershipChanged = AllianceMotion;
    #[cfg(not(feature = "runtime-benchmarks"))]
    type IdentityVerifier = AllianceIdentityVerifier;
    type ProposalProvider = AllianceProposalProvider;
    type MaxProposals = AllianceMaxProposals;
    type MaxFellows = MaxFellows;
    type MaxAllies = MaxAllies;
    type MaxUnscrupulousItems = ConstU32<100>;
    type MaxWebsiteUrlLength = ConstU32<255>;
    type MaxAnnouncementsCount = ConstU32<100>;
    type MaxMembersCount = AllianceMaxMembers;
    type AllyDeposit = AllyDeposit;
    type WeightInfo = pallet_alliance::weights::SubstrateWeight<Runtime>;
    type RetirementPeriod = RetirementPeriod;
}
impl frame_benchmarking_pallet_pov::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
}
pub struct StatementCost;
impl StatementCost<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Balance { 1 * DOLLARS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for StatementCost<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for StatementCost<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct StatementByteCost;
impl StatementByteCost<> {
    /// Returns the value of this parameter type.
    pub fn get() -> Balance { 100 * MILLICENTS }
}
impl<_I: From<Balance>> ::frame_support::traits::Get<_I> for
    StatementByteCost<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for StatementByteCost<> {
    type Type = Balance;
    fn get() -> Balance { Self::get() }
}
pub struct MinAllowedStatements;
impl MinAllowedStatements<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 4 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MinAllowedStatements<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinAllowedStatements<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxAllowedStatements;
impl MaxAllowedStatements<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 10 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for
    MaxAllowedStatements<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxAllowedStatements<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MinAllowedBytes;
impl MinAllowedBytes<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 1024 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MinAllowedBytes<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MinAllowedBytes<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
pub struct MaxAllowedBytes;
impl MaxAllowedBytes<> {
    /// Returns the value of this parameter type.
    pub const fn get() -> u32 { 4096 }
}
impl<_I: From<u32>> ::frame_support::traits::Get<_I> for MaxAllowedBytes<> {
    fn get() -> _I { _I::from(Self::get()) }
}
impl ::frame_support::traits::TypedGet for MaxAllowedBytes<> {
    type Type = u32;
    fn get() -> u32 { Self::get() }
}
impl pallet_statement::Config for Runtime {
    type RuntimeEvent = RuntimeEvent;
    type Currency = Balances;
    type StatementCost = StatementCost;
    type ByteCost = StatementByteCost;
    type MinAllowedStatements = MinAllowedStatements;
    type MaxAllowedStatements = MaxAllowedStatements;
    type MinAllowedBytes = MinAllowedBytes;
    type MaxAllowedBytes = MaxAllowedBytes;
}
#[doc(hidden)]
mod sp_api_hidden_includes_construct_runtime {
    pub extern crate frame_support as hidden_include;
}
const _: () =
    {
        #[allow(unused)]
        type __hidden_use_of_unchecked_extrinsic = UncheckedExtrinsic;
    };
pub struct Runtime;
#[automatically_derived]
impl ::core::clone::Clone for Runtime {
    #[inline]
    fn clone(&self) -> Runtime { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for Runtime { }
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for Runtime { }
#[automatically_derived]
impl ::core::cmp::PartialEq for Runtime {
    #[inline]
    fn eq(&self, other: &Runtime) -> bool { true }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for Runtime { }
#[automatically_derived]
impl ::core::cmp::Eq for Runtime {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
impl core::fmt::Debug for Runtime {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        fmt.debug_tuple("Runtime").finish()
    }
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for Runtime {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("Runtime",
                                "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).composite(::scale_info::build::Fields::unit())
            }
        }
        ;
    };
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::GetNodeBlockType
    for Runtime {
    type NodeBlock = node_primitives::Block;
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::GetRuntimeBlockType
    for Runtime {
    type RuntimeBlock = Block;
}
#[doc(hidden)]
trait InternalConstructRuntime {
    #[inline(always)]
    fn runtime_metadata(&self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::vec::Vec<self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::RuntimeApiMetadataIR> {
        Default::default()
    }
}
#[doc(hidden)]
impl InternalConstructRuntime for &Runtime { }
#[allow(non_camel_case_types)]
pub enum RuntimeEvent {

    #[codec(index = 0u8)]
    System(frame_system::Event<Runtime>),

    #[codec(index = 1u8)]
    Utility(pallet_utility::Event),

    #[codec(index = 5u8)]
    Indices(pallet_indices::Event<Runtime>),

    #[codec(index = 6u8)]
    Balances(pallet_balances::Event<Runtime>),

    #[codec(index = 7u8)]
    TransactionPayment(pallet_transaction_payment::Event<Runtime>),

    #[codec(index = 8u8)]
    AssetTxPayment(pallet_asset_tx_payment::Event<Runtime>),

    #[codec(index = 9u8)]
    ElectionProviderMultiPhase(pallet_election_provider_multi_phase::Event<Runtime>),

    #[codec(index = 10u8)]
    Staking(pallet_staking::Event<Runtime>),

    #[codec(index = 11u8)]
    Session(pallet_session::Event),

    #[codec(index = 12u8)]
    Democracy(pallet_democracy::Event<Runtime>),

    #[codec(index = 13u8)]
    Council(pallet_collective::Event<Runtime, pallet_collective::Instance1>),

    #[codec(index = 14u8)]
    TechnicalCommittee(pallet_collective::Event<Runtime,
        pallet_collective::Instance2>),

    #[codec(index = 15u8)]
    Elections(pallet_elections_phragmen::Event<Runtime>),

    #[codec(index = 16u8)]
    TechnicalMembership(pallet_membership::Event<Runtime,
        pallet_membership::Instance1>),

    #[codec(index = 17u8)]
    Grandpa(pallet_grandpa::Event),

    #[codec(index = 18u8)]
    Treasury(pallet_treasury::Event<Runtime>),

    #[codec(index = 19u8)]
    AssetRate(pallet_asset_rate::Event<Runtime>),

    #[codec(index = 20u8)]
    Contracts(pallet_contracts::Event<Runtime>),

    #[codec(index = 21u8)]
    Sudo(pallet_sudo::Event<Runtime>),

    #[codec(index = 22u8)]
    ImOnline(pallet_im_online::Event<Runtime>),

    #[codec(index = 24u8)]
    Offences(pallet_offences::Event),

    #[codec(index = 27u8)]
    Identity(pallet_identity::Event<Runtime>),

    #[codec(index = 28u8)]
    Society(pallet_society::Event<Runtime>),

    #[codec(index = 29u8)]
    Recovery(pallet_recovery::Event<Runtime>),

    #[codec(index = 30u8)]
    Vesting(pallet_vesting::Event<Runtime>),

    #[codec(index = 31u8)]
    Scheduler(pallet_scheduler::Event<Runtime>),

    #[codec(index = 32u8)]
    Glutton(pallet_glutton::Event),

    #[codec(index = 33u8)]
    Preimage(pallet_preimage::Event<Runtime>),

    #[codec(index = 34u8)]
    Proxy(pallet_proxy::Event<Runtime>),

    #[codec(index = 35u8)]
    Multisig(pallet_multisig::Event<Runtime>),

    #[codec(index = 36u8)]
    Bounties(pallet_bounties::Event<Runtime>),

    #[codec(index = 37u8)]
    Tips(pallet_tips::Event<Runtime>),

    #[codec(index = 38u8)]
    Assets(pallet_assets::Event<Runtime>),

    #[codec(index = 40u8)]
    Lottery(pallet_lottery::Event<Runtime>),

    #[codec(index = 41u8)]
    Nis(pallet_nis::Event<Runtime>),

    #[codec(index = 42u8)]
    Uniques(pallet_uniques::Event<Runtime>),

    #[codec(index = 43u8)]
    Nfts(pallet_nfts::Event<Runtime>),

    #[codec(index = 44u8)]
    NftFractionalization(pallet_nft_fractionalization::Event<Runtime>),

    #[codec(index = 45u8)]
    Salary(pallet_salary::Event<Runtime>),

    #[codec(index = 46u8)]
    CoreFellowship(pallet_core_fellowship::Event<Runtime>),

    #[codec(index = 47u8)]
    TransactionStorage(pallet_transaction_storage::Event<Runtime>),

    #[codec(index = 48u8)]
    VoterList(pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>),

    #[codec(index = 49u8)]
    StateTrieMigration(pallet_state_trie_migration::Event<Runtime>),

    #[codec(index = 50u8)]
    ChildBounties(pallet_child_bounties::Event<Runtime>),

    #[codec(index = 51u8)]
    Referenda(pallet_referenda::Event<Runtime>),

    #[codec(index = 52u8)]
    Remark(pallet_remark::Event<Runtime>),

    #[codec(index = 54u8)]
    ConvictionVoting(pallet_conviction_voting::Event<Runtime>),

    #[codec(index = 55u8)]
    Whitelist(pallet_whitelist::Event<Runtime>),

    #[codec(index = 56u8)]
    AllianceMotion(pallet_collective::Event<Runtime,
        pallet_collective::Instance3>),

    #[codec(index = 57u8)]
    Alliance(pallet_alliance::Event<Runtime>),

    #[codec(index = 58u8)]
    NominationPools(pallet_nomination_pools::Event<Runtime>),

    #[codec(index = 59u8)]
    RankedPolls(pallet_referenda::Event<Runtime,
        pallet_referenda::Instance2>),

    #[codec(index = 60u8)]
    RankedCollective(pallet_ranked_collective::Event<Runtime>),

    #[codec(index = 61u8)]
    FastUnstake(pallet_fast_unstake::Event<Runtime>),

    #[codec(index = 62u8)]
    MessageQueue(pallet_message_queue::Event<Runtime>),

    #[codec(index = 63u8)]
    Pov(frame_benchmarking_pallet_pov::Event<Runtime>),

    #[codec(index = 64u8)]
    Statement(pallet_statement::Event<Runtime>),
}
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::clone::Clone for RuntimeEvent {
    #[inline]
    fn clone(&self) -> RuntimeEvent {
        match self {
            RuntimeEvent::System(__self_0) =>
                RuntimeEvent::System(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Utility(__self_0) =>
                RuntimeEvent::Utility(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Indices(__self_0) =>
                RuntimeEvent::Indices(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Balances(__self_0) =>
                RuntimeEvent::Balances(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::TransactionPayment(__self_0) =>
                RuntimeEvent::TransactionPayment(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::AssetTxPayment(__self_0) =>
                RuntimeEvent::AssetTxPayment(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::ElectionProviderMultiPhase(__self_0) =>
                RuntimeEvent::ElectionProviderMultiPhase(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Staking(__self_0) =>
                RuntimeEvent::Staking(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Session(__self_0) =>
                RuntimeEvent::Session(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Democracy(__self_0) =>
                RuntimeEvent::Democracy(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Council(__self_0) =>
                RuntimeEvent::Council(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::TechnicalCommittee(__self_0) =>
                RuntimeEvent::TechnicalCommittee(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Elections(__self_0) =>
                RuntimeEvent::Elections(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::TechnicalMembership(__self_0) =>
                RuntimeEvent::TechnicalMembership(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Grandpa(__self_0) =>
                RuntimeEvent::Grandpa(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Treasury(__self_0) =>
                RuntimeEvent::Treasury(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::AssetRate(__self_0) =>
                RuntimeEvent::AssetRate(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Contracts(__self_0) =>
                RuntimeEvent::Contracts(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Sudo(__self_0) =>
                RuntimeEvent::Sudo(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::ImOnline(__self_0) =>
                RuntimeEvent::ImOnline(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Offences(__self_0) =>
                RuntimeEvent::Offences(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Identity(__self_0) =>
                RuntimeEvent::Identity(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Society(__self_0) =>
                RuntimeEvent::Society(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Recovery(__self_0) =>
                RuntimeEvent::Recovery(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Vesting(__self_0) =>
                RuntimeEvent::Vesting(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Scheduler(__self_0) =>
                RuntimeEvent::Scheduler(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Glutton(__self_0) =>
                RuntimeEvent::Glutton(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Preimage(__self_0) =>
                RuntimeEvent::Preimage(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Proxy(__self_0) =>
                RuntimeEvent::Proxy(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Multisig(__self_0) =>
                RuntimeEvent::Multisig(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Bounties(__self_0) =>
                RuntimeEvent::Bounties(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Tips(__self_0) =>
                RuntimeEvent::Tips(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Assets(__self_0) =>
                RuntimeEvent::Assets(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Lottery(__self_0) =>
                RuntimeEvent::Lottery(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Nis(__self_0) =>
                RuntimeEvent::Nis(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Uniques(__self_0) =>
                RuntimeEvent::Uniques(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Nfts(__self_0) =>
                RuntimeEvent::Nfts(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::NftFractionalization(__self_0) =>
                RuntimeEvent::NftFractionalization(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Salary(__self_0) =>
                RuntimeEvent::Salary(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::CoreFellowship(__self_0) =>
                RuntimeEvent::CoreFellowship(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::TransactionStorage(__self_0) =>
                RuntimeEvent::TransactionStorage(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::VoterList(__self_0) =>
                RuntimeEvent::VoterList(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::StateTrieMigration(__self_0) =>
                RuntimeEvent::StateTrieMigration(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::ChildBounties(__self_0) =>
                RuntimeEvent::ChildBounties(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Referenda(__self_0) =>
                RuntimeEvent::Referenda(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Remark(__self_0) =>
                RuntimeEvent::Remark(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::ConvictionVoting(__self_0) =>
                RuntimeEvent::ConvictionVoting(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Whitelist(__self_0) =>
                RuntimeEvent::Whitelist(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::AllianceMotion(__self_0) =>
                RuntimeEvent::AllianceMotion(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Alliance(__self_0) =>
                RuntimeEvent::Alliance(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::NominationPools(__self_0) =>
                RuntimeEvent::NominationPools(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::RankedPolls(__self_0) =>
                RuntimeEvent::RankedPolls(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::RankedCollective(__self_0) =>
                RuntimeEvent::RankedCollective(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::FastUnstake(__self_0) =>
                RuntimeEvent::FastUnstake(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::MessageQueue(__self_0) =>
                RuntimeEvent::MessageQueue(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Pov(__self_0) =>
                RuntimeEvent::Pov(::core::clone::Clone::clone(__self_0)),
            RuntimeEvent::Statement(__self_0) =>
                RuntimeEvent::Statement(::core::clone::Clone::clone(__self_0)),
        }
    }
}
#[allow(non_camel_case_types)]
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeEvent { }
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::cmp::PartialEq for RuntimeEvent {
    #[inline]
    fn eq(&self, other: &RuntimeEvent) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag &&
            match (self, other) {
                (RuntimeEvent::System(__self_0),
                    RuntimeEvent::System(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Utility(__self_0),
                    RuntimeEvent::Utility(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Indices(__self_0),
                    RuntimeEvent::Indices(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Balances(__self_0),
                    RuntimeEvent::Balances(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::TransactionPayment(__self_0),
                    RuntimeEvent::TransactionPayment(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::AssetTxPayment(__self_0),
                    RuntimeEvent::AssetTxPayment(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::ElectionProviderMultiPhase(__self_0),
                    RuntimeEvent::ElectionProviderMultiPhase(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Staking(__self_0),
                    RuntimeEvent::Staking(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Session(__self_0),
                    RuntimeEvent::Session(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Democracy(__self_0),
                    RuntimeEvent::Democracy(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Council(__self_0),
                    RuntimeEvent::Council(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::TechnicalCommittee(__self_0),
                    RuntimeEvent::TechnicalCommittee(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Elections(__self_0),
                    RuntimeEvent::Elections(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::TechnicalMembership(__self_0),
                    RuntimeEvent::TechnicalMembership(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Grandpa(__self_0),
                    RuntimeEvent::Grandpa(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Treasury(__self_0),
                    RuntimeEvent::Treasury(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::AssetRate(__self_0),
                    RuntimeEvent::AssetRate(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Contracts(__self_0),
                    RuntimeEvent::Contracts(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Sudo(__self_0), RuntimeEvent::Sudo(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeEvent::ImOnline(__self_0),
                    RuntimeEvent::ImOnline(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Offences(__self_0),
                    RuntimeEvent::Offences(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Identity(__self_0),
                    RuntimeEvent::Identity(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Society(__self_0),
                    RuntimeEvent::Society(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Recovery(__self_0),
                    RuntimeEvent::Recovery(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Vesting(__self_0),
                    RuntimeEvent::Vesting(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Scheduler(__self_0),
                    RuntimeEvent::Scheduler(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Glutton(__self_0),
                    RuntimeEvent::Glutton(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Preimage(__self_0),
                    RuntimeEvent::Preimage(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Proxy(__self_0), RuntimeEvent::Proxy(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeEvent::Multisig(__self_0),
                    RuntimeEvent::Multisig(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Bounties(__self_0),
                    RuntimeEvent::Bounties(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Tips(__self_0), RuntimeEvent::Tips(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeEvent::Assets(__self_0),
                    RuntimeEvent::Assets(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Lottery(__self_0),
                    RuntimeEvent::Lottery(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Nis(__self_0), RuntimeEvent::Nis(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Uniques(__self_0),
                    RuntimeEvent::Uniques(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::Nfts(__self_0), RuntimeEvent::Nfts(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeEvent::NftFractionalization(__self_0),
                    RuntimeEvent::NftFractionalization(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Salary(__self_0),
                    RuntimeEvent::Salary(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::CoreFellowship(__self_0),
                    RuntimeEvent::CoreFellowship(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::TransactionStorage(__self_0),
                    RuntimeEvent::TransactionStorage(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::VoterList(__self_0),
                    RuntimeEvent::VoterList(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::StateTrieMigration(__self_0),
                    RuntimeEvent::StateTrieMigration(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::ChildBounties(__self_0),
                    RuntimeEvent::ChildBounties(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Referenda(__self_0),
                    RuntimeEvent::Referenda(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Remark(__self_0),
                    RuntimeEvent::Remark(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::ConvictionVoting(__self_0),
                    RuntimeEvent::ConvictionVoting(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Whitelist(__self_0),
                    RuntimeEvent::Whitelist(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::AllianceMotion(__self_0),
                    RuntimeEvent::AllianceMotion(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Alliance(__self_0),
                    RuntimeEvent::Alliance(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeEvent::NominationPools(__self_0),
                    RuntimeEvent::NominationPools(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::RankedPolls(__self_0),
                    RuntimeEvent::RankedPolls(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::RankedCollective(__self_0),
                    RuntimeEvent::RankedCollective(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::FastUnstake(__self_0),
                    RuntimeEvent::FastUnstake(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::MessageQueue(__self_0),
                    RuntimeEvent::MessageQueue(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Pov(__self_0), RuntimeEvent::Pov(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeEvent::Statement(__self_0),
                    RuntimeEvent::Statement(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                _ => unsafe { ::core::intrinsics::unreachable() }
            }
    }
}
#[allow(non_camel_case_types)]
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeEvent { }
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::cmp::Eq for RuntimeEvent {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<frame_system::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_utility::Event>;
        let _: ::core::cmp::AssertParamIsEq<pallet_indices::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_balances::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_transaction_payment::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_asset_tx_payment::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_election_provider_multi_phase::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_staking::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_session::Event>;
        let _: ::core::cmp::AssertParamIsEq<pallet_democracy::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_collective::Event<Runtime,
                pallet_collective::Instance1>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_collective::Event<Runtime,
                pallet_collective::Instance2>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_elections_phragmen::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_membership::Event<Runtime,
                pallet_membership::Instance1>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_grandpa::Event>;
        let _: ::core::cmp::AssertParamIsEq<pallet_treasury::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_asset_rate::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_contracts::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_sudo::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_im_online::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_offences::Event>;
        let _: ::core::cmp::AssertParamIsEq<pallet_identity::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_society::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_recovery::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_vesting::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_scheduler::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_glutton::Event>;
        let _: ::core::cmp::AssertParamIsEq<pallet_preimage::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_proxy::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_multisig::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_bounties::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_tips::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_assets::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_lottery::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_nis::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_uniques::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_nfts::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_nft_fractionalization::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_salary::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_core_fellowship::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_transaction_storage::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_bags_list::Event<Runtime,
                pallet_bags_list::Instance1>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_state_trie_migration::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_child_bounties::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_referenda::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_remark::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_conviction_voting::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_whitelist::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_collective::Event<Runtime,
                pallet_collective::Instance3>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_alliance::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_nomination_pools::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_referenda::Event<Runtime,
                pallet_referenda::Instance2>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_ranked_collective::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_fast_unstake::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_message_queue::Event<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<frame_benchmarking_pallet_pov::Event<Runtime>>;
        let _: ::core::cmp::AssertParamIsEq<pallet_statement::Event<Runtime>>;
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::codec::Encode for RuntimeEvent {
            fn encode_to<__CodecOutputEdqy: ::codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    RuntimeEvent::System(ref aa) => {
                        __codec_dest_edqy.push_byte(0u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Utility(ref aa) => {
                        __codec_dest_edqy.push_byte(1u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Indices(ref aa) => {
                        __codec_dest_edqy.push_byte(5u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Balances(ref aa) => {
                        __codec_dest_edqy.push_byte(6u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::TransactionPayment(ref aa) => {
                        __codec_dest_edqy.push_byte(7u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::AssetTxPayment(ref aa) => {
                        __codec_dest_edqy.push_byte(8u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::ElectionProviderMultiPhase(ref aa) => {
                        __codec_dest_edqy.push_byte(9u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Staking(ref aa) => {
                        __codec_dest_edqy.push_byte(10u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Session(ref aa) => {
                        __codec_dest_edqy.push_byte(11u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Democracy(ref aa) => {
                        __codec_dest_edqy.push_byte(12u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Council(ref aa) => {
                        __codec_dest_edqy.push_byte(13u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::TechnicalCommittee(ref aa) => {
                        __codec_dest_edqy.push_byte(14u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Elections(ref aa) => {
                        __codec_dest_edqy.push_byte(15u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::TechnicalMembership(ref aa) => {
                        __codec_dest_edqy.push_byte(16u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Grandpa(ref aa) => {
                        __codec_dest_edqy.push_byte(17u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Treasury(ref aa) => {
                        __codec_dest_edqy.push_byte(18u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::AssetRate(ref aa) => {
                        __codec_dest_edqy.push_byte(19u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Contracts(ref aa) => {
                        __codec_dest_edqy.push_byte(20u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Sudo(ref aa) => {
                        __codec_dest_edqy.push_byte(21u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::ImOnline(ref aa) => {
                        __codec_dest_edqy.push_byte(22u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Offences(ref aa) => {
                        __codec_dest_edqy.push_byte(24u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Identity(ref aa) => {
                        __codec_dest_edqy.push_byte(27u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Society(ref aa) => {
                        __codec_dest_edqy.push_byte(28u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Recovery(ref aa) => {
                        __codec_dest_edqy.push_byte(29u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Vesting(ref aa) => {
                        __codec_dest_edqy.push_byte(30u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Scheduler(ref aa) => {
                        __codec_dest_edqy.push_byte(31u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Glutton(ref aa) => {
                        __codec_dest_edqy.push_byte(32u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Preimage(ref aa) => {
                        __codec_dest_edqy.push_byte(33u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Proxy(ref aa) => {
                        __codec_dest_edqy.push_byte(34u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Multisig(ref aa) => {
                        __codec_dest_edqy.push_byte(35u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Bounties(ref aa) => {
                        __codec_dest_edqy.push_byte(36u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Tips(ref aa) => {
                        __codec_dest_edqy.push_byte(37u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Assets(ref aa) => {
                        __codec_dest_edqy.push_byte(38u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Lottery(ref aa) => {
                        __codec_dest_edqy.push_byte(40u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Nis(ref aa) => {
                        __codec_dest_edqy.push_byte(41u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Uniques(ref aa) => {
                        __codec_dest_edqy.push_byte(42u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Nfts(ref aa) => {
                        __codec_dest_edqy.push_byte(43u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::NftFractionalization(ref aa) => {
                        __codec_dest_edqy.push_byte(44u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Salary(ref aa) => {
                        __codec_dest_edqy.push_byte(45u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::CoreFellowship(ref aa) => {
                        __codec_dest_edqy.push_byte(46u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::TransactionStorage(ref aa) => {
                        __codec_dest_edqy.push_byte(47u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::VoterList(ref aa) => {
                        __codec_dest_edqy.push_byte(48u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::StateTrieMigration(ref aa) => {
                        __codec_dest_edqy.push_byte(49u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::ChildBounties(ref aa) => {
                        __codec_dest_edqy.push_byte(50u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Referenda(ref aa) => {
                        __codec_dest_edqy.push_byte(51u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Remark(ref aa) => {
                        __codec_dest_edqy.push_byte(52u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::ConvictionVoting(ref aa) => {
                        __codec_dest_edqy.push_byte(54u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Whitelist(ref aa) => {
                        __codec_dest_edqy.push_byte(55u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::AllianceMotion(ref aa) => {
                        __codec_dest_edqy.push_byte(56u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Alliance(ref aa) => {
                        __codec_dest_edqy.push_byte(57u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::NominationPools(ref aa) => {
                        __codec_dest_edqy.push_byte(58u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::RankedPolls(ref aa) => {
                        __codec_dest_edqy.push_byte(59u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::RankedCollective(ref aa) => {
                        __codec_dest_edqy.push_byte(60u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::FastUnstake(ref aa) => {
                        __codec_dest_edqy.push_byte(61u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::MessageQueue(ref aa) => {
                        __codec_dest_edqy.push_byte(62u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Pov(ref aa) => {
                        __codec_dest_edqy.push_byte(63u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeEvent::Statement(ref aa) => {
                        __codec_dest_edqy.push_byte(64u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::codec::EncodeLike for RuntimeEvent { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::codec::Decode for RuntimeEvent {
            fn decode<__CodecInputEdqy: ::codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeEvent`, failed to read variant byte"))?
                    {
                    __codec_x_edqy if
                        __codec_x_edqy == 0u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::System({
                                    let __codec_res_edqy =
                                        <frame_system::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::System.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 1u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Utility({
                                    let __codec_res_edqy =
                                        <pallet_utility::Event as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Utility.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 5u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Indices({
                                    let __codec_res_edqy =
                                        <pallet_indices::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Indices.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 6u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Balances({
                                    let __codec_res_edqy =
                                        <pallet_balances::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Balances.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 7u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::TransactionPayment({
                                    let __codec_res_edqy =
                                        <pallet_transaction_payment::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::TransactionPayment.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 8u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::AssetTxPayment({
                                    let __codec_res_edqy =
                                        <pallet_asset_tx_payment::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::AssetTxPayment.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 9u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::ElectionProviderMultiPhase({
                                    let __codec_res_edqy =
                                        <pallet_election_provider_multi_phase::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::ElectionProviderMultiPhase.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 10u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Staking({
                                    let __codec_res_edqy =
                                        <pallet_staking::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Staking.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 11u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Session({
                                    let __codec_res_edqy =
                                        <pallet_session::Event as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Session.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 12u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Democracy({
                                    let __codec_res_edqy =
                                        <pallet_democracy::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Democracy.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 13u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Council({
                                    let __codec_res_edqy =
                                        <pallet_collective::Event<Runtime,
                                                pallet_collective::Instance1> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Council.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 14u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::TechnicalCommittee({
                                    let __codec_res_edqy =
                                        <pallet_collective::Event<Runtime,
                                                pallet_collective::Instance2> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::TechnicalCommittee.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 15u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Elections({
                                    let __codec_res_edqy =
                                        <pallet_elections_phragmen::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Elections.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 16u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::TechnicalMembership({
                                    let __codec_res_edqy =
                                        <pallet_membership::Event<Runtime,
                                                pallet_membership::Instance1> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::TechnicalMembership.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 17u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Grandpa({
                                    let __codec_res_edqy =
                                        <pallet_grandpa::Event as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Grandpa.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 18u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Treasury({
                                    let __codec_res_edqy =
                                        <pallet_treasury::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Treasury.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 19u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::AssetRate({
                                    let __codec_res_edqy =
                                        <pallet_asset_rate::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::AssetRate.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 20u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Contracts({
                                    let __codec_res_edqy =
                                        <pallet_contracts::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Contracts.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 21u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Sudo({
                                    let __codec_res_edqy =
                                        <pallet_sudo::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Sudo.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 22u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::ImOnline({
                                    let __codec_res_edqy =
                                        <pallet_im_online::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::ImOnline.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 24u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Offences({
                                    let __codec_res_edqy =
                                        <pallet_offences::Event as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Offences.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 27u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Identity({
                                    let __codec_res_edqy =
                                        <pallet_identity::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Identity.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 28u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Society({
                                    let __codec_res_edqy =
                                        <pallet_society::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Society.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 29u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Recovery({
                                    let __codec_res_edqy =
                                        <pallet_recovery::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Recovery.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 30u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Vesting({
                                    let __codec_res_edqy =
                                        <pallet_vesting::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Vesting.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 31u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Scheduler({
                                    let __codec_res_edqy =
                                        <pallet_scheduler::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Scheduler.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 32u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Glutton({
                                    let __codec_res_edqy =
                                        <pallet_glutton::Event as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Glutton.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 33u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Preimage({
                                    let __codec_res_edqy =
                                        <pallet_preimage::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Preimage.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 34u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Proxy({
                                    let __codec_res_edqy =
                                        <pallet_proxy::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Proxy.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 35u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Multisig({
                                    let __codec_res_edqy =
                                        <pallet_multisig::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Multisig.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 36u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Bounties({
                                    let __codec_res_edqy =
                                        <pallet_bounties::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Bounties.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 37u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Tips({
                                    let __codec_res_edqy =
                                        <pallet_tips::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Tips.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 38u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Assets({
                                    let __codec_res_edqy =
                                        <pallet_assets::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Assets.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 40u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Lottery({
                                    let __codec_res_edqy =
                                        <pallet_lottery::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Lottery.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 41u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Nis({
                                    let __codec_res_edqy =
                                        <pallet_nis::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Nis.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 42u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Uniques({
                                    let __codec_res_edqy =
                                        <pallet_uniques::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Uniques.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 43u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Nfts({
                                    let __codec_res_edqy =
                                        <pallet_nfts::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Nfts.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 44u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::NftFractionalization({
                                    let __codec_res_edqy =
                                        <pallet_nft_fractionalization::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::NftFractionalization.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 45u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Salary({
                                    let __codec_res_edqy =
                                        <pallet_salary::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Salary.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 46u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::CoreFellowship({
                                    let __codec_res_edqy =
                                        <pallet_core_fellowship::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::CoreFellowship.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 47u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::TransactionStorage({
                                    let __codec_res_edqy =
                                        <pallet_transaction_storage::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::TransactionStorage.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 48u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::VoterList({
                                    let __codec_res_edqy =
                                        <pallet_bags_list::Event<Runtime,
                                                pallet_bags_list::Instance1> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::VoterList.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 49u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::StateTrieMigration({
                                    let __codec_res_edqy =
                                        <pallet_state_trie_migration::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::StateTrieMigration.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 50u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::ChildBounties({
                                    let __codec_res_edqy =
                                        <pallet_child_bounties::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::ChildBounties.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 51u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Referenda({
                                    let __codec_res_edqy =
                                        <pallet_referenda::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Referenda.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 52u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Remark({
                                    let __codec_res_edqy =
                                        <pallet_remark::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Remark.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 54u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::ConvictionVoting({
                                    let __codec_res_edqy =
                                        <pallet_conviction_voting::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::ConvictionVoting.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 55u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Whitelist({
                                    let __codec_res_edqy =
                                        <pallet_whitelist::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Whitelist.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 56u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::AllianceMotion({
                                    let __codec_res_edqy =
                                        <pallet_collective::Event<Runtime,
                                                pallet_collective::Instance3> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::AllianceMotion.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 57u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Alliance({
                                    let __codec_res_edqy =
                                        <pallet_alliance::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Alliance.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 58u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::NominationPools({
                                    let __codec_res_edqy =
                                        <pallet_nomination_pools::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::NominationPools.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 59u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::RankedPolls({
                                    let __codec_res_edqy =
                                        <pallet_referenda::Event<Runtime,
                                                pallet_referenda::Instance2> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::RankedPolls.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 60u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::RankedCollective({
                                    let __codec_res_edqy =
                                        <pallet_ranked_collective::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::RankedCollective.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 61u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::FastUnstake({
                                    let __codec_res_edqy =
                                        <pallet_fast_unstake::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::FastUnstake.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 62u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::MessageQueue({
                                    let __codec_res_edqy =
                                        <pallet_message_queue::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::MessageQueue.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 63u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Pov({
                                    let __codec_res_edqy =
                                        <frame_benchmarking_pallet_pov::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Pov.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 64u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeEvent::Statement({
                                    let __codec_res_edqy =
                                        <pallet_statement::Event<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeEvent::Statement.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    _ =>
                        ::core::result::Result::Err(<_ as
                                    ::core::convert::Into<_>>::into("Could not decode `RuntimeEvent`, variant doesn't exist")),
                }
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeEvent {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeEvent",
                                "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).variant(::scale_info::build::Variants::new().variant("System",
                                                                                                                                                                                                                                                        |v|
                                                                                                                                                                                                                                                            v.index(0u8 as
                                                                                                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                                        f.ty::<frame_system::Event<Runtime>>().type_name("frame_system::Event<Runtime>")))).variant("Utility",
                                                                                                                                                                                                                                                    |v|
                                                                                                                                                                                                                                                        v.index(1u8 as
                                                                                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                                    f.ty::<pallet_utility::Event>().type_name("pallet_utility::Event")))).variant("Indices",
                                                                                                                                                                                                                                                |v|
                                                                                                                                                                                                                                                    v.index(5u8 as
                                                                                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                                f.ty::<pallet_indices::Event<Runtime>>().type_name("pallet_indices::Event<Runtime>")))).variant("Balances",
                                                                                                                                                                                                                                            |v|
                                                                                                                                                                                                                                                v.index(6u8 as
                                                                                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                            f.ty::<pallet_balances::Event<Runtime>>().type_name("pallet_balances::Event<Runtime>")))).variant("TransactionPayment",
                                                                                                                                                                                                                                        |v|
                                                                                                                                                                                                                                            v.index(7u8 as
                                                                                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                        f.ty::<pallet_transaction_payment::Event<Runtime>>().type_name("pallet_transaction_payment::Event<Runtime>")))).variant("AssetTxPayment",
                                                                                                                                                                                                                                    |v|
                                                                                                                                                                                                                                        v.index(8u8 as
                                                                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                    f.ty::<pallet_asset_tx_payment::Event<Runtime>>().type_name("pallet_asset_tx_payment::Event<Runtime>")))).variant("ElectionProviderMultiPhase",
                                                                                                                                                                                                                                |v|
                                                                                                                                                                                                                                    v.index(9u8 as
                                                                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                f.ty::<pallet_election_provider_multi_phase::Event<Runtime>>().type_name("pallet_election_provider_multi_phase::Event<Runtime>")))).variant("Staking",
                                                                                                                                                                                                                            |v|
                                                                                                                                                                                                                                v.index(10u8 as
                                                                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                            f.ty::<pallet_staking::Event<Runtime>>().type_name("pallet_staking::Event<Runtime>")))).variant("Session",
                                                                                                                                                                                                                        |v|
                                                                                                                                                                                                                            v.index(11u8 as
                                                                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                        f.ty::<pallet_session::Event>().type_name("pallet_session::Event")))).variant("Democracy",
                                                                                                                                                                                                                    |v|
                                                                                                                                                                                                                        v.index(12u8 as
                                                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                    f.ty::<pallet_democracy::Event<Runtime>>().type_name("pallet_democracy::Event<Runtime>")))).variant("Council",
                                                                                                                                                                                                                |v|
                                                                                                                                                                                                                    v.index(13u8 as
                                                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                f.ty::<pallet_collective::Event<Runtime,
                                                                                                                                                                                                                                        pallet_collective::Instance1>>().type_name("pallet_collective::Event<Runtime, pallet_collective::Instance1>")))).variant("TechnicalCommittee",
                                                                                                                                                                                                            |v|
                                                                                                                                                                                                                v.index(14u8 as
                                                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                            f.ty::<pallet_collective::Event<Runtime,
                                                                                                                                                                                                                                    pallet_collective::Instance2>>().type_name("pallet_collective::Event<Runtime, pallet_collective::Instance2>")))).variant("Elections",
                                                                                                                                                                                                        |v|
                                                                                                                                                                                                            v.index(15u8 as
                                                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                        f.ty::<pallet_elections_phragmen::Event<Runtime>>().type_name("pallet_elections_phragmen::Event<Runtime>")))).variant("TechnicalMembership",
                                                                                                                                                                                                    |v|
                                                                                                                                                                                                        v.index(16u8 as
                                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                    f.ty::<pallet_membership::Event<Runtime,
                                                                                                                                                                                                                            pallet_membership::Instance1>>().type_name("pallet_membership::Event<Runtime, pallet_membership::Instance1>")))).variant("Grandpa",
                                                                                                                                                                                                |v|
                                                                                                                                                                                                    v.index(17u8 as
                                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                f.ty::<pallet_grandpa::Event>().type_name("pallet_grandpa::Event")))).variant("Treasury",
                                                                                                                                                                                            |v|
                                                                                                                                                                                                v.index(18u8 as
                                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                            f.ty::<pallet_treasury::Event<Runtime>>().type_name("pallet_treasury::Event<Runtime>")))).variant("AssetRate",
                                                                                                                                                                                        |v|
                                                                                                                                                                                            v.index(19u8 as
                                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                        f.ty::<pallet_asset_rate::Event<Runtime>>().type_name("pallet_asset_rate::Event<Runtime>")))).variant("Contracts",
                                                                                                                                                                                    |v|
                                                                                                                                                                                        v.index(20u8 as
                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                    f.ty::<pallet_contracts::Event<Runtime>>().type_name("pallet_contracts::Event<Runtime>")))).variant("Sudo",
                                                                                                                                                                                |v|
                                                                                                                                                                                    v.index(21u8 as
                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                f.ty::<pallet_sudo::Event<Runtime>>().type_name("pallet_sudo::Event<Runtime>")))).variant("ImOnline",
                                                                                                                                                                            |v|
                                                                                                                                                                                v.index(22u8 as
                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                            f.ty::<pallet_im_online::Event<Runtime>>().type_name("pallet_im_online::Event<Runtime>")))).variant("Offences",
                                                                                                                                                                        |v|
                                                                                                                                                                            v.index(24u8 as
                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                        f.ty::<pallet_offences::Event>().type_name("pallet_offences::Event")))).variant("Identity",
                                                                                                                                                                    |v|
                                                                                                                                                                        v.index(27u8 as
                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                    f.ty::<pallet_identity::Event<Runtime>>().type_name("pallet_identity::Event<Runtime>")))).variant("Society",
                                                                                                                                                                |v|
                                                                                                                                                                    v.index(28u8 as
                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                f.ty::<pallet_society::Event<Runtime>>().type_name("pallet_society::Event<Runtime>")))).variant("Recovery",
                                                                                                                                                            |v|
                                                                                                                                                                v.index(29u8 as
                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                            f.ty::<pallet_recovery::Event<Runtime>>().type_name("pallet_recovery::Event<Runtime>")))).variant("Vesting",
                                                                                                                                                        |v|
                                                                                                                                                            v.index(30u8 as
                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                        f.ty::<pallet_vesting::Event<Runtime>>().type_name("pallet_vesting::Event<Runtime>")))).variant("Scheduler",
                                                                                                                                                    |v|
                                                                                                                                                        v.index(31u8 as
                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                    f.ty::<pallet_scheduler::Event<Runtime>>().type_name("pallet_scheduler::Event<Runtime>")))).variant("Glutton",
                                                                                                                                                |v|
                                                                                                                                                    v.index(32u8 as
                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                f.ty::<pallet_glutton::Event>().type_name("pallet_glutton::Event")))).variant("Preimage",
                                                                                                                                            |v|
                                                                                                                                                v.index(33u8 as
                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                            f.ty::<pallet_preimage::Event<Runtime>>().type_name("pallet_preimage::Event<Runtime>")))).variant("Proxy",
                                                                                                                                        |v|
                                                                                                                                            v.index(34u8 as
                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                        f.ty::<pallet_proxy::Event<Runtime>>().type_name("pallet_proxy::Event<Runtime>")))).variant("Multisig",
                                                                                                                                    |v|
                                                                                                                                        v.index(35u8 as
                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                    f.ty::<pallet_multisig::Event<Runtime>>().type_name("pallet_multisig::Event<Runtime>")))).variant("Bounties",
                                                                                                                                |v|
                                                                                                                                    v.index(36u8 as
                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                f.ty::<pallet_bounties::Event<Runtime>>().type_name("pallet_bounties::Event<Runtime>")))).variant("Tips",
                                                                                                                            |v|
                                                                                                                                v.index(37u8 as
                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                            f.ty::<pallet_tips::Event<Runtime>>().type_name("pallet_tips::Event<Runtime>")))).variant("Assets",
                                                                                                                        |v|
                                                                                                                            v.index(38u8 as
                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                        f.ty::<pallet_assets::Event<Runtime>>().type_name("pallet_assets::Event<Runtime>")))).variant("Lottery",
                                                                                                                    |v|
                                                                                                                        v.index(40u8 as
                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                    f.ty::<pallet_lottery::Event<Runtime>>().type_name("pallet_lottery::Event<Runtime>")))).variant("Nis",
                                                                                                                |v|
                                                                                                                    v.index(41u8 as
                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                f.ty::<pallet_nis::Event<Runtime>>().type_name("pallet_nis::Event<Runtime>")))).variant("Uniques",
                                                                                                            |v|
                                                                                                                v.index(42u8 as
                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                            f.ty::<pallet_uniques::Event<Runtime>>().type_name("pallet_uniques::Event<Runtime>")))).variant("Nfts",
                                                                                                        |v|
                                                                                                            v.index(43u8 as
                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                        f.ty::<pallet_nfts::Event<Runtime>>().type_name("pallet_nfts::Event<Runtime>")))).variant("NftFractionalization",
                                                                                                    |v|
                                                                                                        v.index(44u8 as
                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                    f.ty::<pallet_nft_fractionalization::Event<Runtime>>().type_name("pallet_nft_fractionalization::Event<Runtime>")))).variant("Salary",
                                                                                                |v|
                                                                                                    v.index(45u8 as
                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                f.ty::<pallet_salary::Event<Runtime>>().type_name("pallet_salary::Event<Runtime>")))).variant("CoreFellowship",
                                                                                            |v|
                                                                                                v.index(46u8 as
                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                            f.ty::<pallet_core_fellowship::Event<Runtime>>().type_name("pallet_core_fellowship::Event<Runtime>")))).variant("TransactionStorage",
                                                                                        |v|
                                                                                            v.index(47u8 as
                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                        f.ty::<pallet_transaction_storage::Event<Runtime>>().type_name("pallet_transaction_storage::Event<Runtime>")))).variant("VoterList",
                                                                                    |v|
                                                                                        v.index(48u8 as
                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                    f.ty::<pallet_bags_list::Event<Runtime,
                                                                                                            pallet_bags_list::Instance1>>().type_name("pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>")))).variant("StateTrieMigration",
                                                                                |v|
                                                                                    v.index(49u8 as
                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                f.ty::<pallet_state_trie_migration::Event<Runtime>>().type_name("pallet_state_trie_migration::Event<Runtime>")))).variant("ChildBounties",
                                                                            |v|
                                                                                v.index(50u8 as
                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                            f.ty::<pallet_child_bounties::Event<Runtime>>().type_name("pallet_child_bounties::Event<Runtime>")))).variant("Referenda",
                                                                        |v|
                                                                            v.index(51u8 as
                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                        f.ty::<pallet_referenda::Event<Runtime>>().type_name("pallet_referenda::Event<Runtime>")))).variant("Remark",
                                                                    |v|
                                                                        v.index(52u8 as
                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                    f.ty::<pallet_remark::Event<Runtime>>().type_name("pallet_remark::Event<Runtime>")))).variant("ConvictionVoting",
                                                                |v|
                                                                    v.index(54u8 as
                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                f.ty::<pallet_conviction_voting::Event<Runtime>>().type_name("pallet_conviction_voting::Event<Runtime>")))).variant("Whitelist",
                                                            |v|
                                                                v.index(55u8 as
                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                            f.ty::<pallet_whitelist::Event<Runtime>>().type_name("pallet_whitelist::Event<Runtime>")))).variant("AllianceMotion",
                                                        |v|
                                                            v.index(56u8 as
                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                        f.ty::<pallet_collective::Event<Runtime,
                                                                                pallet_collective::Instance3>>().type_name("pallet_collective::Event<Runtime, pallet_collective::Instance3>")))).variant("Alliance",
                                                    |v|
                                                        v.index(57u8 as
                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                    f.ty::<pallet_alliance::Event<Runtime>>().type_name("pallet_alliance::Event<Runtime>")))).variant("NominationPools",
                                                |v|
                                                    v.index(58u8 as
                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                f.ty::<pallet_nomination_pools::Event<Runtime>>().type_name("pallet_nomination_pools::Event<Runtime>")))).variant("RankedPolls",
                                            |v|
                                                v.index(59u8 as
                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                            f.ty::<pallet_referenda::Event<Runtime,
                                                                    pallet_referenda::Instance2>>().type_name("pallet_referenda::Event<Runtime, pallet_referenda::Instance2>")))).variant("RankedCollective",
                                        |v|
                                            v.index(60u8 as
                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                        f.ty::<pallet_ranked_collective::Event<Runtime>>().type_name("pallet_ranked_collective::Event<Runtime>")))).variant("FastUnstake",
                                    |v|
                                        v.index(61u8 as
                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                    f.ty::<pallet_fast_unstake::Event<Runtime>>().type_name("pallet_fast_unstake::Event<Runtime>")))).variant("MessageQueue",
                                |v|
                                    v.index(62u8 as
                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                f.ty::<pallet_message_queue::Event<Runtime>>().type_name("pallet_message_queue::Event<Runtime>")))).variant("Pov",
                            |v|
                                v.index(63u8 as
                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                            f.ty::<frame_benchmarking_pallet_pov::Event<Runtime>>().type_name("frame_benchmarking_pallet_pov::Event<Runtime>")))).variant("Statement",
                        |v|
                            v.index(64u8 as
                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                        f.ty::<pallet_statement::Event<Runtime>>().type_name("pallet_statement::Event<Runtime>")))))
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeEvent {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::System(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::System").field(a0).finish(),
            Self::Utility(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Utility").field(a0).finish(),
            Self::Indices(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Indices").field(a0).finish(),
            Self::Balances(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Balances").field(a0).finish(),
            Self::TransactionPayment(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::TransactionPayment").field(a0).finish(),
            Self::AssetTxPayment(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::AssetTxPayment").field(a0).finish(),
            Self::ElectionProviderMultiPhase(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::ElectionProviderMultiPhase").field(a0).finish(),
            Self::Staking(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Staking").field(a0).finish(),
            Self::Session(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Session").field(a0).finish(),
            Self::Democracy(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Democracy").field(a0).finish(),
            Self::Council(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Council").field(a0).finish(),
            Self::TechnicalCommittee(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::TechnicalCommittee").field(a0).finish(),
            Self::Elections(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Elections").field(a0).finish(),
            Self::TechnicalMembership(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::TechnicalMembership").field(a0).finish(),
            Self::Grandpa(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Grandpa").field(a0).finish(),
            Self::Treasury(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Treasury").field(a0).finish(),
            Self::AssetRate(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::AssetRate").field(a0).finish(),
            Self::Contracts(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Contracts").field(a0).finish(),
            Self::Sudo(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Sudo").field(a0).finish(),
            Self::ImOnline(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::ImOnline").field(a0).finish(),
            Self::Offences(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Offences").field(a0).finish(),
            Self::Identity(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Identity").field(a0).finish(),
            Self::Society(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Society").field(a0).finish(),
            Self::Recovery(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Recovery").field(a0).finish(),
            Self::Vesting(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Vesting").field(a0).finish(),
            Self::Scheduler(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Scheduler").field(a0).finish(),
            Self::Glutton(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Glutton").field(a0).finish(),
            Self::Preimage(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Preimage").field(a0).finish(),
            Self::Proxy(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Proxy").field(a0).finish(),
            Self::Multisig(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Multisig").field(a0).finish(),
            Self::Bounties(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Bounties").field(a0).finish(),
            Self::Tips(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Tips").field(a0).finish(),
            Self::Assets(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Assets").field(a0).finish(),
            Self::Lottery(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Lottery").field(a0).finish(),
            Self::Nis(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Nis").field(a0).finish(),
            Self::Uniques(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Uniques").field(a0).finish(),
            Self::Nfts(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Nfts").field(a0).finish(),
            Self::NftFractionalization(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::NftFractionalization").field(a0).finish(),
            Self::Salary(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Salary").field(a0).finish(),
            Self::CoreFellowship(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::CoreFellowship").field(a0).finish(),
            Self::TransactionStorage(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::TransactionStorage").field(a0).finish(),
            Self::VoterList(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::VoterList").field(a0).finish(),
            Self::StateTrieMigration(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::StateTrieMigration").field(a0).finish(),
            Self::ChildBounties(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::ChildBounties").field(a0).finish(),
            Self::Referenda(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Referenda").field(a0).finish(),
            Self::Remark(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Remark").field(a0).finish(),
            Self::ConvictionVoting(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::ConvictionVoting").field(a0).finish(),
            Self::Whitelist(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Whitelist").field(a0).finish(),
            Self::AllianceMotion(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::AllianceMotion").field(a0).finish(),
            Self::Alliance(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Alliance").field(a0).finish(),
            Self::NominationPools(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::NominationPools").field(a0).finish(),
            Self::RankedPolls(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::RankedPolls").field(a0).finish(),
            Self::RankedCollective(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::RankedCollective").field(a0).finish(),
            Self::FastUnstake(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::FastUnstake").field(a0).finish(),
            Self::MessageQueue(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::MessageQueue").field(a0).finish(),
            Self::Pov(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Pov").field(a0).finish(),
            Self::Statement(ref a0) =>
                fmt.debug_tuple("RuntimeEvent::Statement").field(a0).finish(),
            _ => Ok(()),
        }
    }
}
impl From<frame_system::Event<Runtime>> for RuntimeEvent {
    fn from(x: frame_system::Event<Runtime>) -> Self {
        RuntimeEvent::System(x)
    }
}
impl TryInto<frame_system::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<frame_system::Event<Runtime>,
            Self::Error> {
        match self { Self::System(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_utility::Event> for RuntimeEvent {
    fn from(x: pallet_utility::Event) -> Self { RuntimeEvent::Utility(x) }
}
impl TryInto<pallet_utility::Event> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_utility::Event,
            Self::Error> {
        match self { Self::Utility(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_indices::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_indices::Event<Runtime>) -> Self {
        RuntimeEvent::Indices(x)
    }
}
impl TryInto<pallet_indices::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_indices::Event<Runtime>,
            Self::Error> {
        match self { Self::Indices(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_balances::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_balances::Event<Runtime>) -> Self {
        RuntimeEvent::Balances(x)
    }
}
impl TryInto<pallet_balances::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_balances::Event<Runtime>,
            Self::Error> {
        match self { Self::Balances(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_transaction_payment::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_transaction_payment::Event<Runtime>) -> Self {
        RuntimeEvent::TransactionPayment(x)
    }
}
impl TryInto<pallet_transaction_payment::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_transaction_payment::Event<Runtime>,
            Self::Error> {
        match self { Self::TransactionPayment(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_asset_tx_payment::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_asset_tx_payment::Event<Runtime>) -> Self {
        RuntimeEvent::AssetTxPayment(x)
    }
}
impl TryInto<pallet_asset_tx_payment::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_asset_tx_payment::Event<Runtime>,
            Self::Error> {
        match self { Self::AssetTxPayment(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_election_provider_multi_phase::Event<Runtime>> for
    RuntimeEvent {
    fn from(x: pallet_election_provider_multi_phase::Event<Runtime>) -> Self {
        RuntimeEvent::ElectionProviderMultiPhase(x)
    }
}
impl TryInto<pallet_election_provider_multi_phase::Event<Runtime>> for
    RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_election_provider_multi_phase::Event<Runtime>,
            Self::Error> {
        match self {
            Self::ElectionProviderMultiPhase(evt) => Ok(evt),
            _ => Err(()),
        }
    }
}
impl From<pallet_staking::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_staking::Event<Runtime>) -> Self {
        RuntimeEvent::Staking(x)
    }
}
impl TryInto<pallet_staking::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_staking::Event<Runtime>,
            Self::Error> {
        match self { Self::Staking(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_session::Event> for RuntimeEvent {
    fn from(x: pallet_session::Event) -> Self { RuntimeEvent::Session(x) }
}
impl TryInto<pallet_session::Event> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_session::Event,
            Self::Error> {
        match self { Self::Session(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_democracy::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_democracy::Event<Runtime>) -> Self {
        RuntimeEvent::Democracy(x)
    }
}
impl TryInto<pallet_democracy::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_democracy::Event<Runtime>,
            Self::Error> {
        match self { Self::Democracy(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_collective::Event<Runtime, pallet_collective::Instance1>> for
    RuntimeEvent {
    fn from(x:
            pallet_collective::Event<Runtime, pallet_collective::Instance1>)
        -> Self {
        RuntimeEvent::Council(x)
    }
}
impl TryInto<pallet_collective::Event<Runtime, pallet_collective::Instance1>>
    for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_collective::Event<Runtime,
            pallet_collective::Instance1>, Self::Error> {
        match self { Self::Council(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_collective::Event<Runtime, pallet_collective::Instance2>> for
    RuntimeEvent {
    fn from(x:
            pallet_collective::Event<Runtime, pallet_collective::Instance2>)
        -> Self {
        RuntimeEvent::TechnicalCommittee(x)
    }
}
impl TryInto<pallet_collective::Event<Runtime, pallet_collective::Instance2>>
    for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_collective::Event<Runtime,
            pallet_collective::Instance2>, Self::Error> {
        match self { Self::TechnicalCommittee(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_elections_phragmen::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_elections_phragmen::Event<Runtime>) -> Self {
        RuntimeEvent::Elections(x)
    }
}
impl TryInto<pallet_elections_phragmen::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_elections_phragmen::Event<Runtime>,
            Self::Error> {
        match self { Self::Elections(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_membership::Event<Runtime, pallet_membership::Instance1>> for
    RuntimeEvent {
    fn from(x:
            pallet_membership::Event<Runtime, pallet_membership::Instance1>)
        -> Self {
        RuntimeEvent::TechnicalMembership(x)
    }
}
impl TryInto<pallet_membership::Event<Runtime, pallet_membership::Instance1>>
    for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_membership::Event<Runtime,
            pallet_membership::Instance1>, Self::Error> {
        match self {
            Self::TechnicalMembership(evt) => Ok(evt),
            _ => Err(()),
        }
    }
}
impl From<pallet_grandpa::Event> for RuntimeEvent {
    fn from(x: pallet_grandpa::Event) -> Self { RuntimeEvent::Grandpa(x) }
}
impl TryInto<pallet_grandpa::Event> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_grandpa::Event,
            Self::Error> {
        match self { Self::Grandpa(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_treasury::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_treasury::Event<Runtime>) -> Self {
        RuntimeEvent::Treasury(x)
    }
}
impl TryInto<pallet_treasury::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_treasury::Event<Runtime>,
            Self::Error> {
        match self { Self::Treasury(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_asset_rate::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_asset_rate::Event<Runtime>) -> Self {
        RuntimeEvent::AssetRate(x)
    }
}
impl TryInto<pallet_asset_rate::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_asset_rate::Event<Runtime>,
            Self::Error> {
        match self { Self::AssetRate(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_contracts::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_contracts::Event<Runtime>) -> Self {
        RuntimeEvent::Contracts(x)
    }
}
impl TryInto<pallet_contracts::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_contracts::Event<Runtime>,
            Self::Error> {
        match self { Self::Contracts(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_sudo::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_sudo::Event<Runtime>) -> Self { RuntimeEvent::Sudo(x) }
}
impl TryInto<pallet_sudo::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_sudo::Event<Runtime>,
            Self::Error> {
        match self { Self::Sudo(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_im_online::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_im_online::Event<Runtime>) -> Self {
        RuntimeEvent::ImOnline(x)
    }
}
impl TryInto<pallet_im_online::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_im_online::Event<Runtime>,
            Self::Error> {
        match self { Self::ImOnline(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_offences::Event> for RuntimeEvent {
    fn from(x: pallet_offences::Event) -> Self { RuntimeEvent::Offences(x) }
}
impl TryInto<pallet_offences::Event> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_offences::Event,
            Self::Error> {
        match self { Self::Offences(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_identity::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_identity::Event<Runtime>) -> Self {
        RuntimeEvent::Identity(x)
    }
}
impl TryInto<pallet_identity::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_identity::Event<Runtime>,
            Self::Error> {
        match self { Self::Identity(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_society::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_society::Event<Runtime>) -> Self {
        RuntimeEvent::Society(x)
    }
}
impl TryInto<pallet_society::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_society::Event<Runtime>,
            Self::Error> {
        match self { Self::Society(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_recovery::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_recovery::Event<Runtime>) -> Self {
        RuntimeEvent::Recovery(x)
    }
}
impl TryInto<pallet_recovery::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_recovery::Event<Runtime>,
            Self::Error> {
        match self { Self::Recovery(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_vesting::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_vesting::Event<Runtime>) -> Self {
        RuntimeEvent::Vesting(x)
    }
}
impl TryInto<pallet_vesting::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_vesting::Event<Runtime>,
            Self::Error> {
        match self { Self::Vesting(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_scheduler::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_scheduler::Event<Runtime>) -> Self {
        RuntimeEvent::Scheduler(x)
    }
}
impl TryInto<pallet_scheduler::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_scheduler::Event<Runtime>,
            Self::Error> {
        match self { Self::Scheduler(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_glutton::Event> for RuntimeEvent {
    fn from(x: pallet_glutton::Event) -> Self { RuntimeEvent::Glutton(x) }
}
impl TryInto<pallet_glutton::Event> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_glutton::Event,
            Self::Error> {
        match self { Self::Glutton(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_preimage::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_preimage::Event<Runtime>) -> Self {
        RuntimeEvent::Preimage(x)
    }
}
impl TryInto<pallet_preimage::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_preimage::Event<Runtime>,
            Self::Error> {
        match self { Self::Preimage(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_proxy::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_proxy::Event<Runtime>) -> Self {
        RuntimeEvent::Proxy(x)
    }
}
impl TryInto<pallet_proxy::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_proxy::Event<Runtime>,
            Self::Error> {
        match self { Self::Proxy(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_multisig::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_multisig::Event<Runtime>) -> Self {
        RuntimeEvent::Multisig(x)
    }
}
impl TryInto<pallet_multisig::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_multisig::Event<Runtime>,
            Self::Error> {
        match self { Self::Multisig(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_bounties::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_bounties::Event<Runtime>) -> Self {
        RuntimeEvent::Bounties(x)
    }
}
impl TryInto<pallet_bounties::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_bounties::Event<Runtime>,
            Self::Error> {
        match self { Self::Bounties(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_tips::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_tips::Event<Runtime>) -> Self { RuntimeEvent::Tips(x) }
}
impl TryInto<pallet_tips::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_tips::Event<Runtime>,
            Self::Error> {
        match self { Self::Tips(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_assets::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_assets::Event<Runtime>) -> Self {
        RuntimeEvent::Assets(x)
    }
}
impl TryInto<pallet_assets::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_assets::Event<Runtime>,
            Self::Error> {
        match self { Self::Assets(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_lottery::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_lottery::Event<Runtime>) -> Self {
        RuntimeEvent::Lottery(x)
    }
}
impl TryInto<pallet_lottery::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_lottery::Event<Runtime>,
            Self::Error> {
        match self { Self::Lottery(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_nis::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_nis::Event<Runtime>) -> Self { RuntimeEvent::Nis(x) }
}
impl TryInto<pallet_nis::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_nis::Event<Runtime>,
            Self::Error> {
        match self { Self::Nis(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_uniques::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_uniques::Event<Runtime>) -> Self {
        RuntimeEvent::Uniques(x)
    }
}
impl TryInto<pallet_uniques::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_uniques::Event<Runtime>,
            Self::Error> {
        match self { Self::Uniques(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_nfts::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_nfts::Event<Runtime>) -> Self { RuntimeEvent::Nfts(x) }
}
impl TryInto<pallet_nfts::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_nfts::Event<Runtime>,
            Self::Error> {
        match self { Self::Nfts(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_nft_fractionalization::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_nft_fractionalization::Event<Runtime>) -> Self {
        RuntimeEvent::NftFractionalization(x)
    }
}
impl TryInto<pallet_nft_fractionalization::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_nft_fractionalization::Event<Runtime>,
            Self::Error> {
        match self {
            Self::NftFractionalization(evt) => Ok(evt),
            _ => Err(()),
        }
    }
}
impl From<pallet_salary::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_salary::Event<Runtime>) -> Self {
        RuntimeEvent::Salary(x)
    }
}
impl TryInto<pallet_salary::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_salary::Event<Runtime>,
            Self::Error> {
        match self { Self::Salary(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_core_fellowship::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_core_fellowship::Event<Runtime>) -> Self {
        RuntimeEvent::CoreFellowship(x)
    }
}
impl TryInto<pallet_core_fellowship::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_core_fellowship::Event<Runtime>,
            Self::Error> {
        match self { Self::CoreFellowship(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_transaction_storage::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_transaction_storage::Event<Runtime>) -> Self {
        RuntimeEvent::TransactionStorage(x)
    }
}
impl TryInto<pallet_transaction_storage::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_transaction_storage::Event<Runtime>,
            Self::Error> {
        match self { Self::TransactionStorage(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>> for
    RuntimeEvent {
    fn from(x: pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>)
        -> Self {
        RuntimeEvent::VoterList(x)
    }
}
impl TryInto<pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>>
    for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_bags_list::Event<Runtime,
            pallet_bags_list::Instance1>, Self::Error> {
        match self { Self::VoterList(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_state_trie_migration::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_state_trie_migration::Event<Runtime>) -> Self {
        RuntimeEvent::StateTrieMigration(x)
    }
}
impl TryInto<pallet_state_trie_migration::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_state_trie_migration::Event<Runtime>,
            Self::Error> {
        match self { Self::StateTrieMigration(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_child_bounties::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_child_bounties::Event<Runtime>) -> Self {
        RuntimeEvent::ChildBounties(x)
    }
}
impl TryInto<pallet_child_bounties::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_child_bounties::Event<Runtime>,
            Self::Error> {
        match self { Self::ChildBounties(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_referenda::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_referenda::Event<Runtime>) -> Self {
        RuntimeEvent::Referenda(x)
    }
}
impl TryInto<pallet_referenda::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_referenda::Event<Runtime>,
            Self::Error> {
        match self { Self::Referenda(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_remark::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_remark::Event<Runtime>) -> Self {
        RuntimeEvent::Remark(x)
    }
}
impl TryInto<pallet_remark::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_remark::Event<Runtime>,
            Self::Error> {
        match self { Self::Remark(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_conviction_voting::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_conviction_voting::Event<Runtime>) -> Self {
        RuntimeEvent::ConvictionVoting(x)
    }
}
impl TryInto<pallet_conviction_voting::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_conviction_voting::Event<Runtime>,
            Self::Error> {
        match self { Self::ConvictionVoting(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_whitelist::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_whitelist::Event<Runtime>) -> Self {
        RuntimeEvent::Whitelist(x)
    }
}
impl TryInto<pallet_whitelist::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_whitelist::Event<Runtime>,
            Self::Error> {
        match self { Self::Whitelist(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_collective::Event<Runtime, pallet_collective::Instance3>> for
    RuntimeEvent {
    fn from(x:
            pallet_collective::Event<Runtime, pallet_collective::Instance3>)
        -> Self {
        RuntimeEvent::AllianceMotion(x)
    }
}
impl TryInto<pallet_collective::Event<Runtime, pallet_collective::Instance3>>
    for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_collective::Event<Runtime,
            pallet_collective::Instance3>, Self::Error> {
        match self { Self::AllianceMotion(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_alliance::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_alliance::Event<Runtime>) -> Self {
        RuntimeEvent::Alliance(x)
    }
}
impl TryInto<pallet_alliance::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_alliance::Event<Runtime>,
            Self::Error> {
        match self { Self::Alliance(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_nomination_pools::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_nomination_pools::Event<Runtime>) -> Self {
        RuntimeEvent::NominationPools(x)
    }
}
impl TryInto<pallet_nomination_pools::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_nomination_pools::Event<Runtime>,
            Self::Error> {
        match self { Self::NominationPools(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_referenda::Event<Runtime, pallet_referenda::Instance2>> for
    RuntimeEvent {
    fn from(x: pallet_referenda::Event<Runtime, pallet_referenda::Instance2>)
        -> Self {
        RuntimeEvent::RankedPolls(x)
    }
}
impl TryInto<pallet_referenda::Event<Runtime, pallet_referenda::Instance2>>
    for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_referenda::Event<Runtime,
            pallet_referenda::Instance2>, Self::Error> {
        match self { Self::RankedPolls(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_ranked_collective::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_ranked_collective::Event<Runtime>) -> Self {
        RuntimeEvent::RankedCollective(x)
    }
}
impl TryInto<pallet_ranked_collective::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_ranked_collective::Event<Runtime>,
            Self::Error> {
        match self { Self::RankedCollective(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_fast_unstake::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_fast_unstake::Event<Runtime>) -> Self {
        RuntimeEvent::FastUnstake(x)
    }
}
impl TryInto<pallet_fast_unstake::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_fast_unstake::Event<Runtime>,
            Self::Error> {
        match self { Self::FastUnstake(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_message_queue::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_message_queue::Event<Runtime>) -> Self {
        RuntimeEvent::MessageQueue(x)
    }
}
impl TryInto<pallet_message_queue::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_message_queue::Event<Runtime>,
            Self::Error> {
        match self { Self::MessageQueue(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<frame_benchmarking_pallet_pov::Event<Runtime>> for RuntimeEvent {
    fn from(x: frame_benchmarking_pallet_pov::Event<Runtime>) -> Self {
        RuntimeEvent::Pov(x)
    }
}
impl TryInto<frame_benchmarking_pallet_pov::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<frame_benchmarking_pallet_pov::Event<Runtime>,
            Self::Error> {
        match self { Self::Pov(evt) => Ok(evt), _ => Err(()), }
    }
}
impl From<pallet_statement::Event<Runtime>> for RuntimeEvent {
    fn from(x: pallet_statement::Event<Runtime>) -> Self {
        RuntimeEvent::Statement(x)
    }
}
impl TryInto<pallet_statement::Event<Runtime>> for RuntimeEvent {
    type Error = ();
    fn try_into(self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_statement::Event<Runtime>,
            Self::Error> {
        match self { Self::Statement(evt) => Ok(evt), _ => Err(()), }
    }
}
#[doc = r" The runtime origin type representing the origin of a call."]
#[doc = r""]
#[doc =
" Origin is always created with the base filter configured in [`frame_system::Config::BaseCallFilter`]."]
pub struct RuntimeOrigin {
    caller: OriginCaller,
    filter: self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::rc::Rc<Box<dyn Fn(&<Runtime
    as frame_system::Config>::RuntimeCall) -> bool>>,
}
#[automatically_derived]
impl ::core::clone::Clone for RuntimeOrigin {
    #[inline]
    fn clone(&self) -> RuntimeOrigin {
        RuntimeOrigin {
            caller: ::core::clone::Clone::clone(&self.caller),
            filter: ::core::clone::Clone::clone(&self.filter),
        }
    }
}
#[cfg(feature = "std")]
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::fmt::Debug
    for RuntimeOrigin {
    fn fmt(&self,
        fmt:
            &mut self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::fmt::Formatter)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<(),
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::fmt::Error> {
        fmt.debug_struct("Origin").field("caller",
                    &self.caller).field("filter", &"[function ptr]").finish()
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait
    for RuntimeOrigin {
    type Call = <Runtime as frame_system::Config>::RuntimeCall;
    type PalletsOrigin = OriginCaller;
    type AccountId = <Runtime as frame_system::Config>::AccountId;
    fn add_filter(&mut self, filter: impl Fn(&Self::Call) -> bool + 'static) {
        let f = self.filter.clone();
        self.filter =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::rc::Rc::new(Box::new(move
                        |call| { f(call) && filter(call) }));
    }
    fn reset_filter(&mut self) {
        let filter =
            <<Runtime as frame_system::Config>::BaseCallFilter as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::Contains<<Runtime
                as frame_system::Config>::RuntimeCall>>::contains;
        self.filter =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::rc::Rc::new(Box::new(filter));
    }
    fn set_caller_from(&mut self, other: impl Into<Self>) {
        self.caller = other.into().caller;
    }
    fn filter_call(&self, call: &Self::Call) -> bool {
        match self.caller {
            OriginCaller::system(frame_system::Origin::<Runtime>::Root) =>
                true,
            _ => (self.filter)(call),
        }
    }
    fn caller(&self) -> &Self::PalletsOrigin { &self.caller }
    fn into_caller(self) -> Self::PalletsOrigin { self.caller }
    fn try_with_caller<R>(mut self,
        f: impl FnOnce(Self::PalletsOrigin) -> Result<R, Self::PalletsOrigin>)
        -> Result<R, Self> {
        match f(self.caller) {
            Ok(r) => Ok(r),
            Err(caller) => { self.caller = caller; Err(self) }
        }
    }
    fn none() -> Self { frame_system::RawOrigin::None.into() }
    fn root() -> Self { frame_system::RawOrigin::Root.into() }
    fn signed(by: Self::AccountId) -> Self {
        frame_system::RawOrigin::Signed(by).into()
    }
}
#[allow(non_camel_case_types)]
pub enum OriginCaller {

    #[codec(index = 0u8)]
    system(frame_system::Origin<Runtime>),

    #[codec(index = 13u8)]
    Council(pallet_collective::Origin<Runtime, pallet_collective::Instance1>),

    #[codec(index = 14u8)]
    TechnicalCommittee(pallet_collective::Origin<Runtime,
        pallet_collective::Instance2>),

    #[codec(index = 56u8)]
    AllianceMotion(pallet_collective::Origin<Runtime,
        pallet_collective::Instance3>),

    #[allow(dead_code)]
    Void(self::sp_api_hidden_includes_construct_runtime::hidden_include::Void),
}
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::clone::Clone for OriginCaller {
    #[inline]
    fn clone(&self) -> OriginCaller {
        match self {
            OriginCaller::system(__self_0) =>
                OriginCaller::system(::core::clone::Clone::clone(__self_0)),
            OriginCaller::Council(__self_0) =>
                OriginCaller::Council(::core::clone::Clone::clone(__self_0)),
            OriginCaller::TechnicalCommittee(__self_0) =>
                OriginCaller::TechnicalCommittee(::core::clone::Clone::clone(__self_0)),
            OriginCaller::AllianceMotion(__self_0) =>
                OriginCaller::AllianceMotion(::core::clone::Clone::clone(__self_0)),
            OriginCaller::Void(__self_0) =>
                OriginCaller::Void(::core::clone::Clone::clone(__self_0)),
        }
    }
}
#[allow(non_camel_case_types)]
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for OriginCaller { }
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::cmp::PartialEq for OriginCaller {
    #[inline]
    fn eq(&self, other: &OriginCaller) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag &&
            match (self, other) {
                (OriginCaller::system(__self_0),
                    OriginCaller::system(__arg1_0)) => *__self_0 == *__arg1_0,
                (OriginCaller::Council(__self_0),
                    OriginCaller::Council(__arg1_0)) => *__self_0 == *__arg1_0,
                (OriginCaller::TechnicalCommittee(__self_0),
                    OriginCaller::TechnicalCommittee(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (OriginCaller::AllianceMotion(__self_0),
                    OriginCaller::AllianceMotion(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (OriginCaller::Void(__self_0), OriginCaller::Void(__arg1_0))
                    => *__self_0 == *__arg1_0,
                _ => unsafe { ::core::intrinsics::unreachable() }
            }
    }
}
#[allow(non_camel_case_types)]
#[automatically_derived]
impl ::core::marker::StructuralEq for OriginCaller { }
#[automatically_derived]
#[allow(non_camel_case_types)]
impl ::core::cmp::Eq for OriginCaller {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<frame_system::Origin<Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_collective::Origin<Runtime,
                pallet_collective::Instance1>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_collective::Origin<Runtime,
                pallet_collective::Instance2>>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_collective::Origin<Runtime,
                pallet_collective::Instance3>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::Void>;
    }
}
impl core::fmt::Debug for OriginCaller {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::system(ref a0) =>
                fmt.debug_tuple("OriginCaller::system").field(a0).finish(),
            Self::Council(ref a0) =>
                fmt.debug_tuple("OriginCaller::Council").field(a0).finish(),
            Self::TechnicalCommittee(ref a0) =>
                fmt.debug_tuple("OriginCaller::TechnicalCommittee").field(a0).finish(),
            Self::AllianceMotion(ref a0) =>
                fmt.debug_tuple("OriginCaller::AllianceMotion").field(a0).finish(),
            Self::Void(ref a0) =>
                fmt.debug_tuple("OriginCaller::Void").field(a0).finish(),
            _ => Ok(()),
        }
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::codec::Encode for OriginCaller {
            fn encode_to<__CodecOutputEdqy: ::codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    OriginCaller::system(ref aa) => {
                        __codec_dest_edqy.push_byte(0u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    OriginCaller::Council(ref aa) => {
                        __codec_dest_edqy.push_byte(13u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    OriginCaller::TechnicalCommittee(ref aa) => {
                        __codec_dest_edqy.push_byte(14u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    OriginCaller::AllianceMotion(ref aa) => {
                        __codec_dest_edqy.push_byte(56u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    OriginCaller::Void(ref aa) => {
                        __codec_dest_edqy.push_byte(4usize as
                                ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::codec::EncodeLike for OriginCaller { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::codec::Decode for OriginCaller {
            fn decode<__CodecInputEdqy: ::codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `OriginCaller`, failed to read variant byte"))?
                    {
                    __codec_x_edqy if
                        __codec_x_edqy == 0u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(OriginCaller::system({
                                    let __codec_res_edqy =
                                        <frame_system::Origin<Runtime> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `OriginCaller::system.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 13u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(OriginCaller::Council({
                                    let __codec_res_edqy =
                                        <pallet_collective::Origin<Runtime,
                                                pallet_collective::Instance1> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `OriginCaller::Council.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 14u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(OriginCaller::TechnicalCommittee({
                                    let __codec_res_edqy =
                                        <pallet_collective::Origin<Runtime,
                                                pallet_collective::Instance2> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `OriginCaller::TechnicalCommittee.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 56u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(OriginCaller::AllianceMotion({
                                    let __codec_res_edqy =
                                        <pallet_collective::Origin<Runtime,
                                                pallet_collective::Instance3> as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `OriginCaller::AllianceMotion.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 4usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(OriginCaller::Void({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::Void
                                                as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `OriginCaller::Void.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    _ =>
                        ::core::result::Result::Err(<_ as
                                    ::core::convert::Into<_>>::into("Could not decode `OriginCaller`, variant doesn't exist")),
                }
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for OriginCaller {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("OriginCaller",
                                "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).variant(::scale_info::build::Variants::new().variant("system",
                                        |v|
                                            v.index(0u8 as
                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                        f.ty::<frame_system::Origin<Runtime>>().type_name("frame_system::Origin<Runtime>")))).variant("Council",
                                    |v|
                                        v.index(13u8 as
                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                    f.ty::<pallet_collective::Origin<Runtime,
                                                            pallet_collective::Instance1>>().type_name("pallet_collective::Origin<Runtime, pallet_collective::Instance1>")))).variant("TechnicalCommittee",
                                |v|
                                    v.index(14u8 as
                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                f.ty::<pallet_collective::Origin<Runtime,
                                                        pallet_collective::Instance2>>().type_name("pallet_collective::Origin<Runtime, pallet_collective::Instance2>")))).variant("AllianceMotion",
                            |v|
                                v.index(56u8 as
                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                            f.ty::<pallet_collective::Origin<Runtime,
                                                    pallet_collective::Instance3>>().type_name("pallet_collective::Origin<Runtime, pallet_collective::Instance3>")))).variant("Void",
                        |v|
                            v.index(4usize as
                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::Void>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::Void")))))
            }
        }
        ;
    };
const _: () =
    {
        impl ::codec::MaxEncodedLen for OriginCaller {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.max(0_usize.saturating_add(<frame_system::Origin<Runtime>>::max_encoded_len())).max(0_usize.saturating_add(<pallet_collective::Origin<Runtime,
                                                pallet_collective::Instance1>>::max_encoded_len())).max(0_usize.saturating_add(<pallet_collective::Origin<Runtime,
                                            pallet_collective::Instance2>>::max_encoded_len())).max(0_usize.saturating_add(<pallet_collective::Origin<Runtime,
                                        pallet_collective::Instance3>>::max_encoded_len())).max(0_usize.saturating_add(<self::sp_api_hidden_includes_construct_runtime::hidden_include::Void>::max_encoded_len())).saturating_add(1)
            }
        }
    };
#[allow(dead_code)]
impl RuntimeOrigin {
    #[doc =
    " Create with system none origin and [`frame_system::Config::BaseCallFilter`]."]
    pub fn none() -> Self {
        <RuntimeOrigin as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait>::none()
    }
    #[doc =
    " Create with system root origin and [`frame_system::Config::BaseCallFilter`]."]
    pub fn root() -> Self {
        <RuntimeOrigin as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait>::root()
    }
    #[doc =
    " Create with system signed origin and [`frame_system::Config::BaseCallFilter`]."]
    pub fn signed(by: <Runtime as frame_system::Config>::AccountId) -> Self {
        <RuntimeOrigin as
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait>::signed(by)
    }
}
impl From<frame_system::Origin<Runtime>> for OriginCaller {
    fn from(x: frame_system::Origin<Runtime>) -> Self {
        OriginCaller::system(x)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CallerTrait<<Runtime
    as frame_system::Config>::AccountId> for OriginCaller {
    fn into_system(self)
        ->
            Option<frame_system::RawOrigin<<Runtime as
            frame_system::Config>::AccountId>> {
        match self { OriginCaller::system(x) => Some(x), _ => None, }
    }
    fn as_system_ref(&self)
        ->
            Option<&frame_system::RawOrigin<<Runtime as
            frame_system::Config>::AccountId>> {
        match &self { OriginCaller::system(o) => Some(o), _ => None, }
    }
}
impl TryFrom<OriginCaller> for frame_system::Origin<Runtime> {
    type Error = OriginCaller;
    fn try_from(x: OriginCaller)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<frame_system::Origin<Runtime>,
            OriginCaller> {
        if let OriginCaller::system(l) = x { Ok(l) } else { Err(x) }
    }
}
impl From<frame_system::Origin<Runtime>> for RuntimeOrigin {
    #[doc =
    " Convert to runtime origin, using as filter: [`frame_system::Config::BaseCallFilter`]."]
    fn from(x: frame_system::Origin<Runtime>) -> Self {
        let o: OriginCaller = x.into();
        o.into()
    }
}
impl From<OriginCaller> for RuntimeOrigin {
    fn from(x: OriginCaller) -> Self {
        let mut o =
            RuntimeOrigin {
                caller: x,
                filter: self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::rc::Rc::new(Box::new(|_|
                            true)),
            };
        self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait::reset_filter(&mut o);
        o
    }
}
impl From<RuntimeOrigin> for
    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<frame_system::Origin<Runtime>,
    RuntimeOrigin> {
    #[doc =
    r" NOTE: converting to pallet origin loses the origin filter information."]
    fn from(val: RuntimeOrigin) -> Self {
        if let OriginCaller::system(l) = val.caller {
                Ok(l)
            } else { Err(val) }
    }
}
impl From<Option<<Runtime as frame_system::Config>::AccountId>> for
    RuntimeOrigin {
    #[doc =
    " Convert to runtime origin with caller being system signed or none and use filter [`frame_system::Config::BaseCallFilter`]."]
    fn from(x: Option<<Runtime as frame_system::Config>::AccountId>) -> Self {
        <frame_system::Origin<Runtime>>::from(x).into()
    }
}
impl From<pallet_collective::Origin<Runtime, pallet_collective::Instance1>>
    for OriginCaller {
    fn from(x:
            pallet_collective::Origin<Runtime, pallet_collective::Instance1>)
        -> Self {
        OriginCaller::Council(x)
    }
}
impl From<pallet_collective::Origin<Runtime, pallet_collective::Instance1>>
    for RuntimeOrigin {
    #[doc =
    "  Convert to runtime origin using [`pallet_collective::Config::BaseCallFilter`]."]
    fn from(x:
            pallet_collective::Origin<Runtime, pallet_collective::Instance1>)
        -> Self {
        let x: OriginCaller = x.into();
        x.into()
    }
}
impl From<RuntimeOrigin> for
    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_collective::Origin<Runtime,
    pallet_collective::Instance1>, RuntimeOrigin> {
    #[doc =
    r" NOTE: converting to pallet origin loses the origin filter information."]
    fn from(val: RuntimeOrigin) -> Self {
        if let OriginCaller::Council(l) = val.caller {
                Ok(l)
            } else { Err(val) }
    }
}
impl TryFrom<OriginCaller> for
    pallet_collective::Origin<Runtime, pallet_collective::Instance1> {
    type Error = OriginCaller;
    fn try_from(x: OriginCaller)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_collective::Origin<Runtime,
            pallet_collective::Instance1>, OriginCaller> {
        if let OriginCaller::Council(l) = x { Ok(l) } else { Err(x) }
    }
}
impl From<pallet_collective::Origin<Runtime, pallet_collective::Instance2>>
    for OriginCaller {
    fn from(x:
            pallet_collective::Origin<Runtime, pallet_collective::Instance2>)
        -> Self {
        OriginCaller::TechnicalCommittee(x)
    }
}
impl From<pallet_collective::Origin<Runtime, pallet_collective::Instance2>>
    for RuntimeOrigin {
    #[doc =
    "  Convert to runtime origin using [`pallet_collective::Config::BaseCallFilter`]."]
    fn from(x:
            pallet_collective::Origin<Runtime, pallet_collective::Instance2>)
        -> Self {
        let x: OriginCaller = x.into();
        x.into()
    }
}
impl From<RuntimeOrigin> for
    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_collective::Origin<Runtime,
    pallet_collective::Instance2>, RuntimeOrigin> {
    #[doc =
    r" NOTE: converting to pallet origin loses the origin filter information."]
    fn from(val: RuntimeOrigin) -> Self {
        if let OriginCaller::TechnicalCommittee(l) = val.caller {
                Ok(l)
            } else { Err(val) }
    }
}
impl TryFrom<OriginCaller> for
    pallet_collective::Origin<Runtime, pallet_collective::Instance2> {
    type Error = OriginCaller;
    fn try_from(x: OriginCaller)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_collective::Origin<Runtime,
            pallet_collective::Instance2>, OriginCaller> {
        if let OriginCaller::TechnicalCommittee(l) = x {
                Ok(l)
            } else { Err(x) }
    }
}
impl From<pallet_collective::Origin<Runtime, pallet_collective::Instance3>>
    for OriginCaller {
    fn from(x:
            pallet_collective::Origin<Runtime, pallet_collective::Instance3>)
        -> Self {
        OriginCaller::AllianceMotion(x)
    }
}
impl From<pallet_collective::Origin<Runtime, pallet_collective::Instance3>>
    for RuntimeOrigin {
    #[doc =
    "  Convert to runtime origin using [`pallet_collective::Config::BaseCallFilter`]."]
    fn from(x:
            pallet_collective::Origin<Runtime, pallet_collective::Instance3>)
        -> Self {
        let x: OriginCaller = x.into();
        x.into()
    }
}
impl From<RuntimeOrigin> for
    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_collective::Origin<Runtime,
    pallet_collective::Instance3>, RuntimeOrigin> {
    #[doc =
    r" NOTE: converting to pallet origin loses the origin filter information."]
    fn from(val: RuntimeOrigin) -> Self {
        if let OriginCaller::AllianceMotion(l) = val.caller {
                Ok(l)
            } else { Err(val) }
    }
}
impl TryFrom<OriginCaller> for
    pallet_collective::Origin<Runtime, pallet_collective::Instance3> {
    type Error = OriginCaller;
    fn try_from(x: OriginCaller)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result<pallet_collective::Origin<Runtime,
            pallet_collective::Instance3>, OriginCaller> {
        if let OriginCaller::AllianceMotion(l) = x { Ok(l) } else { Err(x) }
    }
}
pub type System = frame_system::Pallet<Runtime>;
pub type Utility = pallet_utility::Pallet<Runtime>;
pub type Babe = pallet_babe::Pallet<Runtime>;
pub type Timestamp = pallet_timestamp::Pallet<Runtime>;
pub type Authorship = pallet_authorship::Pallet<Runtime>;
pub type Indices = pallet_indices::Pallet<Runtime>;
pub type Balances = pallet_balances::Pallet<Runtime>;
pub type TransactionPayment = pallet_transaction_payment::Pallet<Runtime>;
pub type AssetTxPayment = pallet_asset_tx_payment::Pallet<Runtime>;
pub type ElectionProviderMultiPhase =
    pallet_election_provider_multi_phase::Pallet<Runtime>;
pub type Staking = pallet_staking::Pallet<Runtime>;
pub type Session = pallet_session::Pallet<Runtime>;
pub type Democracy = pallet_democracy::Pallet<Runtime>;
pub type Council =
    pallet_collective::Pallet<Runtime, pallet_collective::Instance1>;
pub type TechnicalCommittee =
    pallet_collective::Pallet<Runtime, pallet_collective::Instance2>;
pub type Elections = pallet_elections_phragmen::Pallet<Runtime>;
pub type TechnicalMembership =
    pallet_membership::Pallet<Runtime, pallet_membership::Instance1>;
pub type Grandpa = pallet_grandpa::Pallet<Runtime>;
pub type Treasury = pallet_treasury::Pallet<Runtime>;
pub type AssetRate = pallet_asset_rate::Pallet<Runtime>;
pub type Contracts = pallet_contracts::Pallet<Runtime>;
pub type Sudo = pallet_sudo::Pallet<Runtime>;
pub type ImOnline = pallet_im_online::Pallet<Runtime>;
pub type AuthorityDiscovery = pallet_authority_discovery::Pallet<Runtime>;
pub type Offences = pallet_offences::Pallet<Runtime>;
pub type Historical = pallet_session_historical::Pallet<Runtime>;
pub type RandomnessCollectiveFlip =
    pallet_insecure_randomness_collective_flip::Pallet<Runtime>;
pub type Identity = pallet_identity::Pallet<Runtime>;
pub type Society = pallet_society::Pallet<Runtime>;
pub type Recovery = pallet_recovery::Pallet<Runtime>;
pub type Vesting = pallet_vesting::Pallet<Runtime>;
pub type Scheduler = pallet_scheduler::Pallet<Runtime>;
pub type Glutton = pallet_glutton::Pallet<Runtime>;
pub type Preimage = pallet_preimage::Pallet<Runtime>;
pub type Proxy = pallet_proxy::Pallet<Runtime>;
pub type Multisig = pallet_multisig::Pallet<Runtime>;
pub type Bounties = pallet_bounties::Pallet<Runtime>;
pub type Tips = pallet_tips::Pallet<Runtime>;
pub type Assets = pallet_assets::Pallet<Runtime>;
pub type Mmr = pallet_mmr::Pallet<Runtime>;
pub type Lottery = pallet_lottery::Pallet<Runtime>;
pub type Nis = pallet_nis::Pallet<Runtime>;
pub type Uniques = pallet_uniques::Pallet<Runtime>;
pub type Nfts = pallet_nfts::Pallet<Runtime>;
pub type NftFractionalization = pallet_nft_fractionalization::Pallet<Runtime>;
pub type Salary = pallet_salary::Pallet<Runtime>;
pub type CoreFellowship = pallet_core_fellowship::Pallet<Runtime>;
pub type TransactionStorage = pallet_transaction_storage::Pallet<Runtime>;
pub type VoterList =
    pallet_bags_list::Pallet<Runtime, pallet_bags_list::Instance1>;
pub type StateTrieMigration = pallet_state_trie_migration::Pallet<Runtime>;
pub type ChildBounties = pallet_child_bounties::Pallet<Runtime>;
pub type Referenda = pallet_referenda::Pallet<Runtime>;
pub type Remark = pallet_remark::Pallet<Runtime>;
pub type RootTesting = pallet_root_testing::Pallet<Runtime>;
pub type ConvictionVoting = pallet_conviction_voting::Pallet<Runtime>;
pub type Whitelist = pallet_whitelist::Pallet<Runtime>;
pub type AllianceMotion =
    pallet_collective::Pallet<Runtime, pallet_collective::Instance3>;
pub type Alliance = pallet_alliance::Pallet<Runtime>;
pub type NominationPools = pallet_nomination_pools::Pallet<Runtime>;
pub type RankedPolls =
    pallet_referenda::Pallet<Runtime, pallet_referenda::Instance2>;
pub type RankedCollective = pallet_ranked_collective::Pallet<Runtime>;
pub type FastUnstake = pallet_fast_unstake::Pallet<Runtime>;
pub type MessageQueue = pallet_message_queue::Pallet<Runtime>;
pub type Pov = frame_benchmarking_pallet_pov::Pallet<Runtime>;
pub type Statement = pallet_statement::Pallet<Runtime>;
#[doc = r" All pallets included in the runtime as a nested tuple of types."]
#[deprecated(note =
"The type definition has changed from representing all pallets \
			excluding system, in reversed order to become the representation of all pallets \
			including system pallet in regular order. For this reason it is encouraged to use \
			explicitly one of `AllPalletsWithSystem`, `AllPalletsWithoutSystem`, \
			`AllPalletsWithSystemReversed`, `AllPalletsWithoutSystemReversed`. \
			Note that the type `frame_executive::Executive` expects one of `AllPalletsWithSystem` \
			, `AllPalletsWithSystemReversed`, `AllPalletsReversedWithSystemFirst`. More details in \
			https://github.com/paritytech/substrate/pull/10043")]
pub type AllPallets = AllPalletsWithSystem;
#[cfg(all())]
#[doc = r" All pallets included in the runtime as a nested tuple of types."]
pub type AllPalletsWithSystem =
    (System, Utility, Babe, Timestamp, Authorship, Indices, Balances,
    TransactionPayment, AssetTxPayment, ElectionProviderMultiPhase, Staking,
    Session, Democracy, Council, TechnicalCommittee, Elections,
    TechnicalMembership, Grandpa, Treasury, AssetRate, Contracts, Sudo,
    ImOnline, AuthorityDiscovery, Offences, Historical,
    RandomnessCollectiveFlip, Identity, Society, Recovery, Vesting, Scheduler,
    Glutton, Preimage, Proxy, Multisig, Bounties, Tips, Assets, Mmr, Lottery,
    Nis, Uniques, Nfts, NftFractionalization, Salary, CoreFellowship,
    TransactionStorage, VoterList, StateTrieMigration, ChildBounties,
    Referenda, Remark, RootTesting, ConvictionVoting, Whitelist,
    AllianceMotion, Alliance, NominationPools, RankedPolls, RankedCollective,
    FastUnstake, MessageQueue, Pov, Statement);
#[cfg(all())]
#[doc = r" All pallets included in the runtime as a nested tuple of types."]
#[doc = r" Excludes the System pallet."]
pub type AllPalletsWithoutSystem =
    (Utility, Babe, Timestamp, Authorship, Indices, Balances,
    TransactionPayment, AssetTxPayment, ElectionProviderMultiPhase, Staking,
    Session, Democracy, Council, TechnicalCommittee, Elections,
    TechnicalMembership, Grandpa, Treasury, AssetRate, Contracts, Sudo,
    ImOnline, AuthorityDiscovery, Offences, Historical,
    RandomnessCollectiveFlip, Identity, Society, Recovery, Vesting, Scheduler,
    Glutton, Preimage, Proxy, Multisig, Bounties, Tips, Assets, Mmr, Lottery,
    Nis, Uniques, Nfts, NftFractionalization, Salary, CoreFellowship,
    TransactionStorage, VoterList, StateTrieMigration, ChildBounties,
    Referenda, Remark, RootTesting, ConvictionVoting, Whitelist,
    AllianceMotion, Alliance, NominationPools, RankedPolls, RankedCollective,
    FastUnstake, MessageQueue, Pov, Statement);
#[cfg(all())]
#[doc =
r" All pallets included in the runtime as a nested tuple of types in reversed order."]
#[deprecated(note =
"Using reverse pallet orders is deprecated. use only \
			`AllPalletsWithSystem or AllPalletsWithoutSystem`")]
pub type AllPalletsWithSystemReversed =
    (Statement, Pov, MessageQueue, FastUnstake, RankedCollective, RankedPolls,
    NominationPools, Alliance, AllianceMotion, Whitelist, ConvictionVoting,
    RootTesting, Remark, Referenda, ChildBounties, StateTrieMigration,
    VoterList, TransactionStorage, CoreFellowship, Salary,
    NftFractionalization, Nfts, Uniques, Nis, Lottery, Mmr, Assets, Tips,
    Bounties, Multisig, Proxy, Preimage, Glutton, Scheduler, Vesting,
    Recovery, Society, Identity, RandomnessCollectiveFlip, Historical,
    Offences, AuthorityDiscovery, ImOnline, Sudo, Contracts, AssetRate,
    Treasury, Grandpa, TechnicalMembership, Elections, TechnicalCommittee,
    Council, Democracy, Session, Staking, ElectionProviderMultiPhase,
    AssetTxPayment, TransactionPayment, Balances, Indices, Authorship,
    Timestamp, Babe, Utility, System);
#[cfg(all())]
#[doc =
r" All pallets included in the runtime as a nested tuple of types in reversed order."]
#[doc = r" Excludes the System pallet."]
#[deprecated(note =
"Using reverse pallet orders is deprecated. use only \
			`AllPalletsWithSystem or AllPalletsWithoutSystem`")]
pub type AllPalletsWithoutSystemReversed =
    (Statement, Pov, MessageQueue, FastUnstake, RankedCollective, RankedPolls,
    NominationPools, Alliance, AllianceMotion, Whitelist, ConvictionVoting,
    RootTesting, Remark, Referenda, ChildBounties, StateTrieMigration,
    VoterList, TransactionStorage, CoreFellowship, Salary,
    NftFractionalization, Nfts, Uniques, Nis, Lottery, Mmr, Assets, Tips,
    Bounties, Multisig, Proxy, Preimage, Glutton, Scheduler, Vesting,
    Recovery, Society, Identity, RandomnessCollectiveFlip, Historical,
    Offences, AuthorityDiscovery, ImOnline, Sudo, Contracts, AssetRate,
    Treasury, Grandpa, TechnicalMembership, Elections, TechnicalCommittee,
    Council, Democracy, Session, Staking, ElectionProviderMultiPhase,
    AssetTxPayment, TransactionPayment, Balances, Indices, Authorship,
    Timestamp, Babe, Utility);
#[cfg(all())]
#[doc =
r" All pallets included in the runtime as a nested tuple of types in reversed order."]
#[doc = r" With the system pallet first."]
#[deprecated(note =
"Using reverse pallet orders is deprecated. use only \
			`AllPalletsWithSystem or AllPalletsWithoutSystem`")]
pub type AllPalletsReversedWithSystemFirst =
    (System, Statement, Pov, MessageQueue, FastUnstake, RankedCollective,
    RankedPolls, NominationPools, Alliance, AllianceMotion, Whitelist,
    ConvictionVoting, RootTesting, Remark, Referenda, ChildBounties,
    StateTrieMigration, VoterList, TransactionStorage, CoreFellowship, Salary,
    NftFractionalization, Nfts, Uniques, Nis, Lottery, Mmr, Assets, Tips,
    Bounties, Multisig, Proxy, Preimage, Glutton, Scheduler, Vesting,
    Recovery, Society, Identity, RandomnessCollectiveFlip, Historical,
    Offences, AuthorityDiscovery, ImOnline, Sudo, Contracts, AssetRate,
    Treasury, Grandpa, TechnicalMembership, Elections, TechnicalCommittee,
    Council, Democracy, Session, Staking, ElectionProviderMultiPhase,
    AssetTxPayment, TransactionPayment, Balances, Indices, Authorship,
    Timestamp, Babe, Utility);
#[doc = r" Provides an implementation of `PalletInfo` to provide information"]
#[doc = r" about the pallet setup in the runtime."]
pub struct PalletInfo;
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfo
    for PalletInfo {
    fn index<P: 'static>() -> Option<usize> {
        let type_id =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<P>();
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<System>()
                {
                return Some(0usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Utility>()
                {
                return Some(1usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Babe>()
                {
                return Some(2usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Timestamp>()
                {
                return Some(3usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Authorship>()
                {
                return Some(4usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Indices>()
                {
                return Some(5usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Balances>()
                {
                return Some(6usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TransactionPayment>()
                {
                return Some(7usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AssetTxPayment>()
                {
                return Some(8usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ElectionProviderMultiPhase>()
                {
                return Some(9usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Staking>()
                {
                return Some(10usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Session>()
                {
                return Some(11usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Democracy>()
                {
                return Some(12usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Council>()
                {
                return Some(13usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TechnicalCommittee>()
                {
                return Some(14usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Elections>()
                {
                return Some(15usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TechnicalMembership>()
                {
                return Some(16usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Grandpa>()
                {
                return Some(17usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Treasury>()
                {
                return Some(18usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AssetRate>()
                {
                return Some(19usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Contracts>()
                {
                return Some(20usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Sudo>()
                {
                return Some(21usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ImOnline>()
                {
                return Some(22usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AuthorityDiscovery>()
                {
                return Some(23usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Offences>()
                {
                return Some(24usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Historical>()
                {
                return Some(25usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RandomnessCollectiveFlip>()
                {
                return Some(26usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Identity>()
                {
                return Some(27usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Society>()
                {
                return Some(28usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Recovery>()
                {
                return Some(29usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Vesting>()
                {
                return Some(30usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Scheduler>()
                {
                return Some(31usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Glutton>()
                {
                return Some(32usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Preimage>()
                {
                return Some(33usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Proxy>()
                {
                return Some(34usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Multisig>()
                {
                return Some(35usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Bounties>()
                {
                return Some(36usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Tips>()
                {
                return Some(37usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Assets>()
                {
                return Some(38usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Mmr>()
                {
                return Some(39usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Lottery>()
                {
                return Some(40usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Nis>()
                {
                return Some(41usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Uniques>()
                {
                return Some(42usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Nfts>()
                {
                return Some(43usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<NftFractionalization>()
                {
                return Some(44usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Salary>()
                {
                return Some(45usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<CoreFellowship>()
                {
                return Some(46usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TransactionStorage>()
                {
                return Some(47usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<VoterList>()
                {
                return Some(48usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<StateTrieMigration>()
                {
                return Some(49usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ChildBounties>()
                {
                return Some(50usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Referenda>()
                {
                return Some(51usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Remark>()
                {
                return Some(52usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RootTesting>()
                {
                return Some(53usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ConvictionVoting>()
                {
                return Some(54usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Whitelist>()
                {
                return Some(55usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AllianceMotion>()
                {
                return Some(56usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Alliance>()
                {
                return Some(57usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<NominationPools>()
                {
                return Some(58usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RankedPolls>()
                {
                return Some(59usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RankedCollective>()
                {
                return Some(60usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<FastUnstake>()
                {
                return Some(61usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<MessageQueue>()
                {
                return Some(62usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Pov>()
                {
                return Some(63usize)
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Statement>()
                {
                return Some(64usize)
            }
        None
    }
    fn name<P: 'static>() -> Option<&'static str> {
        let type_id =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<P>();
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<System>()
                {
                return Some("System")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Utility>()
                {
                return Some("Utility")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Babe>()
                {
                return Some("Babe")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Timestamp>()
                {
                return Some("Timestamp")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Authorship>()
                {
                return Some("Authorship")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Indices>()
                {
                return Some("Indices")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Balances>()
                {
                return Some("Balances")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TransactionPayment>()
                {
                return Some("TransactionPayment")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AssetTxPayment>()
                {
                return Some("AssetTxPayment")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ElectionProviderMultiPhase>()
                {
                return Some("ElectionProviderMultiPhase")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Staking>()
                {
                return Some("Staking")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Session>()
                {
                return Some("Session")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Democracy>()
                {
                return Some("Democracy")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Council>()
                {
                return Some("Council")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TechnicalCommittee>()
                {
                return Some("TechnicalCommittee")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Elections>()
                {
                return Some("Elections")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TechnicalMembership>()
                {
                return Some("TechnicalMembership")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Grandpa>()
                {
                return Some("Grandpa")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Treasury>()
                {
                return Some("Treasury")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AssetRate>()
                {
                return Some("AssetRate")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Contracts>()
                {
                return Some("Contracts")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Sudo>()
                {
                return Some("Sudo")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ImOnline>()
                {
                return Some("ImOnline")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AuthorityDiscovery>()
                {
                return Some("AuthorityDiscovery")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Offences>()
                {
                return Some("Offences")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Historical>()
                {
                return Some("Historical")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RandomnessCollectiveFlip>()
                {
                return Some("RandomnessCollectiveFlip")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Identity>()
                {
                return Some("Identity")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Society>()
                {
                return Some("Society")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Recovery>()
                {
                return Some("Recovery")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Vesting>()
                {
                return Some("Vesting")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Scheduler>()
                {
                return Some("Scheduler")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Glutton>()
                {
                return Some("Glutton")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Preimage>()
                {
                return Some("Preimage")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Proxy>()
                {
                return Some("Proxy")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Multisig>()
                {
                return Some("Multisig")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Bounties>()
                {
                return Some("Bounties")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Tips>()
                {
                return Some("Tips")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Assets>()
                {
                return Some("Assets")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Mmr>()
                {
                return Some("Mmr")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Lottery>()
                {
                return Some("Lottery")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Nis>()
                {
                return Some("Nis")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Uniques>()
                {
                return Some("Uniques")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Nfts>()
                {
                return Some("Nfts")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<NftFractionalization>()
                {
                return Some("NftFractionalization")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Salary>()
                {
                return Some("Salary")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<CoreFellowship>()
                {
                return Some("CoreFellowship")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TransactionStorage>()
                {
                return Some("TransactionStorage")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<VoterList>()
                {
                return Some("VoterList")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<StateTrieMigration>()
                {
                return Some("StateTrieMigration")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ChildBounties>()
                {
                return Some("ChildBounties")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Referenda>()
                {
                return Some("Referenda")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Remark>()
                {
                return Some("Remark")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RootTesting>()
                {
                return Some("RootTesting")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ConvictionVoting>()
                {
                return Some("ConvictionVoting")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Whitelist>()
                {
                return Some("Whitelist")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AllianceMotion>()
                {
                return Some("AllianceMotion")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Alliance>()
                {
                return Some("Alliance")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<NominationPools>()
                {
                return Some("NominationPools")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RankedPolls>()
                {
                return Some("RankedPolls")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RankedCollective>()
                {
                return Some("RankedCollective")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<FastUnstake>()
                {
                return Some("FastUnstake")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<MessageQueue>()
                {
                return Some("MessageQueue")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Pov>()
                {
                return Some("Pov")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Statement>()
                {
                return Some("Statement")
            }
        None
    }
    fn module_name<P: 'static>() -> Option<&'static str> {
        let type_id =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<P>();
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<System>()
                {
                return Some("frame_system")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Utility>()
                {
                return Some("pallet_utility")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Babe>()
                {
                return Some("pallet_babe")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Timestamp>()
                {
                return Some("pallet_timestamp")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Authorship>()
                {
                return Some("pallet_authorship")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Indices>()
                {
                return Some("pallet_indices")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Balances>()
                {
                return Some("pallet_balances")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TransactionPayment>()
                {
                return Some("pallet_transaction_payment")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AssetTxPayment>()
                {
                return Some("pallet_asset_tx_payment")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ElectionProviderMultiPhase>()
                {
                return Some("pallet_election_provider_multi_phase")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Staking>()
                {
                return Some("pallet_staking")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Session>()
                {
                return Some("pallet_session")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Democracy>()
                {
                return Some("pallet_democracy")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Council>()
                {
                return Some("pallet_collective")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TechnicalCommittee>()
                {
                return Some("pallet_collective")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Elections>()
                {
                return Some("pallet_elections_phragmen")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TechnicalMembership>()
                {
                return Some("pallet_membership")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Grandpa>()
                {
                return Some("pallet_grandpa")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Treasury>()
                {
                return Some("pallet_treasury")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AssetRate>()
                {
                return Some("pallet_asset_rate")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Contracts>()
                {
                return Some("pallet_contracts")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Sudo>()
                {
                return Some("pallet_sudo")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ImOnline>()
                {
                return Some("pallet_im_online")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AuthorityDiscovery>()
                {
                return Some("pallet_authority_discovery")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Offences>()
                {
                return Some("pallet_offences")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Historical>()
                {
                return Some("pallet_session_historical")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RandomnessCollectiveFlip>()
                {
                return Some("pallet_insecure_randomness_collective_flip")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Identity>()
                {
                return Some("pallet_identity")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Society>()
                {
                return Some("pallet_society")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Recovery>()
                {
                return Some("pallet_recovery")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Vesting>()
                {
                return Some("pallet_vesting")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Scheduler>()
                {
                return Some("pallet_scheduler")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Glutton>()
                {
                return Some("pallet_glutton")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Preimage>()
                {
                return Some("pallet_preimage")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Proxy>()
                {
                return Some("pallet_proxy")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Multisig>()
                {
                return Some("pallet_multisig")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Bounties>()
                {
                return Some("pallet_bounties")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Tips>()
                {
                return Some("pallet_tips")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Assets>()
                {
                return Some("pallet_assets")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Mmr>()
                {
                return Some("pallet_mmr")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Lottery>()
                {
                return Some("pallet_lottery")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Nis>()
                {
                return Some("pallet_nis")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Uniques>()
                {
                return Some("pallet_uniques")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Nfts>()
                {
                return Some("pallet_nfts")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<NftFractionalization>()
                {
                return Some("pallet_nft_fractionalization")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Salary>()
                {
                return Some("pallet_salary")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<CoreFellowship>()
                {
                return Some("pallet_core_fellowship")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TransactionStorage>()
                {
                return Some("pallet_transaction_storage")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<VoterList>()
                {
                return Some("pallet_bags_list")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<StateTrieMigration>()
                {
                return Some("pallet_state_trie_migration")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ChildBounties>()
                {
                return Some("pallet_child_bounties")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Referenda>()
                {
                return Some("pallet_referenda")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Remark>()
                {
                return Some("pallet_remark")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RootTesting>()
                {
                return Some("pallet_root_testing")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ConvictionVoting>()
                {
                return Some("pallet_conviction_voting")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Whitelist>()
                {
                return Some("pallet_whitelist")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AllianceMotion>()
                {
                return Some("pallet_collective")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Alliance>()
                {
                return Some("pallet_alliance")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<NominationPools>()
                {
                return Some("pallet_nomination_pools")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RankedPolls>()
                {
                return Some("pallet_referenda")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RankedCollective>()
                {
                return Some("pallet_ranked_collective")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<FastUnstake>()
                {
                return Some("pallet_fast_unstake")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<MessageQueue>()
                {
                return Some("pallet_message_queue")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Pov>()
                {
                return Some("frame_benchmarking_pallet_pov")
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Statement>()
                {
                return Some("pallet_statement")
            }
        None
    }
    fn crate_version<P: 'static>()
        ->
            Option<self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::CrateVersion> {
        let type_id =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<P>();
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<System>()
                {
                return Some(<frame_system::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Utility>()
                {
                return Some(<pallet_utility::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Babe>()
                {
                return Some(<pallet_babe::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Timestamp>()
                {
                return Some(<pallet_timestamp::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Authorship>()
                {
                return Some(<pallet_authorship::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Indices>()
                {
                return Some(<pallet_indices::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Balances>()
                {
                return Some(<pallet_balances::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TransactionPayment>()
                {
                return Some(<pallet_transaction_payment::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AssetTxPayment>()
                {
                return Some(<pallet_asset_tx_payment::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ElectionProviderMultiPhase>()
                {
                return Some(<pallet_election_provider_multi_phase::Pallet<Runtime>
                                as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Staking>()
                {
                return Some(<pallet_staking::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Session>()
                {
                return Some(<pallet_session::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Democracy>()
                {
                return Some(<pallet_democracy::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Council>()
                {
                return Some(<pallet_collective::Pallet<Runtime,
                                pallet_collective::Instance1> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TechnicalCommittee>()
                {
                return Some(<pallet_collective::Pallet<Runtime,
                                pallet_collective::Instance2> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Elections>()
                {
                return Some(<pallet_elections_phragmen::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TechnicalMembership>()
                {
                return Some(<pallet_membership::Pallet<Runtime,
                                pallet_membership::Instance1> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Grandpa>()
                {
                return Some(<pallet_grandpa::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Treasury>()
                {
                return Some(<pallet_treasury::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AssetRate>()
                {
                return Some(<pallet_asset_rate::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Contracts>()
                {
                return Some(<pallet_contracts::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Sudo>()
                {
                return Some(<pallet_sudo::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ImOnline>()
                {
                return Some(<pallet_im_online::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AuthorityDiscovery>()
                {
                return Some(<pallet_authority_discovery::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Offences>()
                {
                return Some(<pallet_offences::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Historical>()
                {
                return Some(<pallet_session_historical::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RandomnessCollectiveFlip>()
                {
                return Some(<pallet_insecure_randomness_collective_flip::Pallet<Runtime>
                                as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Identity>()
                {
                return Some(<pallet_identity::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Society>()
                {
                return Some(<pallet_society::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Recovery>()
                {
                return Some(<pallet_recovery::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Vesting>()
                {
                return Some(<pallet_vesting::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Scheduler>()
                {
                return Some(<pallet_scheduler::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Glutton>()
                {
                return Some(<pallet_glutton::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Preimage>()
                {
                return Some(<pallet_preimage::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Proxy>()
                {
                return Some(<pallet_proxy::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Multisig>()
                {
                return Some(<pallet_multisig::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Bounties>()
                {
                return Some(<pallet_bounties::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Tips>()
                {
                return Some(<pallet_tips::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Assets>()
                {
                return Some(<pallet_assets::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Mmr>()
                {
                return Some(<pallet_mmr::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Lottery>()
                {
                return Some(<pallet_lottery::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Nis>()
                {
                return Some(<pallet_nis::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Uniques>()
                {
                return Some(<pallet_uniques::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Nfts>()
                {
                return Some(<pallet_nfts::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<NftFractionalization>()
                {
                return Some(<pallet_nft_fractionalization::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Salary>()
                {
                return Some(<pallet_salary::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<CoreFellowship>()
                {
                return Some(<pallet_core_fellowship::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<TransactionStorage>()
                {
                return Some(<pallet_transaction_storage::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<VoterList>()
                {
                return Some(<pallet_bags_list::Pallet<Runtime,
                                pallet_bags_list::Instance1> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<StateTrieMigration>()
                {
                return Some(<pallet_state_trie_migration::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ChildBounties>()
                {
                return Some(<pallet_child_bounties::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Referenda>()
                {
                return Some(<pallet_referenda::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Remark>()
                {
                return Some(<pallet_remark::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RootTesting>()
                {
                return Some(<pallet_root_testing::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<ConvictionVoting>()
                {
                return Some(<pallet_conviction_voting::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Whitelist>()
                {
                return Some(<pallet_whitelist::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<AllianceMotion>()
                {
                return Some(<pallet_collective::Pallet<Runtime,
                                pallet_collective::Instance3> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Alliance>()
                {
                return Some(<pallet_alliance::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<NominationPools>()
                {
                return Some(<pallet_nomination_pools::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RankedPolls>()
                {
                return Some(<pallet_referenda::Pallet<Runtime,
                                pallet_referenda::Instance2> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<RankedCollective>()
                {
                return Some(<pallet_ranked_collective::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<FastUnstake>()
                {
                return Some(<pallet_fast_unstake::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<MessageQueue>()
                {
                return Some(<pallet_message_queue::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Pov>()
                {
                return Some(<frame_benchmarking_pallet_pov::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        if type_id ==
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::any::TypeId::of::<Statement>()
                {
                return Some(<pallet_statement::Pallet<Runtime> as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::PalletInfoAccess>::crate_version())
            }
        None
    }
}
pub enum RuntimeCall {

    #[codec(index = 0u8)]
    System(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
        Runtime>),

    #[codec(index = 1u8)]
    Utility(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
        Runtime>),

    #[codec(index = 2u8)]
    Babe(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
        Runtime>),

    #[codec(index = 3u8)]
    Timestamp(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
        Runtime>),

    #[codec(index = 5u8)]
    Indices(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Indices,
        Runtime>),

    #[codec(index = 6u8)]
    Balances(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
        Runtime>),

    #[codec(index = 9u8)]
    ElectionProviderMultiPhase(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
        Runtime>),

    #[codec(index = 10u8)]
    Staking(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
        Runtime>),

    #[codec(index = 11u8)]
    Session(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
        Runtime>),

    #[codec(index = 12u8)]
    Democracy(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Democracy,
        Runtime>),

    #[codec(index = 13u8)]
    Council(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Council,
        Runtime>),

    #[codec(index = 14u8)]
    TechnicalCommittee(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalCommittee,
        Runtime>),

    #[codec(index = 15u8)]
    Elections(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Elections,
        Runtime>),

    #[codec(index = 16u8)]
    TechnicalMembership(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalMembership,
        Runtime>),

    #[codec(index = 17u8)]
    Grandpa(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
        Runtime>),

    #[codec(index = 18u8)]
    Treasury(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
        Runtime>),

    #[codec(index = 19u8)]
    AssetRate(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AssetRate,
        Runtime>),

    #[codec(index = 20u8)]
    Contracts(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Contracts,
        Runtime>),

    #[codec(index = 21u8)]
    Sudo(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Sudo,
        Runtime>),

    #[codec(index = 22u8)]
    ImOnline(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
        Runtime>),

    #[codec(index = 27u8)]
    Identity(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
        Runtime>),

    #[codec(index = 28u8)]
    Society(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Society,
        Runtime>),

    #[codec(index = 29u8)]
    Recovery(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Recovery,
        Runtime>),

    #[codec(index = 30u8)]
    Vesting(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
        Runtime>),

    #[codec(index = 31u8)]
    Scheduler(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
        Runtime>),

    #[codec(index = 32u8)]
    Glutton(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Glutton,
        Runtime>),

    #[codec(index = 33u8)]
    Preimage(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
        Runtime>),

    #[codec(index = 34u8)]
    Proxy(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
        Runtime>),

    #[codec(index = 35u8)]
    Multisig(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
        Runtime>),

    #[codec(index = 36u8)]
    Bounties(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
        Runtime>),

    #[codec(index = 37u8)]
    Tips(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Tips,
        Runtime>),

    #[codec(index = 38u8)]
    Assets(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Assets,
        Runtime>),

    #[codec(index = 40u8)]
    Lottery(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Lottery,
        Runtime>),

    #[codec(index = 41u8)]
    Nis(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nis,
        Runtime>),

    #[codec(index = 42u8)]
    Uniques(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Uniques,
        Runtime>),

    #[codec(index = 43u8)]
    Nfts(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nfts,
        Runtime>),

    #[codec(index = 44u8)]
    NftFractionalization(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NftFractionalization,
        Runtime>),

    #[codec(index = 45u8)]
    Salary(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Salary,
        Runtime>),

    #[codec(index = 46u8)]
    CoreFellowship(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<CoreFellowship,
        Runtime>),

    #[codec(index = 47u8)]
    TransactionStorage(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TransactionStorage,
        Runtime>),

    #[codec(index = 48u8)]
    VoterList(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<VoterList,
        Runtime>),

    #[codec(index = 49u8)]
    StateTrieMigration(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StateTrieMigration,
        Runtime>),

    #[codec(index = 50u8)]
    ChildBounties(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
        Runtime>),

    #[codec(index = 51u8)]
    Referenda(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
        Runtime>),

    #[codec(index = 52u8)]
    Remark(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Remark,
        Runtime>),

    #[codec(index = 53u8)]
    RootTesting(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RootTesting,
        Runtime>),

    #[codec(index = 54u8)]
    ConvictionVoting(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
        Runtime>),

    #[codec(index = 55u8)]
    Whitelist(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
        Runtime>),

    #[codec(index = 56u8)]
    AllianceMotion(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AllianceMotion,
        Runtime>),

    #[codec(index = 57u8)]
    Alliance(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Alliance,
        Runtime>),

    #[codec(index = 58u8)]
    NominationPools(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
        Runtime>),

    #[codec(index = 59u8)]
    RankedPolls(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedPolls,
        Runtime>),

    #[codec(index = 60u8)]
    RankedCollective(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedCollective,
        Runtime>),

    #[codec(index = 61u8)]
    FastUnstake(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FastUnstake,
        Runtime>),

    #[codec(index = 62u8)]
    MessageQueue(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<MessageQueue,
        Runtime>),

    #[codec(index = 63u8)]
    Pov(self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Pov,
        Runtime>),
}
#[automatically_derived]
impl ::core::clone::Clone for RuntimeCall {
    #[inline]
    fn clone(&self) -> RuntimeCall {
        match self {
            RuntimeCall::System(__self_0) =>
                RuntimeCall::System(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Utility(__self_0) =>
                RuntimeCall::Utility(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Babe(__self_0) =>
                RuntimeCall::Babe(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Timestamp(__self_0) =>
                RuntimeCall::Timestamp(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Indices(__self_0) =>
                RuntimeCall::Indices(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Balances(__self_0) =>
                RuntimeCall::Balances(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::ElectionProviderMultiPhase(__self_0) =>
                RuntimeCall::ElectionProviderMultiPhase(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Staking(__self_0) =>
                RuntimeCall::Staking(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Session(__self_0) =>
                RuntimeCall::Session(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Democracy(__self_0) =>
                RuntimeCall::Democracy(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Council(__self_0) =>
                RuntimeCall::Council(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::TechnicalCommittee(__self_0) =>
                RuntimeCall::TechnicalCommittee(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Elections(__self_0) =>
                RuntimeCall::Elections(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::TechnicalMembership(__self_0) =>
                RuntimeCall::TechnicalMembership(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Grandpa(__self_0) =>
                RuntimeCall::Grandpa(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Treasury(__self_0) =>
                RuntimeCall::Treasury(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::AssetRate(__self_0) =>
                RuntimeCall::AssetRate(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Contracts(__self_0) =>
                RuntimeCall::Contracts(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Sudo(__self_0) =>
                RuntimeCall::Sudo(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::ImOnline(__self_0) =>
                RuntimeCall::ImOnline(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Identity(__self_0) =>
                RuntimeCall::Identity(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Society(__self_0) =>
                RuntimeCall::Society(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Recovery(__self_0) =>
                RuntimeCall::Recovery(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Vesting(__self_0) =>
                RuntimeCall::Vesting(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Scheduler(__self_0) =>
                RuntimeCall::Scheduler(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Glutton(__self_0) =>
                RuntimeCall::Glutton(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Preimage(__self_0) =>
                RuntimeCall::Preimage(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Proxy(__self_0) =>
                RuntimeCall::Proxy(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Multisig(__self_0) =>
                RuntimeCall::Multisig(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Bounties(__self_0) =>
                RuntimeCall::Bounties(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Tips(__self_0) =>
                RuntimeCall::Tips(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Assets(__self_0) =>
                RuntimeCall::Assets(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Lottery(__self_0) =>
                RuntimeCall::Lottery(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Nis(__self_0) =>
                RuntimeCall::Nis(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Uniques(__self_0) =>
                RuntimeCall::Uniques(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Nfts(__self_0) =>
                RuntimeCall::Nfts(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::NftFractionalization(__self_0) =>
                RuntimeCall::NftFractionalization(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Salary(__self_0) =>
                RuntimeCall::Salary(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::CoreFellowship(__self_0) =>
                RuntimeCall::CoreFellowship(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::TransactionStorage(__self_0) =>
                RuntimeCall::TransactionStorage(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::VoterList(__self_0) =>
                RuntimeCall::VoterList(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::StateTrieMigration(__self_0) =>
                RuntimeCall::StateTrieMigration(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::ChildBounties(__self_0) =>
                RuntimeCall::ChildBounties(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Referenda(__self_0) =>
                RuntimeCall::Referenda(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Remark(__self_0) =>
                RuntimeCall::Remark(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::RootTesting(__self_0) =>
                RuntimeCall::RootTesting(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::ConvictionVoting(__self_0) =>
                RuntimeCall::ConvictionVoting(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Whitelist(__self_0) =>
                RuntimeCall::Whitelist(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::AllianceMotion(__self_0) =>
                RuntimeCall::AllianceMotion(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Alliance(__self_0) =>
                RuntimeCall::Alliance(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::NominationPools(__self_0) =>
                RuntimeCall::NominationPools(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::RankedPolls(__self_0) =>
                RuntimeCall::RankedPolls(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::RankedCollective(__self_0) =>
                RuntimeCall::RankedCollective(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::FastUnstake(__self_0) =>
                RuntimeCall::FastUnstake(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::MessageQueue(__self_0) =>
                RuntimeCall::MessageQueue(::core::clone::Clone::clone(__self_0)),
            RuntimeCall::Pov(__self_0) =>
                RuntimeCall::Pov(::core::clone::Clone::clone(__self_0)),
        }
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeCall { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeCall {
    #[inline]
    fn eq(&self, other: &RuntimeCall) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag &&
            match (self, other) {
                (RuntimeCall::System(__self_0), RuntimeCall::System(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeCall::Utility(__self_0),
                    RuntimeCall::Utility(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Babe(__self_0), RuntimeCall::Babe(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Timestamp(__self_0),
                    RuntimeCall::Timestamp(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Indices(__self_0),
                    RuntimeCall::Indices(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Balances(__self_0),
                    RuntimeCall::Balances(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::ElectionProviderMultiPhase(__self_0),
                    RuntimeCall::ElectionProviderMultiPhase(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Staking(__self_0),
                    RuntimeCall::Staking(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Session(__self_0),
                    RuntimeCall::Session(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Democracy(__self_0),
                    RuntimeCall::Democracy(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Council(__self_0),
                    RuntimeCall::Council(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::TechnicalCommittee(__self_0),
                    RuntimeCall::TechnicalCommittee(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Elections(__self_0),
                    RuntimeCall::Elections(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::TechnicalMembership(__self_0),
                    RuntimeCall::TechnicalMembership(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Grandpa(__self_0),
                    RuntimeCall::Grandpa(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Treasury(__self_0),
                    RuntimeCall::Treasury(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::AssetRate(__self_0),
                    RuntimeCall::AssetRate(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Contracts(__self_0),
                    RuntimeCall::Contracts(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Sudo(__self_0), RuntimeCall::Sudo(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::ImOnline(__self_0),
                    RuntimeCall::ImOnline(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Identity(__self_0),
                    RuntimeCall::Identity(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Society(__self_0),
                    RuntimeCall::Society(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Recovery(__self_0),
                    RuntimeCall::Recovery(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Vesting(__self_0),
                    RuntimeCall::Vesting(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Scheduler(__self_0),
                    RuntimeCall::Scheduler(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Glutton(__self_0),
                    RuntimeCall::Glutton(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Preimage(__self_0),
                    RuntimeCall::Preimage(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Proxy(__self_0), RuntimeCall::Proxy(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeCall::Multisig(__self_0),
                    RuntimeCall::Multisig(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Bounties(__self_0),
                    RuntimeCall::Bounties(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Tips(__self_0), RuntimeCall::Tips(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Assets(__self_0), RuntimeCall::Assets(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeCall::Lottery(__self_0),
                    RuntimeCall::Lottery(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Nis(__self_0), RuntimeCall::Nis(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Uniques(__self_0),
                    RuntimeCall::Uniques(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Nfts(__self_0), RuntimeCall::Nfts(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::NftFractionalization(__self_0),
                    RuntimeCall::NftFractionalization(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Salary(__self_0), RuntimeCall::Salary(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeCall::CoreFellowship(__self_0),
                    RuntimeCall::CoreFellowship(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::TransactionStorage(__self_0),
                    RuntimeCall::TransactionStorage(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::VoterList(__self_0),
                    RuntimeCall::VoterList(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::StateTrieMigration(__self_0),
                    RuntimeCall::StateTrieMigration(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::ChildBounties(__self_0),
                    RuntimeCall::ChildBounties(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Referenda(__self_0),
                    RuntimeCall::Referenda(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::Remark(__self_0), RuntimeCall::Remark(__arg1_0))
                    => *__self_0 == *__arg1_0,
                (RuntimeCall::RootTesting(__self_0),
                    RuntimeCall::RootTesting(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::ConvictionVoting(__self_0),
                    RuntimeCall::ConvictionVoting(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Whitelist(__self_0),
                    RuntimeCall::Whitelist(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::AllianceMotion(__self_0),
                    RuntimeCall::AllianceMotion(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Alliance(__self_0),
                    RuntimeCall::Alliance(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeCall::NominationPools(__self_0),
                    RuntimeCall::NominationPools(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::RankedPolls(__self_0),
                    RuntimeCall::RankedPolls(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::RankedCollective(__self_0),
                    RuntimeCall::RankedCollective(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::FastUnstake(__self_0),
                    RuntimeCall::FastUnstake(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::MessageQueue(__self_0),
                    RuntimeCall::MessageQueue(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                (RuntimeCall::Pov(__self_0), RuntimeCall::Pov(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                _ => unsafe { ::core::intrinsics::unreachable() }
            }
    }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeCall { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeCall {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Indices,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Democracy,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Council,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalCommittee,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Elections,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalMembership,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AssetRate,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Contracts,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Sudo,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Society,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Recovery,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Glutton,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Tips,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Assets,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Lottery,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nis,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Uniques,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nfts,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NftFractionalization,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Salary,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<CoreFellowship,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TransactionStorage,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<VoterList,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StateTrieMigration,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Remark,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RootTesting,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AllianceMotion,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Alliance,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedPolls,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedCollective,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FastUnstake,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<MessageQueue,
                Runtime>>;
        let _:
                ::core::cmp::AssertParamIsEq<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Pov,
                Runtime>>;
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Encode for RuntimeCall {
            fn encode_to<__CodecOutputEdqy: ::codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    RuntimeCall::System(ref aa) => {
                        __codec_dest_edqy.push_byte(0u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Utility(ref aa) => {
                        __codec_dest_edqy.push_byte(1u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Babe(ref aa) => {
                        __codec_dest_edqy.push_byte(2u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Timestamp(ref aa) => {
                        __codec_dest_edqy.push_byte(3u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Indices(ref aa) => {
                        __codec_dest_edqy.push_byte(5u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Balances(ref aa) => {
                        __codec_dest_edqy.push_byte(6u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::ElectionProviderMultiPhase(ref aa) => {
                        __codec_dest_edqy.push_byte(9u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Staking(ref aa) => {
                        __codec_dest_edqy.push_byte(10u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Session(ref aa) => {
                        __codec_dest_edqy.push_byte(11u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Democracy(ref aa) => {
                        __codec_dest_edqy.push_byte(12u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Council(ref aa) => {
                        __codec_dest_edqy.push_byte(13u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::TechnicalCommittee(ref aa) => {
                        __codec_dest_edqy.push_byte(14u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Elections(ref aa) => {
                        __codec_dest_edqy.push_byte(15u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::TechnicalMembership(ref aa) => {
                        __codec_dest_edqy.push_byte(16u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Grandpa(ref aa) => {
                        __codec_dest_edqy.push_byte(17u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Treasury(ref aa) => {
                        __codec_dest_edqy.push_byte(18u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::AssetRate(ref aa) => {
                        __codec_dest_edqy.push_byte(19u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Contracts(ref aa) => {
                        __codec_dest_edqy.push_byte(20u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Sudo(ref aa) => {
                        __codec_dest_edqy.push_byte(21u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::ImOnline(ref aa) => {
                        __codec_dest_edqy.push_byte(22u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Identity(ref aa) => {
                        __codec_dest_edqy.push_byte(27u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Society(ref aa) => {
                        __codec_dest_edqy.push_byte(28u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Recovery(ref aa) => {
                        __codec_dest_edqy.push_byte(29u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Vesting(ref aa) => {
                        __codec_dest_edqy.push_byte(30u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Scheduler(ref aa) => {
                        __codec_dest_edqy.push_byte(31u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Glutton(ref aa) => {
                        __codec_dest_edqy.push_byte(32u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Preimage(ref aa) => {
                        __codec_dest_edqy.push_byte(33u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Proxy(ref aa) => {
                        __codec_dest_edqy.push_byte(34u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Multisig(ref aa) => {
                        __codec_dest_edqy.push_byte(35u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Bounties(ref aa) => {
                        __codec_dest_edqy.push_byte(36u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Tips(ref aa) => {
                        __codec_dest_edqy.push_byte(37u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Assets(ref aa) => {
                        __codec_dest_edqy.push_byte(38u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Lottery(ref aa) => {
                        __codec_dest_edqy.push_byte(40u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Nis(ref aa) => {
                        __codec_dest_edqy.push_byte(41u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Uniques(ref aa) => {
                        __codec_dest_edqy.push_byte(42u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Nfts(ref aa) => {
                        __codec_dest_edqy.push_byte(43u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::NftFractionalization(ref aa) => {
                        __codec_dest_edqy.push_byte(44u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Salary(ref aa) => {
                        __codec_dest_edqy.push_byte(45u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::CoreFellowship(ref aa) => {
                        __codec_dest_edqy.push_byte(46u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::TransactionStorage(ref aa) => {
                        __codec_dest_edqy.push_byte(47u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::VoterList(ref aa) => {
                        __codec_dest_edqy.push_byte(48u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::StateTrieMigration(ref aa) => {
                        __codec_dest_edqy.push_byte(49u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::ChildBounties(ref aa) => {
                        __codec_dest_edqy.push_byte(50u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Referenda(ref aa) => {
                        __codec_dest_edqy.push_byte(51u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Remark(ref aa) => {
                        __codec_dest_edqy.push_byte(52u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::RootTesting(ref aa) => {
                        __codec_dest_edqy.push_byte(53u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::ConvictionVoting(ref aa) => {
                        __codec_dest_edqy.push_byte(54u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Whitelist(ref aa) => {
                        __codec_dest_edqy.push_byte(55u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::AllianceMotion(ref aa) => {
                        __codec_dest_edqy.push_byte(56u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Alliance(ref aa) => {
                        __codec_dest_edqy.push_byte(57u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::NominationPools(ref aa) => {
                        __codec_dest_edqy.push_byte(58u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::RankedPolls(ref aa) => {
                        __codec_dest_edqy.push_byte(59u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::RankedCollective(ref aa) => {
                        __codec_dest_edqy.push_byte(60u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::FastUnstake(ref aa) => {
                        __codec_dest_edqy.push_byte(61u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::MessageQueue(ref aa) => {
                        __codec_dest_edqy.push_byte(62u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeCall::Pov(ref aa) => {
                        __codec_dest_edqy.push_byte(63u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::codec::EncodeLike for RuntimeCall { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Decode for RuntimeCall {
            fn decode<__CodecInputEdqy: ::codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeCall`, failed to read variant byte"))?
                    {
                    __codec_x_edqy if
                        __codec_x_edqy == 0u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::System({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::System.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 1u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Utility({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Utility.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 2u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Babe({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Babe.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 3u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Timestamp({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Timestamp.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 5u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Indices({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Indices,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Indices.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 6u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Balances({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Balances.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 9u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::ElectionProviderMultiPhase({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::ElectionProviderMultiPhase.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 10u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Staking({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Staking.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 11u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Session({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Session.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 12u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Democracy({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Democracy,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Democracy.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 13u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Council({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Council,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Council.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 14u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::TechnicalCommittee({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalCommittee,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::TechnicalCommittee.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 15u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Elections({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Elections,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Elections.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 16u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::TechnicalMembership({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalMembership,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::TechnicalMembership.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 17u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Grandpa({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Grandpa.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 18u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Treasury({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Treasury.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 19u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::AssetRate({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AssetRate,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::AssetRate.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 20u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Contracts({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Contracts,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Contracts.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 21u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Sudo({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Sudo,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Sudo.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 22u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::ImOnline({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::ImOnline.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 27u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Identity({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Identity.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 28u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Society({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Society,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Society.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 29u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Recovery({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Recovery,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Recovery.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 30u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Vesting({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Vesting.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 31u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Scheduler({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Scheduler.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 32u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Glutton({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Glutton,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Glutton.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 33u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Preimage({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Preimage.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 34u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Proxy({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Proxy.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 35u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Multisig({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Multisig.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 36u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Bounties({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Bounties.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 37u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Tips({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Tips,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Tips.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 38u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Assets({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Assets,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Assets.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 40u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Lottery({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Lottery,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Lottery.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 41u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Nis({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nis,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Nis.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 42u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Uniques({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Uniques,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Uniques.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 43u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Nfts({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nfts,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Nfts.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 44u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::NftFractionalization({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NftFractionalization,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::NftFractionalization.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 45u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Salary({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Salary,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Salary.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 46u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::CoreFellowship({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<CoreFellowship,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::CoreFellowship.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 47u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::TransactionStorage({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TransactionStorage,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::TransactionStorage.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 48u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::VoterList({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<VoterList,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::VoterList.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 49u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::StateTrieMigration({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StateTrieMigration,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::StateTrieMigration.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 50u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::ChildBounties({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::ChildBounties.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 51u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Referenda({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Referenda.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 52u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Remark({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Remark,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Remark.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 53u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::RootTesting({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RootTesting,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::RootTesting.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 54u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::ConvictionVoting({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::ConvictionVoting.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 55u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Whitelist({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Whitelist.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 56u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::AllianceMotion({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AllianceMotion,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::AllianceMotion.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 57u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Alliance({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Alliance,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Alliance.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 58u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::NominationPools({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::NominationPools.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 59u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::RankedPolls({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedPolls,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::RankedPolls.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 60u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::RankedCollective({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedCollective,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::RankedCollective.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 61u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::FastUnstake({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FastUnstake,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::FastUnstake.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 62u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::MessageQueue({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<MessageQueue,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::MessageQueue.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 63u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeCall::Pov({
                                    let __codec_res_edqy =
                                        <self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Pov,
                                                Runtime> as ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeCall::Pov.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    _ =>
                        ::core::result::Result::Err(<_ as
                                    ::core::convert::Into<_>>::into("Could not decode `RuntimeCall`, variant doesn't exist")),
                }
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeCall {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeCall",
                                "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).variant(::scale_info::build::Variants::new().variant("System",
                                                                                                                                                                                                                                                    |v|
                                                                                                                                                                                                                                                        v.index(0u8 as
                                                                                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
                                                                                                                                                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>")))).variant("Utility",
                                                                                                                                                                                                                                                |v|
                                                                                                                                                                                                                                                    v.index(1u8 as
                                                                                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
                                                                                                                                                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>")))).variant("Babe",
                                                                                                                                                                                                                                            |v|
                                                                                                                                                                                                                                                v.index(2u8 as
                                                                                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
                                                                                                                                                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>")))).variant("Timestamp",
                                                                                                                                                                                                                                        |v|
                                                                                                                                                                                                                                            v.index(3u8 as
                                                                                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
                                                                                                                                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>")))).variant("Indices",
                                                                                                                                                                                                                                    |v|
                                                                                                                                                                                                                                        v.index(5u8 as
                                                                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Indices,
                                                                                                                                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>")))).variant("Balances",
                                                                                                                                                                                                                                |v|
                                                                                                                                                                                                                                    v.index(6u8 as
                                                                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
                                                                                                                                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>")))).variant("ElectionProviderMultiPhase",
                                                                                                                                                                                                                            |v|
                                                                                                                                                                                                                                v.index(9u8 as
                                                                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
                                                                                                                                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>")))).variant("Staking",
                                                                                                                                                                                                                        |v|
                                                                                                                                                                                                                            v.index(10u8 as
                                                                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
                                                                                                                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>")))).variant("Session",
                                                                                                                                                                                                                    |v|
                                                                                                                                                                                                                        v.index(11u8 as
                                                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
                                                                                                                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>")))).variant("Democracy",
                                                                                                                                                                                                                |v|
                                                                                                                                                                                                                    v.index(12u8 as
                                                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Democracy,
                                                                                                                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>")))).variant("Council",
                                                                                                                                                                                                            |v|
                                                                                                                                                                                                                v.index(13u8 as
                                                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Council,
                                                                                                                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>")))).variant("TechnicalCommittee",
                                                                                                                                                                                                        |v|
                                                                                                                                                                                                            v.index(14u8 as
                                                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalCommittee,
                                                                                                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>")))).variant("Elections",
                                                                                                                                                                                                    |v|
                                                                                                                                                                                                        v.index(15u8 as
                                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Elections,
                                                                                                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Elections, Runtime>")))).variant("TechnicalMembership",
                                                                                                                                                                                                |v|
                                                                                                                                                                                                    v.index(16u8 as
                                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalMembership,
                                                                                                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>")))).variant("Grandpa",
                                                                                                                                                                                            |v|
                                                                                                                                                                                                v.index(17u8 as
                                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
                                                                                                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>")))).variant("Treasury",
                                                                                                                                                                                        |v|
                                                                                                                                                                                            v.index(18u8 as
                                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
                                                                                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>")))).variant("AssetRate",
                                                                                                                                                                                    |v|
                                                                                                                                                                                        v.index(19u8 as
                                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AssetRate,
                                                                                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRate, Runtime>")))).variant("Contracts",
                                                                                                                                                                                |v|
                                                                                                                                                                                    v.index(20u8 as
                                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Contracts,
                                                                                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>")))).variant("Sudo",
                                                                                                                                                                            |v|
                                                                                                                                                                                v.index(21u8 as
                                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Sudo,
                                                                                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>")))).variant("ImOnline",
                                                                                                                                                                        |v|
                                                                                                                                                                            v.index(22u8 as
                                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
                                                                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>")))).variant("Identity",
                                                                                                                                                                    |v|
                                                                                                                                                                        v.index(27u8 as
                                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
                                                                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>")))).variant("Society",
                                                                                                                                                                |v|
                                                                                                                                                                    v.index(28u8 as
                                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Society,
                                                                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Society, Runtime>")))).variant("Recovery",
                                                                                                                                                            |v|
                                                                                                                                                                v.index(29u8 as
                                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Recovery,
                                                                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>")))).variant("Vesting",
                                                                                                                                                        |v|
                                                                                                                                                            v.index(30u8 as
                                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
                                                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>")))).variant("Scheduler",
                                                                                                                                                    |v|
                                                                                                                                                        v.index(31u8 as
                                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
                                                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>")))).variant("Glutton",
                                                                                                                                                |v|
                                                                                                                                                    v.index(32u8 as
                                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Glutton,
                                                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Glutton, Runtime>")))).variant("Preimage",
                                                                                                                                            |v|
                                                                                                                                                v.index(33u8 as
                                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
                                                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>")))).variant("Proxy",
                                                                                                                                        |v|
                                                                                                                                            v.index(34u8 as
                                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
                                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>")))).variant("Multisig",
                                                                                                                                    |v|
                                                                                                                                        v.index(35u8 as
                                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
                                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>")))).variant("Bounties",
                                                                                                                                |v|
                                                                                                                                    v.index(36u8 as
                                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
                                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>")))).variant("Tips",
                                                                                                                            |v|
                                                                                                                                v.index(37u8 as
                                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Tips,
                                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>")))).variant("Assets",
                                                                                                                        |v|
                                                                                                                            v.index(38u8 as
                                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Assets,
                                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>")))).variant("Lottery",
                                                                                                                    |v|
                                                                                                                        v.index(40u8 as
                                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Lottery,
                                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Lottery, Runtime>")))).variant("Nis",
                                                                                                                |v|
                                                                                                                    v.index(41u8 as
                                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nis,
                                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nis, Runtime>")))).variant("Uniques",
                                                                                                            |v|
                                                                                                                v.index(42u8 as
                                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Uniques,
                                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Uniques, Runtime>")))).variant("Nfts",
                                                                                                        |v|
                                                                                                            v.index(43u8 as
                                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nfts,
                                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nfts, Runtime>")))).variant("NftFractionalization",
                                                                                                    |v|
                                                                                                        v.index(44u8 as
                                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NftFractionalization,
                                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NftFractionalization, Runtime>")))).variant("Salary",
                                                                                                |v|
                                                                                                    v.index(45u8 as
                                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Salary,
                                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Salary, Runtime>")))).variant("CoreFellowship",
                                                                                            |v|
                                                                                                v.index(46u8 as
                                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<CoreFellowship,
                                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CoreFellowship, Runtime>")))).variant("TransactionStorage",
                                                                                        |v|
                                                                                            v.index(47u8 as
                                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TransactionStorage,
                                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TransactionStorage, Runtime>")))).variant("VoterList",
                                                                                    |v|
                                                                                        v.index(48u8 as
                                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<VoterList,
                                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>")))).variant("StateTrieMigration",
                                                                                |v|
                                                                                    v.index(49u8 as
                                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StateTrieMigration,
                                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StateTrieMigration, Runtime>")))).variant("ChildBounties",
                                                                            |v|
                                                                                v.index(50u8 as
                                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
                                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>")))).variant("Referenda",
                                                                        |v|
                                                                            v.index(51u8 as
                                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
                                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>")))).variant("Remark",
                                                                    |v|
                                                                        v.index(52u8 as
                                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Remark,
                                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Remark, Runtime>")))).variant("RootTesting",
                                                                |v|
                                                                    v.index(53u8 as
                                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RootTesting,
                                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RootTesting, Runtime>")))).variant("ConvictionVoting",
                                                            |v|
                                                                v.index(54u8 as
                                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
                                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>")))).variant("Whitelist",
                                                        |v|
                                                            v.index(55u8 as
                                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
                                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>")))).variant("AllianceMotion",
                                                    |v|
                                                        v.index(56u8 as
                                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AllianceMotion,
                                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AllianceMotion, Runtime>")))).variant("Alliance",
                                                |v|
                                                    v.index(57u8 as
                                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Alliance,
                                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Alliance, Runtime>")))).variant("NominationPools",
                                            |v|
                                                v.index(58u8 as
                                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
                                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>")))).variant("RankedPolls",
                                        |v|
                                            v.index(59u8 as
                                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedPolls,
                                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RankedPolls, Runtime>")))).variant("RankedCollective",
                                    |v|
                                        v.index(60u8 as
                                                    ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                    f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedCollective,
                                                            Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RankedCollective, Runtime>")))).variant("FastUnstake",
                                |v|
                                    v.index(61u8 as
                                                ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                                f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FastUnstake,
                                                        Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FastUnstake, Runtime>")))).variant("MessageQueue",
                            |v|
                                v.index(62u8 as
                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                            f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<MessageQueue,
                                                    Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>")))).variant("Pov",
                        |v|
                            v.index(63u8 as
                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                        f.ty::<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Pov,
                                                Runtime>>().type_name("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Pov, Runtime>")))))
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeCall {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::System(ref a0) =>
                fmt.debug_tuple("RuntimeCall::System").field(a0).finish(),
            Self::Utility(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Utility").field(a0).finish(),
            Self::Babe(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Babe").field(a0).finish(),
            Self::Timestamp(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Timestamp").field(a0).finish(),
            Self::Indices(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Indices").field(a0).finish(),
            Self::Balances(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Balances").field(a0).finish(),
            Self::ElectionProviderMultiPhase(ref a0) =>
                fmt.debug_tuple("RuntimeCall::ElectionProviderMultiPhase").field(a0).finish(),
            Self::Staking(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Staking").field(a0).finish(),
            Self::Session(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Session").field(a0).finish(),
            Self::Democracy(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Democracy").field(a0).finish(),
            Self::Council(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Council").field(a0).finish(),
            Self::TechnicalCommittee(ref a0) =>
                fmt.debug_tuple("RuntimeCall::TechnicalCommittee").field(a0).finish(),
            Self::Elections(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Elections").field(a0).finish(),
            Self::TechnicalMembership(ref a0) =>
                fmt.debug_tuple("RuntimeCall::TechnicalMembership").field(a0).finish(),
            Self::Grandpa(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Grandpa").field(a0).finish(),
            Self::Treasury(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Treasury").field(a0).finish(),
            Self::AssetRate(ref a0) =>
                fmt.debug_tuple("RuntimeCall::AssetRate").field(a0).finish(),
            Self::Contracts(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Contracts").field(a0).finish(),
            Self::Sudo(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Sudo").field(a0).finish(),
            Self::ImOnline(ref a0) =>
                fmt.debug_tuple("RuntimeCall::ImOnline").field(a0).finish(),
            Self::Identity(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Identity").field(a0).finish(),
            Self::Society(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Society").field(a0).finish(),
            Self::Recovery(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Recovery").field(a0).finish(),
            Self::Vesting(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Vesting").field(a0).finish(),
            Self::Scheduler(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Scheduler").field(a0).finish(),
            Self::Glutton(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Glutton").field(a0).finish(),
            Self::Preimage(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Preimage").field(a0).finish(),
            Self::Proxy(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Proxy").field(a0).finish(),
            Self::Multisig(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Multisig").field(a0).finish(),
            Self::Bounties(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Bounties").field(a0).finish(),
            Self::Tips(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Tips").field(a0).finish(),
            Self::Assets(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Assets").field(a0).finish(),
            Self::Lottery(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Lottery").field(a0).finish(),
            Self::Nis(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Nis").field(a0).finish(),
            Self::Uniques(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Uniques").field(a0).finish(),
            Self::Nfts(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Nfts").field(a0).finish(),
            Self::NftFractionalization(ref a0) =>
                fmt.debug_tuple("RuntimeCall::NftFractionalization").field(a0).finish(),
            Self::Salary(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Salary").field(a0).finish(),
            Self::CoreFellowship(ref a0) =>
                fmt.debug_tuple("RuntimeCall::CoreFellowship").field(a0).finish(),
            Self::TransactionStorage(ref a0) =>
                fmt.debug_tuple("RuntimeCall::TransactionStorage").field(a0).finish(),
            Self::VoterList(ref a0) =>
                fmt.debug_tuple("RuntimeCall::VoterList").field(a0).finish(),
            Self::StateTrieMigration(ref a0) =>
                fmt.debug_tuple("RuntimeCall::StateTrieMigration").field(a0).finish(),
            Self::ChildBounties(ref a0) =>
                fmt.debug_tuple("RuntimeCall::ChildBounties").field(a0).finish(),
            Self::Referenda(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Referenda").field(a0).finish(),
            Self::Remark(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Remark").field(a0).finish(),
            Self::RootTesting(ref a0) =>
                fmt.debug_tuple("RuntimeCall::RootTesting").field(a0).finish(),
            Self::ConvictionVoting(ref a0) =>
                fmt.debug_tuple("RuntimeCall::ConvictionVoting").field(a0).finish(),
            Self::Whitelist(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Whitelist").field(a0).finish(),
            Self::AllianceMotion(ref a0) =>
                fmt.debug_tuple("RuntimeCall::AllianceMotion").field(a0).finish(),
            Self::Alliance(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Alliance").field(a0).finish(),
            Self::NominationPools(ref a0) =>
                fmt.debug_tuple("RuntimeCall::NominationPools").field(a0).finish(),
            Self::RankedPolls(ref a0) =>
                fmt.debug_tuple("RuntimeCall::RankedPolls").field(a0).finish(),
            Self::RankedCollective(ref a0) =>
                fmt.debug_tuple("RuntimeCall::RankedCollective").field(a0).finish(),
            Self::FastUnstake(ref a0) =>
                fmt.debug_tuple("RuntimeCall::FastUnstake").field(a0).finish(),
            Self::MessageQueue(ref a0) =>
                fmt.debug_tuple("RuntimeCall::MessageQueue").field(a0).finish(),
            Self::Pov(ref a0) =>
                fmt.debug_tuple("RuntimeCall::Pov").field(a0).finish(),
            _ => Ok(()),
        }
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::GetDispatchInfo
    for RuntimeCall {
    fn get_dispatch_info(&self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::DispatchInfo {
        match self {
            RuntimeCall::System(call) => call.get_dispatch_info(),
            RuntimeCall::Utility(call) => call.get_dispatch_info(),
            RuntimeCall::Babe(call) => call.get_dispatch_info(),
            RuntimeCall::Timestamp(call) => call.get_dispatch_info(),
            RuntimeCall::Indices(call) => call.get_dispatch_info(),
            RuntimeCall::Balances(call) => call.get_dispatch_info(),
            RuntimeCall::ElectionProviderMultiPhase(call) =>
                call.get_dispatch_info(),
            RuntimeCall::Staking(call) => call.get_dispatch_info(),
            RuntimeCall::Session(call) => call.get_dispatch_info(),
            RuntimeCall::Democracy(call) => call.get_dispatch_info(),
            RuntimeCall::Council(call) => call.get_dispatch_info(),
            RuntimeCall::TechnicalCommittee(call) => call.get_dispatch_info(),
            RuntimeCall::Elections(call) => call.get_dispatch_info(),
            RuntimeCall::TechnicalMembership(call) =>
                call.get_dispatch_info(),
            RuntimeCall::Grandpa(call) => call.get_dispatch_info(),
            RuntimeCall::Treasury(call) => call.get_dispatch_info(),
            RuntimeCall::AssetRate(call) => call.get_dispatch_info(),
            RuntimeCall::Contracts(call) => call.get_dispatch_info(),
            RuntimeCall::Sudo(call) => call.get_dispatch_info(),
            RuntimeCall::ImOnline(call) => call.get_dispatch_info(),
            RuntimeCall::Identity(call) => call.get_dispatch_info(),
            RuntimeCall::Society(call) => call.get_dispatch_info(),
            RuntimeCall::Recovery(call) => call.get_dispatch_info(),
            RuntimeCall::Vesting(call) => call.get_dispatch_info(),
            RuntimeCall::Scheduler(call) => call.get_dispatch_info(),
            RuntimeCall::Glutton(call) => call.get_dispatch_info(),
            RuntimeCall::Preimage(call) => call.get_dispatch_info(),
            RuntimeCall::Proxy(call) => call.get_dispatch_info(),
            RuntimeCall::Multisig(call) => call.get_dispatch_info(),
            RuntimeCall::Bounties(call) => call.get_dispatch_info(),
            RuntimeCall::Tips(call) => call.get_dispatch_info(),
            RuntimeCall::Assets(call) => call.get_dispatch_info(),
            RuntimeCall::Lottery(call) => call.get_dispatch_info(),
            RuntimeCall::Nis(call) => call.get_dispatch_info(),
            RuntimeCall::Uniques(call) => call.get_dispatch_info(),
            RuntimeCall::Nfts(call) => call.get_dispatch_info(),
            RuntimeCall::NftFractionalization(call) =>
                call.get_dispatch_info(),
            RuntimeCall::Salary(call) => call.get_dispatch_info(),
            RuntimeCall::CoreFellowship(call) => call.get_dispatch_info(),
            RuntimeCall::TransactionStorage(call) => call.get_dispatch_info(),
            RuntimeCall::VoterList(call) => call.get_dispatch_info(),
            RuntimeCall::StateTrieMigration(call) => call.get_dispatch_info(),
            RuntimeCall::ChildBounties(call) => call.get_dispatch_info(),
            RuntimeCall::Referenda(call) => call.get_dispatch_info(),
            RuntimeCall::Remark(call) => call.get_dispatch_info(),
            RuntimeCall::RootTesting(call) => call.get_dispatch_info(),
            RuntimeCall::ConvictionVoting(call) => call.get_dispatch_info(),
            RuntimeCall::Whitelist(call) => call.get_dispatch_info(),
            RuntimeCall::AllianceMotion(call) => call.get_dispatch_info(),
            RuntimeCall::Alliance(call) => call.get_dispatch_info(),
            RuntimeCall::NominationPools(call) => call.get_dispatch_info(),
            RuntimeCall::RankedPolls(call) => call.get_dispatch_info(),
            RuntimeCall::RankedCollective(call) => call.get_dispatch_info(),
            RuntimeCall::FastUnstake(call) => call.get_dispatch_info(),
            RuntimeCall::MessageQueue(call) => call.get_dispatch_info(),
            RuntimeCall::Pov(call) => call.get_dispatch_info(),
        }
    }
}
#[allow(deprecated)]
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::weights::GetDispatchInfo
    for RuntimeCall {
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::GetCallMetadata
    for RuntimeCall {
    fn get_call_metadata(&self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::GetCallName;
        match self {
            RuntimeCall::System(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "System";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Utility(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Utility";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Babe(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Babe";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Timestamp(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Timestamp";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Indices(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Indices";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Balances(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Balances";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::ElectionProviderMultiPhase(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "ElectionProviderMultiPhase";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Staking(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Staking";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Session(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Session";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Democracy(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Democracy";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Council(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Council";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::TechnicalCommittee(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "TechnicalCommittee";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Elections(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Elections";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::TechnicalMembership(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "TechnicalMembership";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Grandpa(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Grandpa";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Treasury(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Treasury";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::AssetRate(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "AssetRate";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Contracts(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Contracts";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Sudo(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Sudo";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::ImOnline(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "ImOnline";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Identity(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Identity";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Society(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Society";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Recovery(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Recovery";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Vesting(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Vesting";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Scheduler(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Scheduler";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Glutton(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Glutton";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Preimage(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Preimage";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Proxy(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Proxy";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Multisig(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Multisig";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Bounties(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Bounties";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Tips(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Tips";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Assets(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Assets";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Lottery(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Lottery";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Nis(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Nis";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Uniques(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Uniques";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Nfts(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Nfts";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::NftFractionalization(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "NftFractionalization";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Salary(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Salary";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::CoreFellowship(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "CoreFellowship";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::TransactionStorage(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "TransactionStorage";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::VoterList(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "VoterList";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::StateTrieMigration(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "StateTrieMigration";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::ChildBounties(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "ChildBounties";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Referenda(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Referenda";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Remark(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Remark";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::RootTesting(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "RootTesting";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::ConvictionVoting(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "ConvictionVoting";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Whitelist(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Whitelist";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::AllianceMotion(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "AllianceMotion";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Alliance(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Alliance";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::NominationPools(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "NominationPools";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::RankedPolls(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "RankedPolls";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::RankedCollective(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "RankedCollective";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::FastUnstake(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "FastUnstake";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::MessageQueue(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "MessageQueue";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
            RuntimeCall::Pov(call) => {
                let function_name = call.get_call_name();
                let pallet_name = "Pov";
                self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallMetadata {
                    function_name,
                    pallet_name,
                }
            }
        }
    }
    fn get_module_names() -> &'static [&'static str] {
        &["System", "Utility", "Babe", "Timestamp", "Indices", "Balances",
                    "ElectionProviderMultiPhase", "Staking", "Session",
                    "Democracy", "Council", "TechnicalCommittee", "Elections",
                    "TechnicalMembership", "Grandpa", "Treasury", "AssetRate",
                    "Contracts", "Sudo", "ImOnline", "Identity", "Society",
                    "Recovery", "Vesting", "Scheduler", "Glutton", "Preimage",
                    "Proxy", "Multisig", "Bounties", "Tips", "Assets",
                    "Lottery", "Nis", "Uniques", "Nfts", "NftFractionalization",
                    "Salary", "CoreFellowship", "TransactionStorage",
                    "VoterList", "StateTrieMigration", "ChildBounties",
                    "Referenda", "Remark", "RootTesting", "ConvictionVoting",
                    "Whitelist", "AllianceMotion", "Alliance",
                    "NominationPools", "RankedPolls", "RankedCollective",
                    "FastUnstake", "MessageQueue", "Pov"]
    }
    fn get_call_names(module: &str) -> &'static [&'static str] {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::{
            Callable, GetCallName,
        };
        match module {
            "System" =>
                <<System as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Utility" =>
                <<Utility as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Babe" =>
                <<Babe as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Timestamp" =>
                <<Timestamp as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Indices" =>
                <<Indices as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Balances" =>
                <<Balances as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "ElectionProviderMultiPhase" =>
                <<ElectionProviderMultiPhase as
                        Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Staking" =>
                <<Staking as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Session" =>
                <<Session as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Democracy" =>
                <<Democracy as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Council" =>
                <<Council as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "TechnicalCommittee" =>
                <<TechnicalCommittee as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Elections" =>
                <<Elections as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "TechnicalMembership" =>
                <<TechnicalMembership as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Grandpa" =>
                <<Grandpa as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Treasury" =>
                <<Treasury as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "AssetRate" =>
                <<AssetRate as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Contracts" =>
                <<Contracts as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Sudo" =>
                <<Sudo as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "ImOnline" =>
                <<ImOnline as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Identity" =>
                <<Identity as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Society" =>
                <<Society as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Recovery" =>
                <<Recovery as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Vesting" =>
                <<Vesting as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Scheduler" =>
                <<Scheduler as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Glutton" =>
                <<Glutton as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Preimage" =>
                <<Preimage as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Proxy" =>
                <<Proxy as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Multisig" =>
                <<Multisig as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Bounties" =>
                <<Bounties as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Tips" =>
                <<Tips as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Assets" =>
                <<Assets as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Lottery" =>
                <<Lottery as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Nis" =>
                <<Nis as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Uniques" =>
                <<Uniques as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Nfts" =>
                <<Nfts as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "NftFractionalization" =>
                <<NftFractionalization as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Salary" =>
                <<Salary as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "CoreFellowship" =>
                <<CoreFellowship as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "TransactionStorage" =>
                <<TransactionStorage as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "VoterList" =>
                <<VoterList as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "StateTrieMigration" =>
                <<StateTrieMigration as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "ChildBounties" =>
                <<ChildBounties as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Referenda" =>
                <<Referenda as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Remark" =>
                <<Remark as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "RootTesting" =>
                <<RootTesting as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "ConvictionVoting" =>
                <<ConvictionVoting as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Whitelist" =>
                <<Whitelist as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "AllianceMotion" =>
                <<AllianceMotion as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Alliance" =>
                <<Alliance as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "NominationPools" =>
                <<NominationPools as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "RankedPolls" =>
                <<RankedPolls as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "RankedCollective" =>
                <<RankedCollective as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "FastUnstake" =>
                <<FastUnstake as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "MessageQueue" =>
                <<MessageQueue as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            "Pov" =>
                <<Pov as Callable<Runtime>>::RuntimeCall as
                        GetCallName>::get_call_names(),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::Dispatchable
    for RuntimeCall {
    type RuntimeOrigin = RuntimeOrigin;
    type Config = RuntimeCall;
    type Info =
        self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::DispatchInfo;
    type PostInfo =
        self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::PostDispatchInfo;
    fn dispatch(self, origin: RuntimeOrigin)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::DispatchResultWithPostInfo {
        if !<Self::RuntimeOrigin as
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OriginTrait>::filter_call(&origin,
                        &self) {
                return self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::result::Result::Err(frame_system::Error::<Runtime>::CallFiltered.into());
            }
        self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(self,
            origin)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable
    for RuntimeCall {
    type RuntimeOrigin = RuntimeOrigin;
    fn dispatch_bypass_filter(self, origin: RuntimeOrigin)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::DispatchResultWithPostInfo {
        match self {
            RuntimeCall::System(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Utility(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Babe(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Timestamp(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Indices(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Balances(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::ElectionProviderMultiPhase(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Staking(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Session(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Democracy(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Council(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::TechnicalCommittee(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Elections(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::TechnicalMembership(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Grandpa(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Treasury(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::AssetRate(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Contracts(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Sudo(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::ImOnline(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Identity(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Society(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Recovery(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Vesting(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Scheduler(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Glutton(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Preimage(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Proxy(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Multisig(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Bounties(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Tips(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Assets(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Lottery(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Nis(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Uniques(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Nfts(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::NftFractionalization(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Salary(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::CoreFellowship(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::TransactionStorage(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::VoterList(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::StateTrieMigration(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::ChildBounties(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Referenda(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Remark(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::RootTesting(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::ConvictionVoting(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Whitelist(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::AllianceMotion(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Alliance(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::NominationPools(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::RankedPolls(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::RankedCollective(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::FastUnstake(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::MessageQueue(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
            RuntimeCall::Pov(call) =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::UnfilteredDispatchable::dispatch_bypass_filter(call,
                    origin),
        }
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
            Runtime>> {
        match self { RuntimeCall::System(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<System,
            Runtime>) -> Self {
        RuntimeCall::System(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
            Runtime>> {
        match self { RuntimeCall::Utility(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Utility,
            Runtime>) -> Self {
        RuntimeCall::Utility(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
            Runtime>> {
        match self { RuntimeCall::Babe(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Babe,
            Runtime>) -> Self {
        RuntimeCall::Babe(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
            Runtime>> {
        match self { RuntimeCall::Timestamp(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Timestamp,
            Runtime>) -> Self {
        RuntimeCall::Timestamp(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Indices,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Indices,
            Runtime>> {
        match self { RuntimeCall::Indices(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Indices,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Indices,
            Runtime>) -> Self {
        RuntimeCall::Indices(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
            Runtime>> {
        match self { RuntimeCall::Balances(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Balances,
            Runtime>) -> Self {
        RuntimeCall::Balances(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
            Runtime>> {
        match self {
            RuntimeCall::ElectionProviderMultiPhase(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ElectionProviderMultiPhase,
            Runtime>) -> Self {
        RuntimeCall::ElectionProviderMultiPhase(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
            Runtime>> {
        match self { RuntimeCall::Staking(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Staking,
            Runtime>) -> Self {
        RuntimeCall::Staking(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
            Runtime>> {
        match self { RuntimeCall::Session(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Session,
            Runtime>) -> Self {
        RuntimeCall::Session(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Democracy,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Democracy,
            Runtime>> {
        match self { RuntimeCall::Democracy(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Democracy,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Democracy,
            Runtime>) -> Self {
        RuntimeCall::Democracy(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Council,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Council,
            Runtime>> {
        match self { RuntimeCall::Council(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Council,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Council,
            Runtime>) -> Self {
        RuntimeCall::Council(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalCommittee,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalCommittee,
            Runtime>> {
        match self {
            RuntimeCall::TechnicalCommittee(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalCommittee,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalCommittee,
            Runtime>) -> Self {
        RuntimeCall::TechnicalCommittee(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Elections,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Elections,
            Runtime>> {
        match self { RuntimeCall::Elections(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Elections,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Elections,
            Runtime>) -> Self {
        RuntimeCall::Elections(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalMembership,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalMembership,
            Runtime>> {
        match self {
            RuntimeCall::TechnicalMembership(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalMembership,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TechnicalMembership,
            Runtime>) -> Self {
        RuntimeCall::TechnicalMembership(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
            Runtime>> {
        match self { RuntimeCall::Grandpa(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Grandpa,
            Runtime>) -> Self {
        RuntimeCall::Grandpa(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
            Runtime>> {
        match self { RuntimeCall::Treasury(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Treasury,
            Runtime>) -> Self {
        RuntimeCall::Treasury(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AssetRate,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AssetRate,
            Runtime>> {
        match self { RuntimeCall::AssetRate(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AssetRate,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AssetRate,
            Runtime>) -> Self {
        RuntimeCall::AssetRate(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Contracts,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Contracts,
            Runtime>> {
        match self { RuntimeCall::Contracts(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Contracts,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Contracts,
            Runtime>) -> Self {
        RuntimeCall::Contracts(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Sudo,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Sudo,
            Runtime>> {
        match self { RuntimeCall::Sudo(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Sudo,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Sudo,
            Runtime>) -> Self {
        RuntimeCall::Sudo(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
            Runtime>> {
        match self { RuntimeCall::ImOnline(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ImOnline,
            Runtime>) -> Self {
        RuntimeCall::ImOnline(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
            Runtime>> {
        match self { RuntimeCall::Identity(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Identity,
            Runtime>) -> Self {
        RuntimeCall::Identity(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Society,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Society,
            Runtime>> {
        match self { RuntimeCall::Society(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Society,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Society,
            Runtime>) -> Self {
        RuntimeCall::Society(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Recovery,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Recovery,
            Runtime>> {
        match self { RuntimeCall::Recovery(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Recovery,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Recovery,
            Runtime>) -> Self {
        RuntimeCall::Recovery(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
            Runtime>> {
        match self { RuntimeCall::Vesting(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Vesting,
            Runtime>) -> Self {
        RuntimeCall::Vesting(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
            Runtime>> {
        match self { RuntimeCall::Scheduler(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Scheduler,
            Runtime>) -> Self {
        RuntimeCall::Scheduler(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Glutton,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Glutton,
            Runtime>> {
        match self { RuntimeCall::Glutton(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Glutton,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Glutton,
            Runtime>) -> Self {
        RuntimeCall::Glutton(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
            Runtime>> {
        match self { RuntimeCall::Preimage(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Preimage,
            Runtime>) -> Self {
        RuntimeCall::Preimage(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
            Runtime>> {
        match self { RuntimeCall::Proxy(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Proxy,
            Runtime>) -> Self {
        RuntimeCall::Proxy(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
            Runtime>> {
        match self { RuntimeCall::Multisig(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Multisig,
            Runtime>) -> Self {
        RuntimeCall::Multisig(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
            Runtime>> {
        match self { RuntimeCall::Bounties(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Bounties,
            Runtime>) -> Self {
        RuntimeCall::Bounties(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Tips,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Tips,
            Runtime>> {
        match self { RuntimeCall::Tips(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Tips,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Tips,
            Runtime>) -> Self {
        RuntimeCall::Tips(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Assets,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Assets,
            Runtime>> {
        match self { RuntimeCall::Assets(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Assets,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Assets,
            Runtime>) -> Self {
        RuntimeCall::Assets(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Lottery,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Lottery,
            Runtime>> {
        match self { RuntimeCall::Lottery(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Lottery,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Lottery,
            Runtime>) -> Self {
        RuntimeCall::Lottery(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nis,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nis,
            Runtime>> {
        match self { RuntimeCall::Nis(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nis,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nis,
            Runtime>) -> Self {
        RuntimeCall::Nis(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Uniques,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Uniques,
            Runtime>> {
        match self { RuntimeCall::Uniques(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Uniques,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Uniques,
            Runtime>) -> Self {
        RuntimeCall::Uniques(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nfts,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nfts,
            Runtime>> {
        match self { RuntimeCall::Nfts(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nfts,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Nfts,
            Runtime>) -> Self {
        RuntimeCall::Nfts(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NftFractionalization,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NftFractionalization,
            Runtime>> {
        match self {
            RuntimeCall::NftFractionalization(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NftFractionalization,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NftFractionalization,
            Runtime>) -> Self {
        RuntimeCall::NftFractionalization(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Salary,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Salary,
            Runtime>> {
        match self { RuntimeCall::Salary(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Salary,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Salary,
            Runtime>) -> Self {
        RuntimeCall::Salary(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<CoreFellowship,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<CoreFellowship,
            Runtime>> {
        match self {
            RuntimeCall::CoreFellowship(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<CoreFellowship,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<CoreFellowship,
            Runtime>) -> Self {
        RuntimeCall::CoreFellowship(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TransactionStorage,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TransactionStorage,
            Runtime>> {
        match self {
            RuntimeCall::TransactionStorage(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TransactionStorage,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<TransactionStorage,
            Runtime>) -> Self {
        RuntimeCall::TransactionStorage(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<VoterList,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<VoterList,
            Runtime>> {
        match self { RuntimeCall::VoterList(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<VoterList,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<VoterList,
            Runtime>) -> Self {
        RuntimeCall::VoterList(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StateTrieMigration,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StateTrieMigration,
            Runtime>> {
        match self {
            RuntimeCall::StateTrieMigration(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StateTrieMigration,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<StateTrieMigration,
            Runtime>) -> Self {
        RuntimeCall::StateTrieMigration(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
            Runtime>> {
        match self {
            RuntimeCall::ChildBounties(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ChildBounties,
            Runtime>) -> Self {
        RuntimeCall::ChildBounties(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
            Runtime>> {
        match self { RuntimeCall::Referenda(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Referenda,
            Runtime>) -> Self {
        RuntimeCall::Referenda(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Remark,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Remark,
            Runtime>> {
        match self { RuntimeCall::Remark(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Remark,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Remark,
            Runtime>) -> Self {
        RuntimeCall::Remark(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RootTesting,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RootTesting,
            Runtime>> {
        match self {
            RuntimeCall::RootTesting(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RootTesting,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RootTesting,
            Runtime>) -> Self {
        RuntimeCall::RootTesting(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
            Runtime>> {
        match self {
            RuntimeCall::ConvictionVoting(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<ConvictionVoting,
            Runtime>) -> Self {
        RuntimeCall::ConvictionVoting(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
            Runtime>> {
        match self { RuntimeCall::Whitelist(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Whitelist,
            Runtime>) -> Self {
        RuntimeCall::Whitelist(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AllianceMotion,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AllianceMotion,
            Runtime>> {
        match self {
            RuntimeCall::AllianceMotion(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AllianceMotion,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<AllianceMotion,
            Runtime>) -> Self {
        RuntimeCall::AllianceMotion(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Alliance,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Alliance,
            Runtime>> {
        match self { RuntimeCall::Alliance(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Alliance,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Alliance,
            Runtime>) -> Self {
        RuntimeCall::Alliance(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
            Runtime>> {
        match self {
            RuntimeCall::NominationPools(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<NominationPools,
            Runtime>) -> Self {
        RuntimeCall::NominationPools(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedPolls,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedPolls,
            Runtime>> {
        match self {
            RuntimeCall::RankedPolls(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedPolls,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedPolls,
            Runtime>) -> Self {
        RuntimeCall::RankedPolls(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedCollective,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedCollective,
            Runtime>> {
        match self {
            RuntimeCall::RankedCollective(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedCollective,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<RankedCollective,
            Runtime>) -> Self {
        RuntimeCall::RankedCollective(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FastUnstake,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FastUnstake,
            Runtime>> {
        match self {
            RuntimeCall::FastUnstake(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FastUnstake,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<FastUnstake,
            Runtime>) -> Self {
        RuntimeCall::FastUnstake(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<MessageQueue,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<MessageQueue,
            Runtime>> {
        match self {
            RuntimeCall::MessageQueue(call) => Some(call),
            _ => None,
        }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<MessageQueue,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<MessageQueue,
            Runtime>) -> Self {
        RuntimeCall::MessageQueue(call)
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::IsSubType<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Pov,
    Runtime>> for RuntimeCall {
    #[allow(unreachable_patterns)]
    fn is_sub_type(&self)
        ->
            Option<&self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Pov,
            Runtime>> {
        match self { RuntimeCall::Pov(call) => Some(call), _ => None, }
    }
}
impl From<self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Pov,
    Runtime>> for RuntimeCall {
    fn from(call:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch::CallableCallFor<Pov,
            Runtime>) -> Self {
        RuntimeCall::Pov(call)
    }
}
impl Runtime {
    fn metadata_ir()
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::MetadataIR {
        let rt = Runtime;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::MetadataIR {
            pallets: <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "System",
                                index: 0u8,
                                storage: Some(frame_system::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(frame_system::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<frame_system::Event<Runtime>>(),
                                    }),
                                constants: frame_system::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: frame_system::Pallet::<Runtime>::error_metadata(),
                                docs: frame_system::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Utility",
                                index: 1u8,
                                storage: None,
                                calls: Some(pallet_utility::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_utility::Event>(),
                                    }),
                                constants: pallet_utility::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_utility::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_utility::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Babe",
                                index: 2u8,
                                storage: Some(pallet_babe::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_babe::Pallet::<Runtime>::call_functions()),
                                event: None,
                                constants: pallet_babe::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_babe::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_babe::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Timestamp",
                                index: 3u8,
                                storage: Some(pallet_timestamp::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_timestamp::Pallet::<Runtime>::call_functions()),
                                event: None,
                                constants: pallet_timestamp::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_timestamp::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_timestamp::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Authorship",
                                index: 4u8,
                                storage: Some(pallet_authorship::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_authorship::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_authorship::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_authorship::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Indices",
                                index: 5u8,
                                storage: Some(pallet_indices::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_indices::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_indices::Event<Runtime>>(),
                                    }),
                                constants: pallet_indices::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_indices::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_indices::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Balances",
                                index: 6u8,
                                storage: Some(pallet_balances::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_balances::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_balances::Event<Runtime>>(),
                                    }),
                                constants: pallet_balances::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_balances::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_balances::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "TransactionPayment",
                                index: 7u8,
                                storage: Some(pallet_transaction_payment::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_transaction_payment::Event<Runtime>>(),
                                    }),
                                constants: pallet_transaction_payment::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_transaction_payment::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_transaction_payment::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "AssetTxPayment",
                                index: 8u8,
                                storage: None,
                                calls: None,
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_asset_tx_payment::Event<Runtime>>(),
                                    }),
                                constants: pallet_asset_tx_payment::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_asset_tx_payment::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_asset_tx_payment::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "ElectionProviderMultiPhase",
                                index: 9u8,
                                storage: Some(pallet_election_provider_multi_phase::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_election_provider_multi_phase::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_election_provider_multi_phase::Event<Runtime>>(),
                                    }),
                                constants: pallet_election_provider_multi_phase::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_election_provider_multi_phase::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_election_provider_multi_phase::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Staking",
                                index: 10u8,
                                storage: Some(pallet_staking::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_staking::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_staking::Event<Runtime>>(),
                                    }),
                                constants: pallet_staking::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_staking::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_staking::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Session",
                                index: 11u8,
                                storage: Some(pallet_session::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_session::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_session::Event>(),
                                    }),
                                constants: pallet_session::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_session::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_session::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Democracy",
                                index: 12u8,
                                storage: Some(pallet_democracy::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_democracy::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_democracy::Event<Runtime>>(),
                                    }),
                                constants: pallet_democracy::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_democracy::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_democracy::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Council",
                                index: 13u8,
                                storage: Some(pallet_collective::Pallet::<Runtime,
                                            pallet_collective::Instance1>::storage_metadata()),
                                calls: Some(pallet_collective::Pallet::<Runtime,
                                            pallet_collective::Instance1>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_collective::Event<Runtime,
                                                pallet_collective::Instance1>>(),
                                    }),
                                constants: pallet_collective::Pallet::<Runtime,
                                        pallet_collective::Instance1>::pallet_constants_metadata(),
                                error: pallet_collective::Pallet::<Runtime,
                                        pallet_collective::Instance1>::error_metadata(),
                                docs: pallet_collective::Pallet::<Runtime,
                                        pallet_collective::Instance1>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "TechnicalCommittee",
                                index: 14u8,
                                storage: Some(pallet_collective::Pallet::<Runtime,
                                            pallet_collective::Instance2>::storage_metadata()),
                                calls: Some(pallet_collective::Pallet::<Runtime,
                                            pallet_collective::Instance2>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_collective::Event<Runtime,
                                                pallet_collective::Instance2>>(),
                                    }),
                                constants: pallet_collective::Pallet::<Runtime,
                                        pallet_collective::Instance2>::pallet_constants_metadata(),
                                error: pallet_collective::Pallet::<Runtime,
                                        pallet_collective::Instance2>::error_metadata(),
                                docs: pallet_collective::Pallet::<Runtime,
                                        pallet_collective::Instance2>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Elections",
                                index: 15u8,
                                storage: Some(pallet_elections_phragmen::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_elections_phragmen::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_elections_phragmen::Event<Runtime>>(),
                                    }),
                                constants: pallet_elections_phragmen::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_elections_phragmen::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_elections_phragmen::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "TechnicalMembership",
                                index: 16u8,
                                storage: Some(pallet_membership::Pallet::<Runtime,
                                            pallet_membership::Instance1>::storage_metadata()),
                                calls: Some(pallet_membership::Pallet::<Runtime,
                                            pallet_membership::Instance1>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_membership::Event<Runtime,
                                                pallet_membership::Instance1>>(),
                                    }),
                                constants: pallet_membership::Pallet::<Runtime,
                                        pallet_membership::Instance1>::pallet_constants_metadata(),
                                error: pallet_membership::Pallet::<Runtime,
                                        pallet_membership::Instance1>::error_metadata(),
                                docs: pallet_membership::Pallet::<Runtime,
                                        pallet_membership::Instance1>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Grandpa",
                                index: 17u8,
                                storage: Some(pallet_grandpa::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_grandpa::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_grandpa::Event>(),
                                    }),
                                constants: pallet_grandpa::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_grandpa::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_grandpa::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Treasury",
                                index: 18u8,
                                storage: Some(pallet_treasury::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_treasury::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_treasury::Event<Runtime>>(),
                                    }),
                                constants: pallet_treasury::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_treasury::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_treasury::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "AssetRate",
                                index: 19u8,
                                storage: Some(pallet_asset_rate::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_asset_rate::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_asset_rate::Event<Runtime>>(),
                                    }),
                                constants: pallet_asset_rate::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_asset_rate::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_asset_rate::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Contracts",
                                index: 20u8,
                                storage: Some(pallet_contracts::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_contracts::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_contracts::Event<Runtime>>(),
                                    }),
                                constants: pallet_contracts::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_contracts::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_contracts::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Sudo",
                                index: 21u8,
                                storage: Some(pallet_sudo::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_sudo::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_sudo::Event<Runtime>>(),
                                    }),
                                constants: pallet_sudo::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_sudo::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_sudo::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "ImOnline",
                                index: 22u8,
                                storage: Some(pallet_im_online::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_im_online::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_im_online::Event<Runtime>>(),
                                    }),
                                constants: pallet_im_online::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_im_online::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_im_online::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "AuthorityDiscovery",
                                index: 23u8,
                                storage: Some(pallet_authority_discovery::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_authority_discovery::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_authority_discovery::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_authority_discovery::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Offences",
                                index: 24u8,
                                storage: Some(pallet_offences::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_offences::Event>(),
                                    }),
                                constants: pallet_offences::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_offences::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_offences::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Historical",
                                index: 25u8,
                                storage: None,
                                calls: None,
                                event: None,
                                constants: pallet_session_historical::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_session_historical::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_session_historical::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "RandomnessCollectiveFlip",
                                index: 26u8,
                                storage: Some(pallet_insecure_randomness_collective_flip::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_insecure_randomness_collective_flip::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_insecure_randomness_collective_flip::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_insecure_randomness_collective_flip::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Identity",
                                index: 27u8,
                                storage: Some(pallet_identity::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_identity::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_identity::Event<Runtime>>(),
                                    }),
                                constants: pallet_identity::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_identity::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_identity::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Society",
                                index: 28u8,
                                storage: Some(pallet_society::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_society::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_society::Event<Runtime>>(),
                                    }),
                                constants: pallet_society::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_society::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_society::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Recovery",
                                index: 29u8,
                                storage: Some(pallet_recovery::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_recovery::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_recovery::Event<Runtime>>(),
                                    }),
                                constants: pallet_recovery::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_recovery::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_recovery::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Vesting",
                                index: 30u8,
                                storage: Some(pallet_vesting::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_vesting::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_vesting::Event<Runtime>>(),
                                    }),
                                constants: pallet_vesting::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_vesting::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_vesting::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Scheduler",
                                index: 31u8,
                                storage: Some(pallet_scheduler::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_scheduler::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_scheduler::Event<Runtime>>(),
                                    }),
                                constants: pallet_scheduler::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_scheduler::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_scheduler::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Glutton",
                                index: 32u8,
                                storage: Some(pallet_glutton::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_glutton::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_glutton::Event>(),
                                    }),
                                constants: pallet_glutton::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_glutton::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_glutton::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Preimage",
                                index: 33u8,
                                storage: Some(pallet_preimage::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_preimage::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_preimage::Event<Runtime>>(),
                                    }),
                                constants: pallet_preimage::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_preimage::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_preimage::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Proxy",
                                index: 34u8,
                                storage: Some(pallet_proxy::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_proxy::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_proxy::Event<Runtime>>(),
                                    }),
                                constants: pallet_proxy::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_proxy::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_proxy::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Multisig",
                                index: 35u8,
                                storage: Some(pallet_multisig::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_multisig::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_multisig::Event<Runtime>>(),
                                    }),
                                constants: pallet_multisig::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_multisig::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_multisig::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Bounties",
                                index: 36u8,
                                storage: Some(pallet_bounties::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_bounties::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_bounties::Event<Runtime>>(),
                                    }),
                                constants: pallet_bounties::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_bounties::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_bounties::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Tips",
                                index: 37u8,
                                storage: Some(pallet_tips::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_tips::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_tips::Event<Runtime>>(),
                                    }),
                                constants: pallet_tips::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_tips::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_tips::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Assets",
                                index: 38u8,
                                storage: Some(pallet_assets::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_assets::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_assets::Event<Runtime>>(),
                                    }),
                                constants: pallet_assets::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_assets::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_assets::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Mmr",
                                index: 39u8,
                                storage: Some(pallet_mmr::Pallet::<Runtime>::storage_metadata()),
                                calls: None,
                                event: None,
                                constants: pallet_mmr::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_mmr::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_mmr::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Lottery",
                                index: 40u8,
                                storage: Some(pallet_lottery::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_lottery::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_lottery::Event<Runtime>>(),
                                    }),
                                constants: pallet_lottery::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_lottery::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_lottery::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Nis",
                                index: 41u8,
                                storage: Some(pallet_nis::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_nis::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_nis::Event<Runtime>>(),
                                    }),
                                constants: pallet_nis::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_nis::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_nis::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Uniques",
                                index: 42u8,
                                storage: Some(pallet_uniques::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_uniques::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_uniques::Event<Runtime>>(),
                                    }),
                                constants: pallet_uniques::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_uniques::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_uniques::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Nfts",
                                index: 43u8,
                                storage: Some(pallet_nfts::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_nfts::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_nfts::Event<Runtime>>(),
                                    }),
                                constants: pallet_nfts::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_nfts::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_nfts::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "NftFractionalization",
                                index: 44u8,
                                storage: Some(pallet_nft_fractionalization::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_nft_fractionalization::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_nft_fractionalization::Event<Runtime>>(),
                                    }),
                                constants: pallet_nft_fractionalization::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_nft_fractionalization::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_nft_fractionalization::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Salary",
                                index: 45u8,
                                storage: Some(pallet_salary::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_salary::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_salary::Event<Runtime>>(),
                                    }),
                                constants: pallet_salary::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_salary::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_salary::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "CoreFellowship",
                                index: 46u8,
                                storage: Some(pallet_core_fellowship::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_core_fellowship::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_core_fellowship::Event<Runtime>>(),
                                    }),
                                constants: pallet_core_fellowship::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_core_fellowship::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_core_fellowship::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "TransactionStorage",
                                index: 47u8,
                                storage: Some(pallet_transaction_storage::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_transaction_storage::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_transaction_storage::Event<Runtime>>(),
                                    }),
                                constants: pallet_transaction_storage::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_transaction_storage::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_transaction_storage::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "VoterList",
                                index: 48u8,
                                storage: Some(pallet_bags_list::Pallet::<Runtime,
                                            pallet_bags_list::Instance1>::storage_metadata()),
                                calls: Some(pallet_bags_list::Pallet::<Runtime,
                                            pallet_bags_list::Instance1>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_bags_list::Event<Runtime,
                                                pallet_bags_list::Instance1>>(),
                                    }),
                                constants: pallet_bags_list::Pallet::<Runtime,
                                        pallet_bags_list::Instance1>::pallet_constants_metadata(),
                                error: pallet_bags_list::Pallet::<Runtime,
                                        pallet_bags_list::Instance1>::error_metadata(),
                                docs: pallet_bags_list::Pallet::<Runtime,
                                        pallet_bags_list::Instance1>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "StateTrieMigration",
                                index: 49u8,
                                storage: Some(pallet_state_trie_migration::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_state_trie_migration::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_state_trie_migration::Event<Runtime>>(),
                                    }),
                                constants: pallet_state_trie_migration::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_state_trie_migration::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_state_trie_migration::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "ChildBounties",
                                index: 50u8,
                                storage: Some(pallet_child_bounties::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_child_bounties::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_child_bounties::Event<Runtime>>(),
                                    }),
                                constants: pallet_child_bounties::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_child_bounties::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_child_bounties::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Referenda",
                                index: 51u8,
                                storage: Some(pallet_referenda::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_referenda::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_referenda::Event<Runtime>>(),
                                    }),
                                constants: pallet_referenda::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_referenda::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_referenda::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Remark",
                                index: 52u8,
                                storage: None,
                                calls: Some(pallet_remark::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_remark::Event<Runtime>>(),
                                    }),
                                constants: pallet_remark::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_remark::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_remark::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "RootTesting",
                                index: 53u8,
                                storage: None,
                                calls: Some(pallet_root_testing::Pallet::<Runtime>::call_functions()),
                                event: None,
                                constants: pallet_root_testing::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_root_testing::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_root_testing::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "ConvictionVoting",
                                index: 54u8,
                                storage: Some(pallet_conviction_voting::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_conviction_voting::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_conviction_voting::Event<Runtime>>(),
                                    }),
                                constants: pallet_conviction_voting::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_conviction_voting::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_conviction_voting::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Whitelist",
                                index: 55u8,
                                storage: Some(pallet_whitelist::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_whitelist::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_whitelist::Event<Runtime>>(),
                                    }),
                                constants: pallet_whitelist::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_whitelist::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_whitelist::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "AllianceMotion",
                                index: 56u8,
                                storage: Some(pallet_collective::Pallet::<Runtime,
                                            pallet_collective::Instance3>::storage_metadata()),
                                calls: Some(pallet_collective::Pallet::<Runtime,
                                            pallet_collective::Instance3>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_collective::Event<Runtime,
                                                pallet_collective::Instance3>>(),
                                    }),
                                constants: pallet_collective::Pallet::<Runtime,
                                        pallet_collective::Instance3>::pallet_constants_metadata(),
                                error: pallet_collective::Pallet::<Runtime,
                                        pallet_collective::Instance3>::error_metadata(),
                                docs: pallet_collective::Pallet::<Runtime,
                                        pallet_collective::Instance3>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Alliance",
                                index: 57u8,
                                storage: Some(pallet_alliance::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_alliance::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_alliance::Event<Runtime>>(),
                                    }),
                                constants: pallet_alliance::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_alliance::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_alliance::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "NominationPools",
                                index: 58u8,
                                storage: Some(pallet_nomination_pools::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_nomination_pools::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_nomination_pools::Event<Runtime>>(),
                                    }),
                                constants: pallet_nomination_pools::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_nomination_pools::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_nomination_pools::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "RankedPolls",
                                index: 59u8,
                                storage: Some(pallet_referenda::Pallet::<Runtime,
                                            pallet_referenda::Instance2>::storage_metadata()),
                                calls: Some(pallet_referenda::Pallet::<Runtime,
                                            pallet_referenda::Instance2>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_referenda::Event<Runtime,
                                                pallet_referenda::Instance2>>(),
                                    }),
                                constants: pallet_referenda::Pallet::<Runtime,
                                        pallet_referenda::Instance2>::pallet_constants_metadata(),
                                error: pallet_referenda::Pallet::<Runtime,
                                        pallet_referenda::Instance2>::error_metadata(),
                                docs: pallet_referenda::Pallet::<Runtime,
                                        pallet_referenda::Instance2>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "RankedCollective",
                                index: 60u8,
                                storage: Some(pallet_ranked_collective::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_ranked_collective::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_ranked_collective::Event<Runtime>>(),
                                    }),
                                constants: pallet_ranked_collective::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_ranked_collective::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_ranked_collective::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "FastUnstake",
                                index: 61u8,
                                storage: Some(pallet_fast_unstake::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_fast_unstake::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_fast_unstake::Event<Runtime>>(),
                                    }),
                                constants: pallet_fast_unstake::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_fast_unstake::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_fast_unstake::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "MessageQueue",
                                index: 62u8,
                                storage: Some(pallet_message_queue::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(pallet_message_queue::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_message_queue::Event<Runtime>>(),
                                    }),
                                constants: pallet_message_queue::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_message_queue::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_message_queue::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Pov",
                                index: 63u8,
                                storage: Some(frame_benchmarking_pallet_pov::Pallet::<Runtime>::storage_metadata()),
                                calls: Some(frame_benchmarking_pallet_pov::Pallet::<Runtime>::call_functions()),
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<frame_benchmarking_pallet_pov::Event<Runtime>>(),
                                    }),
                                constants: frame_benchmarking_pallet_pov::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: frame_benchmarking_pallet_pov::Pallet::<Runtime>::error_metadata(),
                                docs: frame_benchmarking_pallet_pov::Pallet::<Runtime>::pallet_documentation_metadata(),
                            },
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletMetadataIR {
                                name: "Statement",
                                index: 64u8,
                                storage: None,
                                calls: None,
                                event: Some(self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::PalletEventMetadataIR {
                                        ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<pallet_statement::Event<Runtime>>(),
                                    }),
                                constants: pallet_statement::Pallet::<Runtime>::pallet_constants_metadata(),
                                error: pallet_statement::Pallet::<Runtime>::error_metadata(),
                                docs: pallet_statement::Pallet::<Runtime>::pallet_documentation_metadata(),
                            }])),
            extrinsic: self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::ExtrinsicMetadataIR {
                ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<UncheckedExtrinsic>(),
                version: <UncheckedExtrinsic as
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::ExtrinsicMetadata>::VERSION,
                signed_extensions: <<UncheckedExtrinsic as
                                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::ExtrinsicMetadata>::SignedExtensions
                                    as
                                    self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::SignedExtension>::metadata().into_iter().map(|meta|
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::SignedExtensionMetadataIR {
                                identifier: meta.identifier,
                                ty: meta.ty,
                                additional_signed: meta.additional_signed,
                            }).collect(),
            },
            ty: self::sp_api_hidden_includes_construct_runtime::hidden_include::scale_info::meta_type::<Runtime>(),
            apis: (&rt).runtime_metadata(),
        }
    }
    pub fn metadata()
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata::RuntimeMetadataPrefixed {
        self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::into_latest(Runtime::metadata_ir())
    }
    pub fn metadata_at_version(version: u32)
        ->
            Option<self::sp_api_hidden_includes_construct_runtime::hidden_include::OpaqueMetadata> {
        self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::into_version(Runtime::metadata_ir(),
                version).map(|prefixed|
                {
                    self::sp_api_hidden_includes_construct_runtime::hidden_include::OpaqueMetadata::new(prefixed.into())
                })
    }
    pub fn metadata_versions()
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_std::vec::Vec<u32> {
        self::sp_api_hidden_includes_construct_runtime::hidden_include::metadata_ir::supported_versions()
    }
}
#[cfg(any(feature = "std", test))]
pub type SystemConfig = frame_system::GenesisConfig;
#[cfg(any(feature = "std", test))]
pub type BabeConfig = pallet_babe::GenesisConfig;
#[cfg(any(feature = "std", test))]
pub type IndicesConfig = pallet_indices::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type BalancesConfig = pallet_balances::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type TransactionPaymentConfig = pallet_transaction_payment::GenesisConfig;
#[cfg(any(feature = "std", test))]
pub type StakingConfig = pallet_staking::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type SessionConfig = pallet_session::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type DemocracyConfig = pallet_democracy::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type CouncilConfig =
    pallet_collective::GenesisConfig<Runtime, pallet_collective::Instance1>;
#[cfg(any(feature = "std", test))]
pub type TechnicalCommitteeConfig =
    pallet_collective::GenesisConfig<Runtime, pallet_collective::Instance2>;
#[cfg(any(feature = "std", test))]
pub type ElectionsConfig = pallet_elections_phragmen::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type TechnicalMembershipConfig =
    pallet_membership::GenesisConfig<Runtime, pallet_membership::Instance1>;
#[cfg(any(feature = "std", test))]
pub type GrandpaConfig = pallet_grandpa::GenesisConfig;
#[cfg(any(feature = "std", test))]
pub type TreasuryConfig = pallet_treasury::GenesisConfig;
#[cfg(any(feature = "std", test))]
pub type SudoConfig = pallet_sudo::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type ImOnlineConfig = pallet_im_online::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type AuthorityDiscoveryConfig = pallet_authority_discovery::GenesisConfig;
#[cfg(any(feature = "std", test))]
pub type SocietyConfig = pallet_society::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type VestingConfig = pallet_vesting::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type GluttonConfig = pallet_glutton::GenesisConfig;
#[cfg(any(feature = "std", test))]
pub type AssetsConfig = pallet_assets::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type TransactionStorageConfig =
    pallet_transaction_storage::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type AllianceMotionConfig =
    pallet_collective::GenesisConfig<Runtime, pallet_collective::Instance3>;
#[cfg(any(feature = "std", test))]
pub type AllianceConfig = pallet_alliance::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
pub type NominationPoolsConfig =
    pallet_nomination_pools::GenesisConfig<Runtime>;
#[cfg(any(feature = "std", test))]
use self::sp_api_hidden_includes_construct_runtime::hidden_include::serde as __genesis_config_serde_import__;
#[cfg(any(feature = "std", test))]
#[serde(rename_all = "camelCase")]
#[serde(deny_unknown_fields)]
#[serde(crate = "__genesis_config_serde_import__")]
pub struct GenesisConfig {
    pub system: SystemConfig,
    pub babe: BabeConfig,
    pub indices: IndicesConfig,
    pub balances: BalancesConfig,
    pub transaction_payment: TransactionPaymentConfig,
    pub staking: StakingConfig,
    pub session: SessionConfig,
    pub democracy: DemocracyConfig,
    pub council: CouncilConfig,
    pub technical_committee: TechnicalCommitteeConfig,
    pub elections: ElectionsConfig,
    pub technical_membership: TechnicalMembershipConfig,
    pub grandpa: GrandpaConfig,
    pub treasury: TreasuryConfig,
    pub sudo: SudoConfig,
    pub im_online: ImOnlineConfig,
    pub authority_discovery: AuthorityDiscoveryConfig,
    pub society: SocietyConfig,
    pub vesting: VestingConfig,
    pub glutton: GluttonConfig,
    pub assets: AssetsConfig,
    pub transaction_storage: TransactionStorageConfig,
    pub alliance_motion: AllianceMotionConfig,
    pub alliance: AllianceConfig,
    pub nomination_pools: NominationPoolsConfig,
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        use __genesis_config_serde_import__ as _serde;
        #[allow(unused_macros)]
        macro_rules! try {
            ($__expr : expr) =>
            {
                match $__expr
                {
                    _serde :: __private :: Ok(__val) => __val, _serde ::
                    __private :: Err(__err) =>
                    { return _serde :: __private :: Err(__err) ; }
                }
            }
        }
        #[automatically_derived]
        impl __genesis_config_serde_import__::Serialize for GenesisConfig {
            fn serialize<__S>(&self, __serializer: __S)
                ->
                    __genesis_config_serde_import__::__private::Result<__S::Ok,
                    __S::Error> where
                __S: __genesis_config_serde_import__::Serializer {
                let mut __serde_state =
                    match _serde::Serializer::serialize_struct(__serializer,
                            "GenesisConfig",
                            false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +
                                                                                    1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "system", &self.system) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "babe", &self.babe) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "indices", &self.indices) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "balances", &self.balances) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "transactionPayment", &self.transaction_payment) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "staking", &self.staking) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "session", &self.session) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "democracy", &self.democracy) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "council", &self.council) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "technicalCommittee", &self.technical_committee) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "elections", &self.elections) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "technicalMembership", &self.technical_membership) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "grandpa", &self.grandpa) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "treasury", &self.treasury) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "sudo", &self.sudo) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "imOnline", &self.im_online) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "authorityDiscovery", &self.authority_discovery) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "society", &self.society) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "vesting", &self.vesting) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "glutton", &self.glutton) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "assets", &self.assets) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "transactionStorage", &self.transaction_storage) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "allianceMotion", &self.alliance_motion) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "alliance", &self.alliance) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(&mut __serde_state,
                        "nominationPools", &self.nomination_pools) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        use __genesis_config_serde_import__ as _serde;
        #[allow(unused_macros)]
        macro_rules! try {
            ($__expr : expr) =>
            {
                match $__expr
                {
                    _serde :: __private :: Ok(__val) => __val, _serde ::
                    __private :: Err(__err) =>
                    { return _serde :: __private :: Err(__err) ; }
                }
            }
        }
        #[automatically_derived]
        impl<'de> __genesis_config_serde_import__::Deserialize<'de> for
            GenesisConfig {
            fn deserialize<__D>(__deserializer: __D)
                ->
                    __genesis_config_serde_import__::__private::Result<Self,
                    __D::Error> where
                __D: __genesis_config_serde_import__::Deserializer<'de> {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __field16,
                    __field17,
                    __field18,
                    __field19,
                    __field20,
                    __field21,
                    __field22,
                    __field23,
                    __field24,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(&self,
                        __formatter: &mut _serde::__private::Formatter)
                        -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter,
                            "field identifier")
                    }
                    fn visit_u64<__E>(self, __value: u64)
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            16u64 => _serde::__private::Ok(__Field::__field16),
                            17u64 => _serde::__private::Ok(__Field::__field17),
                            18u64 => _serde::__private::Ok(__Field::__field18),
                            19u64 => _serde::__private::Ok(__Field::__field19),
                            20u64 => _serde::__private::Ok(__Field::__field20),
                            21u64 => _serde::__private::Ok(__Field::__field21),
                            22u64 => _serde::__private::Ok(__Field::__field22),
                            23u64 => _serde::__private::Ok(__Field::__field23),
                            24u64 => _serde::__private::Ok(__Field::__field24),
                            _ =>
                                _serde::__private::Err(_serde::de::Error::invalid_value(_serde::de::Unexpected::Unsigned(__value),
                                        &"field index 0 <= i < 25")),
                        }
                    }
                    fn visit_str<__E>(self, __value: &str)
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            "system" => _serde::__private::Ok(__Field::__field0),
                            "babe" => _serde::__private::Ok(__Field::__field1),
                            "indices" => _serde::__private::Ok(__Field::__field2),
                            "balances" => _serde::__private::Ok(__Field::__field3),
                            "transactionPayment" =>
                                _serde::__private::Ok(__Field::__field4),
                            "staking" => _serde::__private::Ok(__Field::__field5),
                            "session" => _serde::__private::Ok(__Field::__field6),
                            "democracy" => _serde::__private::Ok(__Field::__field7),
                            "council" => _serde::__private::Ok(__Field::__field8),
                            "technicalCommittee" =>
                                _serde::__private::Ok(__Field::__field9),
                            "elections" => _serde::__private::Ok(__Field::__field10),
                            "technicalMembership" =>
                                _serde::__private::Ok(__Field::__field11),
                            "grandpa" => _serde::__private::Ok(__Field::__field12),
                            "treasury" => _serde::__private::Ok(__Field::__field13),
                            "sudo" => _serde::__private::Ok(__Field::__field14),
                            "imOnline" => _serde::__private::Ok(__Field::__field15),
                            "authorityDiscovery" =>
                                _serde::__private::Ok(__Field::__field16),
                            "society" => _serde::__private::Ok(__Field::__field17),
                            "vesting" => _serde::__private::Ok(__Field::__field18),
                            "glutton" => _serde::__private::Ok(__Field::__field19),
                            "assets" => _serde::__private::Ok(__Field::__field20),
                            "transactionStorage" =>
                                _serde::__private::Ok(__Field::__field21),
                            "allianceMotion" =>
                                _serde::__private::Ok(__Field::__field22),
                            "alliance" => _serde::__private::Ok(__Field::__field23),
                            "nominationPools" =>
                                _serde::__private::Ok(__Field::__field24),
                            _ => {
                                _serde::__private::Err(_serde::de::Error::unknown_field(__value,
                                        FIELDS))
                            }
                        }
                    }
                    fn visit_bytes<__E>(self, __value: &[u8])
                        -> _serde::__private::Result<Self::Value, __E> where
                        __E: _serde::de::Error {
                        match __value {
                            b"system" => _serde::__private::Ok(__Field::__field0),
                            b"babe" => _serde::__private::Ok(__Field::__field1),
                            b"indices" => _serde::__private::Ok(__Field::__field2),
                            b"balances" => _serde::__private::Ok(__Field::__field3),
                            b"transactionPayment" =>
                                _serde::__private::Ok(__Field::__field4),
                            b"staking" => _serde::__private::Ok(__Field::__field5),
                            b"session" => _serde::__private::Ok(__Field::__field6),
                            b"democracy" => _serde::__private::Ok(__Field::__field7),
                            b"council" => _serde::__private::Ok(__Field::__field8),
                            b"technicalCommittee" =>
                                _serde::__private::Ok(__Field::__field9),
                            b"elections" => _serde::__private::Ok(__Field::__field10),
                            b"technicalMembership" =>
                                _serde::__private::Ok(__Field::__field11),
                            b"grandpa" => _serde::__private::Ok(__Field::__field12),
                            b"treasury" => _serde::__private::Ok(__Field::__field13),
                            b"sudo" => _serde::__private::Ok(__Field::__field14),
                            b"imOnline" => _serde::__private::Ok(__Field::__field15),
                            b"authorityDiscovery" =>
                                _serde::__private::Ok(__Field::__field16),
                            b"society" => _serde::__private::Ok(__Field::__field17),
                            b"vesting" => _serde::__private::Ok(__Field::__field18),
                            b"glutton" => _serde::__private::Ok(__Field::__field19),
                            b"assets" => _serde::__private::Ok(__Field::__field20),
                            b"transactionStorage" =>
                                _serde::__private::Ok(__Field::__field21),
                            b"allianceMotion" =>
                                _serde::__private::Ok(__Field::__field22),
                            b"alliance" => _serde::__private::Ok(__Field::__field23),
                            b"nominationPools" =>
                                _serde::__private::Ok(__Field::__field24),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(_serde::de::Error::unknown_field(__value,
                                        FIELDS))
                            }
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(__deserializer: __D)
                        -> _serde::__private::Result<Self, __D::Error> where
                        __D: _serde::Deserializer<'de> {
                        _serde::Deserializer::deserialize_identifier(__deserializer,
                            __FieldVisitor)
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<GenesisConfig>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = GenesisConfig;
                    fn expecting(&self,
                        __formatter: &mut _serde::__private::Formatter)
                        -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(__formatter,
                            "struct GenesisConfig")
                    }
                    #[inline]
                    fn visit_seq<__A>(self, mut __seq: __A)
                        -> _serde::__private::Result<Self::Value, __A::Error> where
                        __A: _serde::de::SeqAccess<'de> {
                        let __field0 =
                            match match _serde::de::SeqAccess::next_element::<SystemConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(0usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field1 =
                            match match _serde::de::SeqAccess::next_element::<BabeConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(1usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field2 =
                            match match _serde::de::SeqAccess::next_element::<IndicesConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(2usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field3 =
                            match match _serde::de::SeqAccess::next_element::<BalancesConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(3usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field4 =
                            match match _serde::de::SeqAccess::next_element::<TransactionPaymentConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(4usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field5 =
                            match match _serde::de::SeqAccess::next_element::<StakingConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(5usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field6 =
                            match match _serde::de::SeqAccess::next_element::<SessionConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(6usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field7 =
                            match match _serde::de::SeqAccess::next_element::<DemocracyConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(7usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field8 =
                            match match _serde::de::SeqAccess::next_element::<CouncilConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(8usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field9 =
                            match match _serde::de::SeqAccess::next_element::<TechnicalCommitteeConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(9usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field10 =
                            match match _serde::de::SeqAccess::next_element::<ElectionsConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(10usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field11 =
                            match match _serde::de::SeqAccess::next_element::<TechnicalMembershipConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(11usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field12 =
                            match match _serde::de::SeqAccess::next_element::<GrandpaConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(12usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field13 =
                            match match _serde::de::SeqAccess::next_element::<TreasuryConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(13usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field14 =
                            match match _serde::de::SeqAccess::next_element::<SudoConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(14usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field15 =
                            match match _serde::de::SeqAccess::next_element::<ImOnlineConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(15usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field16 =
                            match match _serde::de::SeqAccess::next_element::<AuthorityDiscoveryConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(16usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field17 =
                            match match _serde::de::SeqAccess::next_element::<SocietyConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(17usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field18 =
                            match match _serde::de::SeqAccess::next_element::<VestingConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(18usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field19 =
                            match match _serde::de::SeqAccess::next_element::<GluttonConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(19usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field20 =
                            match match _serde::de::SeqAccess::next_element::<AssetsConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(20usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field21 =
                            match match _serde::de::SeqAccess::next_element::<TransactionStorageConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(21usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field22 =
                            match match _serde::de::SeqAccess::next_element::<AllianceMotionConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(22usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field23 =
                            match match _serde::de::SeqAccess::next_element::<AllianceConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(23usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        let __field24 =
                            match match _serde::de::SeqAccess::next_element::<NominationPoolsConfig>(&mut __seq)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(_serde::de::Error::invalid_length(24usize,
                                                &"struct GenesisConfig with 25 elements"));
                                }
                            };
                        _serde::__private::Ok(GenesisConfig {
                                system: __field0,
                                babe: __field1,
                                indices: __field2,
                                balances: __field3,
                                transaction_payment: __field4,
                                staking: __field5,
                                session: __field6,
                                democracy: __field7,
                                council: __field8,
                                technical_committee: __field9,
                                elections: __field10,
                                technical_membership: __field11,
                                grandpa: __field12,
                                treasury: __field13,
                                sudo: __field14,
                                im_online: __field15,
                                authority_discovery: __field16,
                                society: __field17,
                                vesting: __field18,
                                glutton: __field19,
                                assets: __field20,
                                transaction_storage: __field21,
                                alliance_motion: __field22,
                                alliance: __field23,
                                nomination_pools: __field24,
                            })
                    }
                    #[inline]
                    fn visit_map<__A>(self, mut __map: __A)
                        -> _serde::__private::Result<Self::Value, __A::Error> where
                        __A: _serde::de::MapAccess<'de> {
                        let mut __field0: _serde::__private::Option<SystemConfig> =
                            _serde::__private::None;
                        let mut __field1: _serde::__private::Option<BabeConfig> =
                            _serde::__private::None;
                        let mut __field2: _serde::__private::Option<IndicesConfig> =
                            _serde::__private::None;
                        let mut __field3:
                                _serde::__private::Option<BalancesConfig> =
                            _serde::__private::None;
                        let mut __field4:
                                _serde::__private::Option<TransactionPaymentConfig> =
                            _serde::__private::None;
                        let mut __field5: _serde::__private::Option<StakingConfig> =
                            _serde::__private::None;
                        let mut __field6: _serde::__private::Option<SessionConfig> =
                            _serde::__private::None;
                        let mut __field7:
                                _serde::__private::Option<DemocracyConfig> =
                            _serde::__private::None;
                        let mut __field8: _serde::__private::Option<CouncilConfig> =
                            _serde::__private::None;
                        let mut __field9:
                                _serde::__private::Option<TechnicalCommitteeConfig> =
                            _serde::__private::None;
                        let mut __field10:
                                _serde::__private::Option<ElectionsConfig> =
                            _serde::__private::None;
                        let mut __field11:
                                _serde::__private::Option<TechnicalMembershipConfig> =
                            _serde::__private::None;
                        let mut __field12:
                                _serde::__private::Option<GrandpaConfig> =
                            _serde::__private::None;
                        let mut __field13:
                                _serde::__private::Option<TreasuryConfig> =
                            _serde::__private::None;
                        let mut __field14: _serde::__private::Option<SudoConfig> =
                            _serde::__private::None;
                        let mut __field15:
                                _serde::__private::Option<ImOnlineConfig> =
                            _serde::__private::None;
                        let mut __field16:
                                _serde::__private::Option<AuthorityDiscoveryConfig> =
                            _serde::__private::None;
                        let mut __field17:
                                _serde::__private::Option<SocietyConfig> =
                            _serde::__private::None;
                        let mut __field18:
                                _serde::__private::Option<VestingConfig> =
                            _serde::__private::None;
                        let mut __field19:
                                _serde::__private::Option<GluttonConfig> =
                            _serde::__private::None;
                        let mut __field20: _serde::__private::Option<AssetsConfig> =
                            _serde::__private::None;
                        let mut __field21:
                                _serde::__private::Option<TransactionStorageConfig> =
                            _serde::__private::None;
                        let mut __field22:
                                _serde::__private::Option<AllianceMotionConfig> =
                            _serde::__private::None;
                        let mut __field23:
                                _serde::__private::Option<AllianceConfig> =
                            _serde::__private::None;
                        let mut __field24:
                                _serde::__private::Option<NominationPoolsConfig> =
                            _serde::__private::None;
                        while let _serde::__private::Some(__key) =
                                match _serde::de::MapAccess::next_key::<__Field>(&mut __map)
                                    {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("system"));
                                        }
                                    __field0 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<SystemConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("babe"));
                                        }
                                    __field1 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<BabeConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("indices"));
                                        }
                                    __field2 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<IndicesConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("balances"));
                                        }
                                    __field3 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<BalancesConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("transactionPayment"));
                                        }
                                    __field4 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<TransactionPaymentConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("staking"));
                                        }
                                    __field5 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<StakingConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("session"));
                                        }
                                    __field6 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<SessionConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("democracy"));
                                        }
                                    __field7 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<DemocracyConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("council"));
                                        }
                                    __field8 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<CouncilConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("technicalCommittee"));
                                        }
                                    __field9 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<TechnicalCommitteeConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("elections"));
                                        }
                                    __field10 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<ElectionsConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("technicalMembership"));
                                        }
                                    __field11 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<TechnicalMembershipConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("grandpa"));
                                        }
                                    __field12 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<GrandpaConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field13 => {
                                    if _serde::__private::Option::is_some(&__field13) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("treasury"));
                                        }
                                    __field13 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<TreasuryConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field14 => {
                                    if _serde::__private::Option::is_some(&__field14) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("sudo"));
                                        }
                                    __field14 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<SudoConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field15 => {
                                    if _serde::__private::Option::is_some(&__field15) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("imOnline"));
                                        }
                                    __field15 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<ImOnlineConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field16 => {
                                    if _serde::__private::Option::is_some(&__field16) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("authorityDiscovery"));
                                        }
                                    __field16 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<AuthorityDiscoveryConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field17 => {
                                    if _serde::__private::Option::is_some(&__field17) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("society"));
                                        }
                                    __field17 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<SocietyConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field18 => {
                                    if _serde::__private::Option::is_some(&__field18) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("vesting"));
                                        }
                                    __field18 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<VestingConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field19 => {
                                    if _serde::__private::Option::is_some(&__field19) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("glutton"));
                                        }
                                    __field19 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<GluttonConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field20 => {
                                    if _serde::__private::Option::is_some(&__field20) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("assets"));
                                        }
                                    __field20 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<AssetsConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field21 => {
                                    if _serde::__private::Option::is_some(&__field21) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("transactionStorage"));
                                        }
                                    __field21 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<TransactionStorageConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field22 => {
                                    if _serde::__private::Option::is_some(&__field22) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("allianceMotion"));
                                        }
                                    __field22 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<AllianceMotionConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field23 => {
                                    if _serde::__private::Option::is_some(&__field23) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("alliance"));
                                        }
                                    __field23 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<AllianceConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                                __Field::__field24 => {
                                    if _serde::__private::Option::is_some(&__field24) {
                                            return _serde::__private::Err(<__A::Error as
                                                            _serde::de::Error>::duplicate_field("nominationPools"));
                                        }
                                    __field24 =
                                        _serde::__private::Some(match _serde::de::MapAccess::next_value::<NominationPoolsConfig>(&mut __map)
                                                {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            });
                                }
                            }
                        }
                        let __field0 =
                            match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("system") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field1 =
                            match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("babe") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field2 =
                            match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("indices") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field3 =
                            match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("balances") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field4 =
                            match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("transactionPayment")
                                        {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field5 =
                            match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("staking") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field6 =
                            match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("session") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field7 =
                            match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("democracy") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field8 =
                            match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("council") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field9 =
                            match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("technicalCommittee")
                                        {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field10 =
                            match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("elections") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field11 =
                            match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("technicalMembership")
                                        {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field12 =
                            match __field12 {
                                _serde::__private::Some(__field12) => __field12,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("grandpa") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field13 =
                            match __field13 {
                                _serde::__private::Some(__field13) => __field13,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("treasury") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field14 =
                            match __field14 {
                                _serde::__private::Some(__field14) => __field14,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("sudo") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field15 =
                            match __field15 {
                                _serde::__private::Some(__field15) => __field15,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("imOnline") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field16 =
                            match __field16 {
                                _serde::__private::Some(__field16) => __field16,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("authorityDiscovery")
                                        {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field17 =
                            match __field17 {
                                _serde::__private::Some(__field17) => __field17,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("society") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field18 =
                            match __field18 {
                                _serde::__private::Some(__field18) => __field18,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("vesting") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field19 =
                            match __field19 {
                                _serde::__private::Some(__field19) => __field19,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("glutton") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field20 =
                            match __field20 {
                                _serde::__private::Some(__field20) => __field20,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("assets") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field21 =
                            match __field21 {
                                _serde::__private::Some(__field21) => __field21,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("transactionStorage")
                                        {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field22 =
                            match __field22 {
                                _serde::__private::Some(__field22) => __field22,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("allianceMotion")
                                        {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field23 =
                            match __field23 {
                                _serde::__private::Some(__field23) => __field23,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("alliance") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        let __field24 =
                            match __field24 {
                                _serde::__private::Some(__field24) => __field24,
                                _serde::__private::None =>
                                    match _serde::__private::de::missing_field("nominationPools")
                                        {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                            };
                        _serde::__private::Ok(GenesisConfig {
                                system: __field0,
                                babe: __field1,
                                indices: __field2,
                                balances: __field3,
                                transaction_payment: __field4,
                                staking: __field5,
                                session: __field6,
                                democracy: __field7,
                                council: __field8,
                                technical_committee: __field9,
                                elections: __field10,
                                technical_membership: __field11,
                                grandpa: __field12,
                                treasury: __field13,
                                sudo: __field14,
                                im_online: __field15,
                                authority_discovery: __field16,
                                society: __field17,
                                vesting: __field18,
                                glutton: __field19,
                                assets: __field20,
                                transaction_storage: __field21,
                                alliance_motion: __field22,
                                alliance: __field23,
                                nomination_pools: __field24,
                            })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] =
                    &["system", "babe", "indices", "balances",
                                "transactionPayment", "staking", "session", "democracy",
                                "council", "technicalCommittee", "elections",
                                "technicalMembership", "grandpa", "treasury", "sudo",
                                "imOnline", "authorityDiscovery", "society", "vesting",
                                "glutton", "assets", "transactionStorage", "allianceMotion",
                                "alliance", "nominationPools"];
                _serde::Deserializer::deserialize_struct(__deserializer,
                    "GenesisConfig", FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<GenesisConfig>,
                        lifetime: _serde::__private::PhantomData,
                    })
            }
        }
    };
#[automatically_derived]
impl ::core::default::Default for GenesisConfig {
    #[inline]
    fn default() -> GenesisConfig {
        GenesisConfig {
            system: ::core::default::Default::default(),
            babe: ::core::default::Default::default(),
            indices: ::core::default::Default::default(),
            balances: ::core::default::Default::default(),
            transaction_payment: ::core::default::Default::default(),
            staking: ::core::default::Default::default(),
            session: ::core::default::Default::default(),
            democracy: ::core::default::Default::default(),
            council: ::core::default::Default::default(),
            technical_committee: ::core::default::Default::default(),
            elections: ::core::default::Default::default(),
            technical_membership: ::core::default::Default::default(),
            grandpa: ::core::default::Default::default(),
            treasury: ::core::default::Default::default(),
            sudo: ::core::default::Default::default(),
            im_online: ::core::default::Default::default(),
            authority_discovery: ::core::default::Default::default(),
            society: ::core::default::Default::default(),
            vesting: ::core::default::Default::default(),
            glutton: ::core::default::Default::default(),
            assets: ::core::default::Default::default(),
            transaction_storage: ::core::default::Default::default(),
            alliance_motion: ::core::default::Default::default(),
            alliance: ::core::default::Default::default(),
            nomination_pools: ::core::default::Default::default(),
        }
    }
}
#[cfg(any(feature = "std", test))]
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildStorage
    for GenesisConfig {
    fn assimilate_storage(&self,
        storage:
            &mut self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::Storage)
        -> std::result::Result<(), String> {
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    frame_system::__InherentHiddenInstance>::build_module_genesis_storage(&self.system,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_babe::__InherentHiddenInstance>::build_module_genesis_storage(&self.babe,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_indices::__InherentHiddenInstance>::build_module_genesis_storage(&self.indices,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_balances::__InherentHiddenInstance>::build_module_genesis_storage(&self.balances,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_transaction_payment::__InherentHiddenInstance>::build_module_genesis_storage(&self.transaction_payment,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_staking::__InherentHiddenInstance>::build_module_genesis_storage(&self.staking,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_session::__InherentHiddenInstance>::build_module_genesis_storage(&self.session,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_democracy::__InherentHiddenInstance>::build_module_genesis_storage(&self.democracy,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_collective::Instance1>::build_module_genesis_storage(&self.council,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_collective::Instance2>::build_module_genesis_storage(&self.technical_committee,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_elections_phragmen::__InherentHiddenInstance>::build_module_genesis_storage(&self.elections,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_membership::Instance1>::build_module_genesis_storage(&self.technical_membership,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_grandpa::__InherentHiddenInstance>::build_module_genesis_storage(&self.grandpa,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_treasury::__InherentHiddenInstance>::build_module_genesis_storage(&self.treasury,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_sudo::__InherentHiddenInstance>::build_module_genesis_storage(&self.sudo,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_im_online::__InherentHiddenInstance>::build_module_genesis_storage(&self.im_online,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_authority_discovery::__InherentHiddenInstance>::build_module_genesis_storage(&self.authority_discovery,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_society::__InherentHiddenInstance>::build_module_genesis_storage(&self.society,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_vesting::__InherentHiddenInstance>::build_module_genesis_storage(&self.vesting,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_glutton::__InherentHiddenInstance>::build_module_genesis_storage(&self.glutton,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_assets::__InherentHiddenInstance>::build_module_genesis_storage(&self.assets,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_transaction_storage::__InherentHiddenInstance>::build_module_genesis_storage(&self.transaction_storage,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_collective::Instance3>::build_module_genesis_storage(&self.alliance_motion,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_alliance::__InherentHiddenInstance>::build_module_genesis_storage(&self.alliance,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::BuildModuleGenesisStorage::<Runtime,
                    pallet_nomination_pools::__InherentHiddenInstance>::build_module_genesis_storage(&self.nomination_pools,
                storage)?;
        self::sp_api_hidden_includes_construct_runtime::hidden_include::BasicExternalities::execute_with_storage(storage,
            ||
                {
                    <AllPalletsWithSystem as
                            self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::OnGenesis>::on_genesis();
                });
        Ok(())
    }
}
trait InherentDataExt {
    fn create_extrinsics(&self)
    ->
        self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::Vec<<Block
        as
        self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::BlockT>::Extrinsic>;
    fn check_extrinsics(&self, block: &Block)
    ->
        self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::CheckInherentsResult;
}
impl InherentDataExt for
    self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::InherentData
    {
    fn create_extrinsics(&self)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::Vec<<Block
            as
            self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::BlockT>::Extrinsic> {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::ProvideInherent;
        let mut inherents = Vec::new();
        if let Some(inherent) = Timestamp::create_inherent(self) {
                let inherent =
                    <UncheckedExtrinsic as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::Extrinsic>::new(inherent.into(),
                            None).expect("Runtime UncheckedExtrinsic is not Opaque, so it has to return \
							`Some`; qed");
                inherents.push(inherent);
            }
        if let Some(inherent) = TransactionStorage::create_inherent(self) {
                let inherent =
                    <UncheckedExtrinsic as
                                self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::Extrinsic>::new(inherent.into(),
                            None).expect("Runtime UncheckedExtrinsic is not Opaque, so it has to return \
							`Some`; qed");
                inherents.push(inherent);
            }
        inherents
    }
    fn check_extrinsics(&self, block: &Block)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::CheckInherentsResult {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::{
            ProvideInherent, IsFatalError,
        };
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::{
            IsSubType, ExtrinsicCall,
        };
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block as _;
        let mut result =
            self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::CheckInherentsResult::new();
        for xt in block.extrinsics() {
            if self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::Extrinsic::is_signed(xt).unwrap_or(false)
                    {
                    break
                }
            let mut is_inherent = false;
            {
                let call = <UncheckedExtrinsic as ExtrinsicCall>::call(xt);
                if let Some(call) = IsSubType::<_>::is_sub_type(call) {
                        if Timestamp::is_inherent(call) {
                                is_inherent = true;
                                if let Err(e) = Timestamp::check_inherent(call, self) {
                                        result.put_error(Timestamp::INHERENT_IDENTIFIER,
                                                &e).expect("There is only one fatal error; qed");
                                        if e.is_fatal_error() { return result; }
                                    }
                            }
                    }
            }
            {
                let call = <UncheckedExtrinsic as ExtrinsicCall>::call(xt);
                if let Some(call) = IsSubType::<_>::is_sub_type(call) {
                        if TransactionStorage::is_inherent(call) {
                                is_inherent = true;
                                if let Err(e) =
                                            TransactionStorage::check_inherent(call, self) {
                                        result.put_error(TransactionStorage::INHERENT_IDENTIFIER,
                                                &e).expect("There is only one fatal error; qed");
                                        if e.is_fatal_error() { return result; }
                                    }
                            }
                    }
            }
            if !is_inherent { break }
        }
        match Timestamp::is_inherent_required(self) {
            Ok(Some(e)) => {
                let found =
                    block.extrinsics().iter().any(|xt|
                            {
                                let is_signed =
                                    self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::Extrinsic::is_signed(xt).unwrap_or(false);
                                if !is_signed {
                                        let call = <UncheckedExtrinsic as ExtrinsicCall>::call(xt);
                                        if let Some(call) = IsSubType::<_>::is_sub_type(call) {
                                                Timestamp::is_inherent(&call)
                                            } else { false }
                                    } else { false }
                            });
                if !found {
                        result.put_error(Timestamp::INHERENT_IDENTIFIER,
                                &e).expect("There is only one fatal error; qed");
                        if e.is_fatal_error() { return result; }
                    }
            }
            Ok(None) => (),
            Err(e) => {
                result.put_error(Timestamp::INHERENT_IDENTIFIER,
                        &e).expect("There is only one fatal error; qed");
                if e.is_fatal_error() { return result; }
            }
        }
        match TransactionStorage::is_inherent_required(self) {
            Ok(Some(e)) => {
                let found =
                    block.extrinsics().iter().any(|xt|
                            {
                                let is_signed =
                                    self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::Extrinsic::is_signed(xt).unwrap_or(false);
                                if !is_signed {
                                        let call = <UncheckedExtrinsic as ExtrinsicCall>::call(xt);
                                        if let Some(call) = IsSubType::<_>::is_sub_type(call) {
                                                TransactionStorage::is_inherent(&call)
                                            } else { false }
                                    } else { false }
                            });
                if !found {
                        result.put_error(TransactionStorage::INHERENT_IDENTIFIER,
                                &e).expect("There is only one fatal error; qed");
                        if e.is_fatal_error() { return result; }
                    }
            }
            Ok(None) => (),
            Err(e) => {
                result.put_error(TransactionStorage::INHERENT_IDENTIFIER,
                        &e).expect("There is only one fatal error; qed");
                if e.is_fatal_error() { return result; }
            }
        }
        result
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::EnsureInherentsAreFirst<Block>
    for Runtime {
    fn ensure_inherents_are_first(block: &Block) -> Result<(), u32> {
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::ProvideInherent;
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::traits::{
            IsSubType, ExtrinsicCall,
        };
        use self::sp_api_hidden_includes_construct_runtime::hidden_include::sp_runtime::traits::Block as _;
        let mut first_signed_observed = false;
        for (i, xt) in block.extrinsics().iter().enumerate() {
            let is_signed =
                self::sp_api_hidden_includes_construct_runtime::hidden_include::inherent::Extrinsic::is_signed(xt).unwrap_or(false);
            let is_inherent =
                if is_signed {
                        false
                    } else {
                       let mut is_inherent = false;
                       {
                           let call = <UncheckedExtrinsic as ExtrinsicCall>::call(xt);
                           if let Some(call) = IsSubType::<_>::is_sub_type(call) {
                                   if Timestamp::is_inherent(&call) { is_inherent = true; }
                               }
                       }
                       {
                           let call = <UncheckedExtrinsic as ExtrinsicCall>::call(xt);
                           if let Some(call) = IsSubType::<_>::is_sub_type(call) {
                                   if TransactionStorage::is_inherent(&call) {
                                           is_inherent = true;
                                       }
                               }
                       }
                       is_inherent
                   };
            if !is_inherent { first_signed_observed = true; }
            if first_signed_observed && is_inherent { return Err(i as u32) }
        }
        Ok(())
    }
}
impl self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::ValidateUnsigned
    for Runtime {
    type Call = RuntimeCall;
    fn pre_dispatch(call: &Self::Call)
        ->
            Result<(),
            self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::TransactionValidityError> {

        #[allow(unreachable_patterns)]
        match call {
            RuntimeCall::Babe(inner_call) => Babe::pre_dispatch(inner_call),
            RuntimeCall::ElectionProviderMultiPhase(inner_call) =>
                ElectionProviderMultiPhase::pre_dispatch(inner_call),
            RuntimeCall::Grandpa(inner_call) =>
                Grandpa::pre_dispatch(inner_call),
            RuntimeCall::ImOnline(inner_call) =>
                ImOnline::pre_dispatch(inner_call),
            _ => Ok(()),
        }
    }
    fn validate_unsigned(#[allow(unused_variables)] source:
            self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::TransactionSource,
        call: &Self::Call)
        ->
            self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::TransactionValidity {

        #[allow(unreachable_patterns)]
        match call {
            RuntimeCall::Babe(inner_call) =>
                Babe::validate_unsigned(source, inner_call),
            RuntimeCall::ElectionProviderMultiPhase(inner_call) =>
                ElectionProviderMultiPhase::validate_unsigned(source,
                    inner_call),
            RuntimeCall::Grandpa(inner_call) =>
                Grandpa::validate_unsigned(source, inner_call),
            RuntimeCall::ImOnline(inner_call) =>
                ImOnline::validate_unsigned(source, inner_call),
            _ =>
                self::sp_api_hidden_includes_construct_runtime::hidden_include::unsigned::UnknownTransaction::NoUnsignedValidator.into(),
        }
    }
}
#[doc = r" A reason for placing a freeze on funds."]
pub enum RuntimeFreezeReason {}
#[automatically_derived]
impl ::core::marker::Copy for RuntimeFreezeReason { }
#[automatically_derived]
impl ::core::clone::Clone for RuntimeFreezeReason {
    #[inline]
    fn clone(&self) -> RuntimeFreezeReason { *self }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeFreezeReason { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeFreezeReason {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeFreezeReason { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeFreezeReason {
    #[inline]
    fn eq(&self, other: &RuntimeFreezeReason) -> bool {
        unsafe { ::core::intrinsics::unreachable() }
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for RuntimeFreezeReason {
    #[inline]
    fn cmp(&self, other: &RuntimeFreezeReason) -> ::core::cmp::Ordering {
        unsafe { ::core::intrinsics::unreachable() }
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for RuntimeFreezeReason {
    #[inline]
    fn partial_cmp(&self, other: &RuntimeFreezeReason)
        -> ::core::option::Option<::core::cmp::Ordering> {
        unsafe { ::core::intrinsics::unreachable() }
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Encode for RuntimeFreezeReason { }
        #[automatically_derived]
        impl ::codec::EncodeLike for RuntimeFreezeReason { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Decode for RuntimeFreezeReason {
            fn decode<__CodecInputEdqy: ::codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeFreezeReason`, failed to read variant byte"))?
                    {
                    _ =>
                        ::core::result::Result::Err(<_ as
                                    ::core::convert::Into<_>>::into("Could not decode `RuntimeFreezeReason`, variant doesn't exist")),
                }
            }
        }
    };
const _: () =
    {
        impl ::codec::MaxEncodedLen for RuntimeFreezeReason {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeFreezeReason {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeFreezeReason",
                                    "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["A reason for placing a freeze on funds."]).variant(::scale_info::build::Variants::new())
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeFreezeReason {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self { _ => Ok(()), }
    }
}
#[doc = r" A reason for placing a hold on funds."]
pub enum RuntimeHoldReason {

    #[codec(index = 41u8)]
    Nis(pallet_nis::HoldReason),

    #[codec(index = 44u8)]
    NftFractionalization(pallet_nft_fractionalization::HoldReason),
}
#[automatically_derived]
impl ::core::marker::Copy for RuntimeHoldReason { }
#[automatically_derived]
impl ::core::clone::Clone for RuntimeHoldReason {
    #[inline]
    fn clone(&self) -> RuntimeHoldReason {
        let _: ::core::clone::AssertParamIsClone<pallet_nis::HoldReason>;
        let _:
                ::core::clone::AssertParamIsClone<pallet_nft_fractionalization::HoldReason>;
        *self
    }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeHoldReason { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeHoldReason {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<pallet_nis::HoldReason>;
        let _:
                ::core::cmp::AssertParamIsEq<pallet_nft_fractionalization::HoldReason>;
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeHoldReason { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeHoldReason {
    #[inline]
    fn eq(&self, other: &RuntimeHoldReason) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag &&
            match (self, other) {
                (RuntimeHoldReason::Nis(__self_0),
                    RuntimeHoldReason::Nis(__arg1_0)) => *__self_0 == *__arg1_0,
                (RuntimeHoldReason::NftFractionalization(__self_0),
                    RuntimeHoldReason::NftFractionalization(__arg1_0)) =>
                    *__self_0 == *__arg1_0,
                _ => unsafe { ::core::intrinsics::unreachable() }
            }
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for RuntimeHoldReason {
    #[inline]
    fn cmp(&self, other: &RuntimeHoldReason) -> ::core::cmp::Ordering {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        match ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag) {
            ::core::cmp::Ordering::Equal =>
                match (self, other) {
                    (RuntimeHoldReason::Nis(__self_0),
                        RuntimeHoldReason::Nis(__arg1_0)) =>
                        ::core::cmp::Ord::cmp(__self_0, __arg1_0),
                    (RuntimeHoldReason::NftFractionalization(__self_0),
                        RuntimeHoldReason::NftFractionalization(__arg1_0)) =>
                        ::core::cmp::Ord::cmp(__self_0, __arg1_0),
                    _ => unsafe { ::core::intrinsics::unreachable() }
                },
            cmp => cmp,
        }
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for RuntimeHoldReason {
    #[inline]
    fn partial_cmp(&self, other: &RuntimeHoldReason)
        -> ::core::option::Option<::core::cmp::Ordering> {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        match ::core::cmp::PartialOrd::partial_cmp(&__self_tag, &__arg1_tag) {
            ::core::option::Option::Some(::core::cmp::Ordering::Equal) =>
                match (self, other) {
                    (RuntimeHoldReason::Nis(__self_0),
                        RuntimeHoldReason::Nis(__arg1_0)) =>
                        ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0),
                    (RuntimeHoldReason::NftFractionalization(__self_0),
                        RuntimeHoldReason::NftFractionalization(__arg1_0)) =>
                        ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0),
                    _ => unsafe { ::core::intrinsics::unreachable() }
                },
            cmp => cmp,
        }
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Encode for RuntimeHoldReason {
            fn encode_to<__CodecOutputEdqy: ::codec::Output +
                ?::core::marker::Sized>(&self,
                __codec_dest_edqy: &mut __CodecOutputEdqy) {
                match *self {
                    RuntimeHoldReason::Nis(ref aa) => {
                        __codec_dest_edqy.push_byte(41u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    RuntimeHoldReason::NftFractionalization(ref aa) => {
                        __codec_dest_edqy.push_byte(44u8 as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        #[automatically_derived]
        impl ::codec::EncodeLike for RuntimeHoldReason { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Decode for RuntimeHoldReason {
            fn decode<__CodecInputEdqy: ::codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeHoldReason`, failed to read variant byte"))?
                    {
                    __codec_x_edqy if
                        __codec_x_edqy == 41u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeHoldReason::Nis({
                                    let __codec_res_edqy =
                                        <pallet_nis::HoldReason as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeHoldReason::Nis.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    __codec_x_edqy if
                        __codec_x_edqy == 44u8 as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(RuntimeHoldReason::NftFractionalization({
                                    let __codec_res_edqy =
                                        <pallet_nft_fractionalization::HoldReason as
                                                ::codec::Decode>::decode(__codec_input_edqy);
                                    match __codec_res_edqy {
                                        ::core::result::Result::Err(e) =>
                                            return ::core::result::Result::Err(e.chain("Could not decode `RuntimeHoldReason::NftFractionalization.0`")),
                                        ::core::result::Result::Ok(__codec_res_edqy) =>
                                            __codec_res_edqy,
                                    }
                                }))
                    }
                    _ =>
                        ::core::result::Result::Err(<_ as
                                    ::core::convert::Into<_>>::into("Could not decode `RuntimeHoldReason`, variant doesn't exist")),
                }
            }
        }
    };
const _: () =
    {
        impl ::codec::MaxEncodedLen for RuntimeHoldReason {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.max(0_usize.saturating_add(<pallet_nis::HoldReason>::max_encoded_len())).max(0_usize.saturating_add(<pallet_nft_fractionalization::HoldReason>::max_encoded_len())).saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeHoldReason {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeHoldReason",
                                    "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["A reason for placing a hold on funds."]).variant(::scale_info::build::Variants::new().variant("Nis",
                            |v|
                                v.index(41u8 as
                                            ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                            f.ty::<pallet_nis::HoldReason>().type_name("pallet_nis::HoldReason")))).variant("NftFractionalization",
                        |v|
                            v.index(44u8 as
                                        ::core::primitive::u8).fields(::scale_info::build::Fields::unnamed().field(|f|
                                        f.ty::<pallet_nft_fractionalization::HoldReason>().type_name("pallet_nft_fractionalization::HoldReason")))))
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeHoldReason {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::Nis(ref a0) =>
                fmt.debug_tuple("RuntimeHoldReason::Nis").field(a0).finish(),
            Self::NftFractionalization(ref a0) =>
                fmt.debug_tuple("RuntimeHoldReason::NftFractionalization").field(a0).finish(),
            _ => Ok(()),
        }
    }
}
impl From<pallet_nis::HoldReason> for RuntimeHoldReason {
    fn from(hr: pallet_nis::HoldReason) -> Self { RuntimeHoldReason::Nis(hr) }
}
impl From<pallet_nft_fractionalization::HoldReason> for RuntimeHoldReason {
    fn from(hr: pallet_nft_fractionalization::HoldReason) -> Self {
        RuntimeHoldReason::NftFractionalization(hr)
    }
}
#[doc = r" An identifier for each lock placed on funds."]
pub enum RuntimeLockId {}
#[automatically_derived]
impl ::core::marker::Copy for RuntimeLockId { }
#[automatically_derived]
impl ::core::clone::Clone for RuntimeLockId {
    #[inline]
    fn clone(&self) -> RuntimeLockId { *self }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeLockId { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeLockId {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeLockId { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeLockId {
    #[inline]
    fn eq(&self, other: &RuntimeLockId) -> bool {
        unsafe { ::core::intrinsics::unreachable() }
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for RuntimeLockId {
    #[inline]
    fn cmp(&self, other: &RuntimeLockId) -> ::core::cmp::Ordering {
        unsafe { ::core::intrinsics::unreachable() }
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for RuntimeLockId {
    #[inline]
    fn partial_cmp(&self, other: &RuntimeLockId)
        -> ::core::option::Option<::core::cmp::Ordering> {
        unsafe { ::core::intrinsics::unreachable() }
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Encode for RuntimeLockId { }
        #[automatically_derived]
        impl ::codec::EncodeLike for RuntimeLockId { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Decode for RuntimeLockId {
            fn decode<__CodecInputEdqy: ::codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeLockId`, failed to read variant byte"))?
                    {
                    _ =>
                        ::core::result::Result::Err(<_ as
                                    ::core::convert::Into<_>>::into("Could not decode `RuntimeLockId`, variant doesn't exist")),
                }
            }
        }
    };
const _: () =
    {
        impl ::codec::MaxEncodedLen for RuntimeLockId {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeLockId {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeLockId",
                                    "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["An identifier for each lock placed on funds."]).variant(::scale_info::build::Variants::new())
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeLockId {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self { _ => Ok(()), }
    }
}
#[doc = r" A reason for slashing funds."]
pub enum RuntimeSlashReason {}
#[automatically_derived]
impl ::core::marker::Copy for RuntimeSlashReason { }
#[automatically_derived]
impl ::core::clone::Clone for RuntimeSlashReason {
    #[inline]
    fn clone(&self) -> RuntimeSlashReason { *self }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for RuntimeSlashReason { }
#[automatically_derived]
impl ::core::cmp::Eq for RuntimeSlashReason {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for RuntimeSlashReason { }
#[automatically_derived]
impl ::core::cmp::PartialEq for RuntimeSlashReason {
    #[inline]
    fn eq(&self, other: &RuntimeSlashReason) -> bool {
        unsafe { ::core::intrinsics::unreachable() }
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for RuntimeSlashReason {
    #[inline]
    fn cmp(&self, other: &RuntimeSlashReason) -> ::core::cmp::Ordering {
        unsafe { ::core::intrinsics::unreachable() }
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for RuntimeSlashReason {
    #[inline]
    fn partial_cmp(&self, other: &RuntimeSlashReason)
        -> ::core::option::Option<::core::cmp::Ordering> {
        unsafe { ::core::intrinsics::unreachable() }
    }
}
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Encode for RuntimeSlashReason { }
        #[automatically_derived]
        impl ::codec::EncodeLike for RuntimeSlashReason { }
    };
#[allow(deprecated)]
const _: () =
    {
        #[automatically_derived]
        impl ::codec::Decode for RuntimeSlashReason {
            fn decode<__CodecInputEdqy: ::codec::Input>(__codec_input_edqy:
                    &mut __CodecInputEdqy)
                -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy.read_byte().map_err(|e|
                                e.chain("Could not decode `RuntimeSlashReason`, failed to read variant byte"))?
                    {
                    _ =>
                        ::core::result::Result::Err(<_ as
                                    ::core::convert::Into<_>>::into("Could not decode `RuntimeSlashReason`, variant doesn't exist")),
                }
            }
        }
    };
const _: () =
    {
        impl ::codec::MaxEncodedLen for RuntimeSlashReason {
            fn max_encoded_len() -> ::core::primitive::usize {
                0_usize.saturating_add(1)
            }
        }
    };
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () =
    {
        impl ::scale_info::TypeInfo for RuntimeSlashReason {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder().path(::scale_info::Path::new("RuntimeSlashReason",
                                    "kitchensink_runtime")).type_params(::alloc::vec::Vec::new()).docs(&["A reason for slashing funds."]).variant(::scale_info::build::Variants::new())
            }
        }
        ;
    };
impl core::fmt::Debug for RuntimeSlashReason {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self { _ => Ok(()), }
    }
}
const _: () =
    if !(<frame_system::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `System` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_utility::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Utility` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_babe::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Babe` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_indices::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Indices` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_balances::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Balances` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_election_provider_multi_phase::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `ElectionProviderMultiPhase` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_staking::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Staking` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_session::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Session` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_democracy::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Democracy` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_collective::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Council` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_collective::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `TechnicalCommittee` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_elections_phragmen::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Elections` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_membership::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `TechnicalMembership` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_grandpa::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Grandpa` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_treasury::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Treasury` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_asset_rate::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `AssetRate` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_contracts::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Contracts` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_sudo::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Sudo` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_im_online::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `ImOnline` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_identity::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Identity` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_society::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Society` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_recovery::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Recovery` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_vesting::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Vesting` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_scheduler::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Scheduler` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_glutton::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Glutton` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_preimage::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Preimage` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_proxy::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Proxy` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_multisig::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Multisig` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_bounties::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Bounties` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_tips::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Tips` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_assets::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Assets` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_lottery::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Lottery` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_nis::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Nis` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_uniques::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Uniques` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_nfts::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Nfts` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_nft_fractionalization::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `NftFractionalization` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_salary::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Salary` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_core_fellowship::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `CoreFellowship` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_transaction_storage::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `TransactionStorage` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_bags_list::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `VoterList` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_state_trie_migration::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `StateTrieMigration` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_child_bounties::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `ChildBounties` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_referenda::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Referenda` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_remark::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Remark` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_conviction_voting::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `ConvictionVoting` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_whitelist::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Whitelist` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_collective::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `AllianceMotion` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_alliance::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `Alliance` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_nomination_pools::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `NominationPools` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_referenda::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `RankedPolls` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_ranked_collective::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `RankedCollective` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_fast_unstake::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `FastUnstake` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
const _: () =
    if !(<pallet_message_queue::Error<Runtime> as
                        ::frame_support::traits::PalletError>::MAX_ENCODED_SIZE <=
                    ::frame_support::MAX_MODULE_ERROR_ENCODED_SIZE) {
            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["The maximum encoded size of the error type in the `MessageQueue` pallet exceeds `MAX_MODULE_ERROR_ENCODED_SIZE`"],
                    &[]))
        };
/// The address format for describing accounts.
pub type Address = sp_runtime::MultiAddress<AccountId, AccountIndex>;
/// Block header type as expected by this runtime.
pub type Header = generic::Header<BlockNumber, BlakeTwo256>;
/// Block type as expected by this runtime.
pub type Block = generic::Block<Header, UncheckedExtrinsic>;
/// A Block signed with a Justification
pub type SignedBlock = generic::SignedBlock<Block>;
/// BlockId type as expected by this runtime.
pub type BlockId = generic::BlockId<Block>;
/// The SignedExtension to the basic transaction logic.
///
/// When you change this, you **MUST** modify [`sign`] in `bin/node/testing/src/keyring.rs`!
///
/// [`sign`]: <../../testing/src/keyring.rs.html>
/// 这些都会attach到每一笔签名交易中
/// 让我们看一下CheckNonce做了些什么
/// 如果我们有什么验证逻辑想给每个pallet的交易使用
/// 我们就可以将它们放到SignedExtra的列表中
/// 它会为每个交易插入这个验证机制
pub type SignedExtra =
    (frame_system::CheckNonZeroSender<Runtime>,
    frame_system::CheckSpecVersion<Runtime>,
    frame_system::CheckTxVersion<Runtime>,
    frame_system::CheckGenesis<Runtime>, frame_system::CheckEra<Runtime>,
    frame_system::CheckNonce<Runtime>, frame_system::CheckWeight<Runtime>,
    pallet_asset_tx_payment::ChargeAssetTxPayment<Runtime>);
/// Unchecked extrinsic type as expected by this runtime.
pub type UncheckedExtrinsic =
    generic::UncheckedExtrinsic<Address, RuntimeCall, Signature, SignedExtra>;
/// The payload being signed in transactions.
pub type SignedPayload = generic::SignedPayload<RuntimeCall, SignedExtra>;
/// Extrinsic type that has already been checked.
pub type CheckedExtrinsic =
    generic::CheckedExtrinsic<AccountId, RuntimeCall, SignedExtra>;
/// Executive: handles dispatch to the various modules.
pub type Executive =
    frame_executive::Executive<Runtime, Block,
    frame_system::ChainContext<Runtime>, Runtime, AllPalletsWithSystem,
    Migrations>;
type Migrations =
    (pallet_nomination_pools::migration::v2::MigrateToV2<Runtime>,
    pallet_alliance::migration::Migration<Runtime>,
    pallet_contracts::Migration<Runtime>);
type EventRecord =
    frame_system::EventRecord<<Runtime as frame_system::Config>::RuntimeEvent,
    <Runtime as frame_system::Config>::Hash>;
/// MMR helper types.
mod mmr {
    use super::Runtime;
    pub use pallet_mmr::primitives::*;
    pub type Leaf =
        <<Runtime as pallet_mmr::Config>::LeafData as
        LeafDataProvider>::LeafData;
    pub type Hash = <Hashing as sp_runtime::traits::Hash>::Output;
    pub type Hashing = <Runtime as pallet_mmr::Config>::Hashing;
}
pub struct RuntimeApi {}
#[doc = r" Implements all runtime apis for the client side."]
#[cfg(any(feature = "std", test))]
pub struct RuntimeApiImpl<Block: sp_api::BlockT, C: sp_api::CallApiAt<Block> +
    'static> {
    call: &'static C,
    commit_on_success: std::cell::RefCell<bool>,
    changes: std::cell::RefCell<sp_api::OverlayedChanges>,
    storage_transaction_cache: std::cell::RefCell<sp_api::StorageTransactionCache<Block,
    C::StateBackend>>,
    recorder: std::option::Option<sp_api::ProofRecorder<Block>>,
}
#[cfg(any(feature = "std", test))]
impl<Block: sp_api::BlockT, C: sp_api::CallApiAt<Block>> sp_api::ApiExt<Block>
    for RuntimeApiImpl<Block, C> {
    type StateBackend = C::StateBackend;
    fn execute_in_transaction<F: FnOnce(&Self)
        -> sp_api::TransactionOutcome<R>, R>(&self, call: F) -> R where
        Self: Sized {
        self.start_transaction();
        *std::cell::RefCell::borrow_mut(&self.commit_on_success) = false;
        let res = call(self);
        *std::cell::RefCell::borrow_mut(&self.commit_on_success) = true;
        self.commit_or_rollback(match res {
                sp_api::TransactionOutcome::Commit(_) => true,
                _ => false,
            });
        res.into_inner()
    }
    fn has_api<A: sp_api::RuntimeApiInfo +
        ?Sized>(&self, at: <Block as sp_api::BlockT>::Hash)
        -> std::result::Result<bool, sp_api::ApiError> where Self: Sized {
        sp_api::CallApiAt::<Block>::runtime_version_at(self.call,
                at).map(|v|
                sp_api::RuntimeVersion::has_api_with(&v, &A::ID,
                    |v| v == A::VERSION))
    }
    fn has_api_with<A: sp_api::RuntimeApiInfo + ?Sized, P: Fn(u32)
        -> bool>(&self, at: <Block as sp_api::BlockT>::Hash, pred: P)
        -> std::result::Result<bool, sp_api::ApiError> where Self: Sized {
        sp_api::CallApiAt::<Block>::runtime_version_at(self.call,
                at).map(|v|
                sp_api::RuntimeVersion::has_api_with(&v, &A::ID, pred))
    }
    fn api_version<A: sp_api::RuntimeApiInfo +
        ?Sized>(&self, at: <Block as sp_api::BlockT>::Hash)
        -> std::result::Result<Option<u32>, sp_api::ApiError> where
        Self: Sized {
        sp_api::CallApiAt::<Block>::runtime_version_at(self.call,
                at).map(|v| sp_api::RuntimeVersion::api_version(&v, &A::ID))
    }
    fn record_proof(&mut self) {
        self.recorder =
            std::option::Option::Some(std::default::Default::default());
    }
    fn proof_recorder(&self)
        -> std::option::Option<sp_api::ProofRecorder<Block>> {
        std::clone::Clone::clone(&self.recorder)
    }
    fn extract_proof(&mut self) -> std::option::Option<sp_api::StorageProof> {
        let recorder = std::option::Option::take(&mut self.recorder);
        std::option::Option::map(recorder,
            |recorder|
                {
                    sp_api::ProofRecorder::<Block>::drain_storage_proof(recorder)
                })
    }
    fn into_storage_changes(&self, backend: &Self::StateBackend,
        parent_hash: Block::Hash)
        ->
            core::result::Result<sp_api::StorageChanges<C::StateBackend,
            Block>, String> where Self: Sized {
        let state_version =
            sp_api::CallApiAt::<Block>::runtime_version_at(self.call,
                            std::clone::Clone::clone(&parent_hash)).map(|v|
                            sp_api::RuntimeVersion::state_version(&v)).map_err(|e|
                        {
                            let res =
                                ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&["Failed to get state version: "],
                                        &[::core::fmt::ArgumentV1::new_display(&e)]));
                            res
                        })?;
        sp_api::OverlayedChanges::into_storage_changes(std::cell::RefCell::take(&self.changes),
            backend,
            core::cell::RefCell::take(&self.storage_transaction_cache),
            state_version)
    }
}
#[cfg(any(feature = "std", test))]
impl<Block: sp_api::BlockT, C> sp_api::ConstructRuntimeApi<Block, C> for
    RuntimeApi where C: sp_api::CallApiAt<Block> + 'static {
    type RuntimeApi = RuntimeApiImpl<Block, C>;
    fn construct_runtime_api<'a>(call: &'a C)
        -> sp_api::ApiRef<'a, Self::RuntimeApi> {
        RuntimeApiImpl {
                call: unsafe { std::mem::transmute(call) },
                commit_on_success: true.into(),
                changes: std::default::Default::default(),
                recorder: std::default::Default::default(),
                storage_transaction_cache: std::default::Default::default(),
            }.into()
    }
}
#[cfg(any(feature = "std", test))]
impl<Block: sp_api::BlockT, C: sp_api::CallApiAt<Block>>
    RuntimeApiImpl<Block, C> {
    fn commit_or_rollback(&self, commit: bool) {
        let proof =
            "\
					We only close a transaction when we opened one ourself.
					Other parts of the runtime that make use of transactions (state-machine)
					also balance their transactions. The runtime cannot close client initiated
					transactions; qed";
        if *std::cell::RefCell::borrow(&self.commit_on_success) {
                let res =
                    if commit {
                            let res =
                                if let Some(recorder) = &self.recorder {
                                        sp_api::ProofRecorder::<Block>::commit_transaction(&recorder)
                                    } else { Ok(()) };
                            let res2 =
                                sp_api::OverlayedChanges::commit_transaction(&mut std::cell::RefCell::borrow_mut(&self.changes));
                            std::result::Result::and(res,
                                std::result::Result::map_err(res2, drop))
                        } else {
                           let res =
                               if let Some(recorder) = &self.recorder {
                                       sp_api::ProofRecorder::<Block>::rollback_transaction(&recorder)
                                   } else { Ok(()) };
                           let res2 =
                               sp_api::OverlayedChanges::rollback_transaction(&mut std::cell::RefCell::borrow_mut(&self.changes));
                           std::result::Result::and(res,
                               std::result::Result::map_err(res2, drop))
                       };
                std::result::Result::expect(res, proof);
            }
    }
    fn start_transaction(&self) {
        if !*std::cell::RefCell::borrow(&self.commit_on_success) { return }
        sp_api::OverlayedChanges::start_transaction(&mut std::cell::RefCell::borrow_mut(&self.changes));
        if let Some(recorder) = &self.recorder {
                sp_api::ProofRecorder::<Block>::start_transaction(&recorder);
            }
    }
}
impl sp_api::runtime_decl_for_core::Core<Block> for Runtime {
    fn version() -> RuntimeVersion { VERSION }
    fn execute_block(block: Block) { Executive::execute_block(block); }
    fn initialize_block(header: &<Block as BlockT>::Header) {
        Executive::initialize_block(header)
    }
}
impl sp_api::runtime_decl_for_metadata::Metadata<Block> for Runtime {
    fn metadata() -> OpaqueMetadata {
        OpaqueMetadata::new(Runtime::metadata().into())
    }
    fn metadata_at_version(version: u32) -> Option<OpaqueMetadata> {
        Runtime::metadata_at_version(version)
    }
    fn metadata_versions() -> sp_std::vec::Vec<u32> {
        Runtime::metadata_versions()
    }
}
impl sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block> for
    Runtime {
    fn apply_extrinsic(extrinsic: <Block as BlockT>::Extrinsic)
        -> ApplyExtrinsicResult {
        Executive::apply_extrinsic(extrinsic)
    }
    fn finalize_block() -> <Block as BlockT>::Header {
        Executive::finalize_block()
    }
    fn inherent_extrinsics(data: InherentData)
        -> Vec<<Block as BlockT>::Extrinsic> {
        data.create_extrinsics()
    }
    fn check_inherents(block: Block, data: InherentData)
        -> CheckInherentsResult {
        data.check_extrinsics(&block)
    }
}
impl sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::TaggedTransactionQueue<Block>
    for Runtime {
    fn validate_transaction(source: TransactionSource,
        tx: <Block as BlockT>::Extrinsic, block_hash: <Block as BlockT>::Hash)
        -> TransactionValidity {
        Executive::validate_transaction(source, tx, block_hash)
    }
}
impl sp_statement_store::runtime_api::runtime_decl_for_validate_statement::ValidateStatement<Block>
    for Runtime {
    fn validate_statement(source:
            sp_statement_store::runtime_api::StatementSource,
        statement: sp_statement_store::Statement)
        ->
            Result<sp_statement_store::runtime_api::ValidStatement,
            sp_statement_store::runtime_api::InvalidStatement> {
        Statement::validate_statement(source, statement)
    }
}
impl sp_offchain::runtime_decl_for_offchain_worker_api::OffchainWorkerApi<Block>
    for Runtime {
    fn offchain_worker(header: &<Block as BlockT>::Header) {
        Executive::offchain_worker(header)
    }
}
impl sp_consensus_grandpa::runtime_decl_for_grandpa_api::GrandpaApi<Block> for
    Runtime {
    fn grandpa_authorities() -> sp_consensus_grandpa::AuthorityList {
        Grandpa::grandpa_authorities()
    }
    fn current_set_id() -> sp_consensus_grandpa::SetId {
        Grandpa::current_set_id()
    }
    fn submit_report_equivocation_unsigned_extrinsic(equivocation_proof:
            sp_consensus_grandpa::EquivocationProof<<Block as BlockT>::Hash,
            NumberFor<Block>>,
        key_owner_proof: sp_consensus_grandpa::OpaqueKeyOwnershipProof)
        -> Option<()> {
        let key_owner_proof = key_owner_proof.decode()?;
        Grandpa::submit_unsigned_equivocation_report(equivocation_proof,
            key_owner_proof)
    }
    fn generate_key_ownership_proof(_set_id: sp_consensus_grandpa::SetId,
        authority_id: GrandpaId)
        -> Option<sp_consensus_grandpa::OpaqueKeyOwnershipProof> {
        use codec::Encode;
        Historical::prove((sp_consensus_grandpa::KEY_TYPE,
                        authority_id)).map(|p|
                    p.encode()).map(sp_consensus_grandpa::OpaqueKeyOwnershipProof::new)
    }
}
impl pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::NominationPoolsApi<Block,
    AccountId, Balance> for Runtime {
    fn pending_rewards(who: AccountId) -> Balance {
        NominationPools::api_pending_rewards(who).unwrap_or_default()
    }
    fn points_to_balance(pool_id: pallet_nomination_pools::PoolId,
        points: Balance) -> Balance {
        NominationPools::api_points_to_balance(pool_id, points)
    }
    fn balance_to_points(pool_id: pallet_nomination_pools::PoolId,
        new_funds: Balance) -> Balance {
        NominationPools::api_balance_to_points(pool_id, new_funds)
    }
}
impl pallet_staking_runtime_api::runtime_decl_for_staking_api::StakingApi<Block,
    Balance> for Runtime {
    fn nominations_quota(balance: Balance) -> u32 {
        Staking::api_nominations_quota(balance)
    }
}
impl sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block> for Runtime
    {
    fn configuration() -> sp_consensus_babe::BabeConfiguration {
        let epoch_config =
            Babe::epoch_config().unwrap_or(BABE_GENESIS_EPOCH_CONFIG);
        sp_consensus_babe::BabeConfiguration {
            slot_duration: Babe::slot_duration(),
            epoch_length: EpochDuration::get(),
            c: epoch_config.c,
            authorities: Babe::authorities().to_vec(),
            randomness: Babe::randomness(),
            allowed_slots: epoch_config.allowed_slots,
        }
    }
    fn current_epoch_start() -> sp_consensus_babe::Slot {
        Babe::current_epoch_start()
    }
    fn current_epoch() -> sp_consensus_babe::Epoch { Babe::current_epoch() }
    fn next_epoch() -> sp_consensus_babe::Epoch { Babe::next_epoch() }
    fn generate_key_ownership_proof(_slot: sp_consensus_babe::Slot,
        authority_id: sp_consensus_babe::AuthorityId)
        -> Option<sp_consensus_babe::OpaqueKeyOwnershipProof> {
        use codec::Encode;
        Historical::prove((sp_consensus_babe::KEY_TYPE,
                        authority_id)).map(|p|
                    p.encode()).map(sp_consensus_babe::OpaqueKeyOwnershipProof::new)
    }
    fn submit_report_equivocation_unsigned_extrinsic(equivocation_proof:
            sp_consensus_babe::EquivocationProof<<Block as BlockT>::Header>,
        key_owner_proof: sp_consensus_babe::OpaqueKeyOwnershipProof)
        -> Option<()> {
        let key_owner_proof = key_owner_proof.decode()?;
        Babe::submit_unsigned_equivocation_report(equivocation_proof,
            key_owner_proof)
    }
}
impl sp_authority_discovery::runtime_decl_for_authority_discovery_api::AuthorityDiscoveryApi<Block>
    for Runtime {
    fn authorities() -> Vec<AuthorityDiscoveryId> {
        AuthorityDiscovery::authorities()
    }
}
impl frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::AccountNonceApi<Block,
    AccountId, Index> for Runtime {
    fn account_nonce(account: AccountId) -> Index {
        System::account_nonce(account)
    }
}
impl assets_api::runtime_decl_for_assets_api::AssetsApi<Block, AccountId,
    Balance, u32> for Runtime {
    fn account_balances(account: AccountId) -> Vec<(u32, Balance)> {
        Assets::account_balances(account)
    }
}
impl pallet_contracts::runtime_decl_for_contracts_api::ContractsApi<Block,
    AccountId, Balance, BlockNumber, Hash, EventRecord> for Runtime {
    fn call(origin: AccountId, dest: AccountId, value: Balance,
        gas_limit: Option<Weight>, storage_deposit_limit: Option<Balance>,
        input_data: Vec<u8>)
        ->
            pallet_contracts_primitives::ContractExecResult<Balance,
            EventRecord> {
        let gas_limit =
            gas_limit.unwrap_or(RuntimeBlockWeights::get().max_block);
        Contracts::bare_call(origin, dest, value, gas_limit,
            storage_deposit_limit, input_data,
            pallet_contracts::DebugInfo::UnsafeDebug,
            pallet_contracts::CollectEvents::UnsafeCollect,
            pallet_contracts::Determinism::Enforced)
    }
    fn instantiate(origin: AccountId, value: Balance,
        gas_limit: Option<Weight>, storage_deposit_limit: Option<Balance>,
        code: pallet_contracts_primitives::Code<Hash>, data: Vec<u8>,
        salt: Vec<u8>)
        ->
            pallet_contracts_primitives::ContractInstantiateResult<AccountId,
            Balance, EventRecord> {
        let gas_limit =
            gas_limit.unwrap_or(RuntimeBlockWeights::get().max_block);
        Contracts::bare_instantiate(origin, value, gas_limit,
            storage_deposit_limit, code, data, salt,
            pallet_contracts::DebugInfo::UnsafeDebug,
            pallet_contracts::CollectEvents::UnsafeCollect)
    }
    fn upload_code(origin: AccountId, code: Vec<u8>,
        storage_deposit_limit: Option<Balance>,
        determinism: pallet_contracts::Determinism)
        -> pallet_contracts_primitives::CodeUploadResult<Hash, Balance> {
        Contracts::bare_upload_code(origin, code, storage_deposit_limit,
            determinism)
    }
    fn get_storage(address: AccountId, key: Vec<u8>)
        -> pallet_contracts_primitives::GetStorageResult {
        Contracts::get_storage(address, key)
    }
}
impl pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
    Balance> for Runtime {
    fn query_info(uxt: <Block as BlockT>::Extrinsic, len: u32)
        -> RuntimeDispatchInfo<Balance> {
        TransactionPayment::query_info(uxt, len)
    }
    fn query_fee_details(uxt: <Block as BlockT>::Extrinsic, len: u32)
        -> FeeDetails<Balance> {
        TransactionPayment::query_fee_details(uxt, len)
    }
    fn query_weight_to_fee(weight: Weight) -> Balance {
        TransactionPayment::weight_to_fee(weight)
    }
    fn query_length_to_fee(length: u32) -> Balance {
        TransactionPayment::length_to_fee(length)
    }
}
impl pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
    Balance, RuntimeCall> for Runtime {
    fn query_call_info(call: RuntimeCall, len: u32)
        -> RuntimeDispatchInfo<Balance> {
        TransactionPayment::query_call_info(call, len)
    }
    fn query_call_fee_details(call: RuntimeCall, len: u32)
        -> FeeDetails<Balance> {
        TransactionPayment::query_call_fee_details(call, len)
    }
    fn query_weight_to_fee(weight: Weight) -> Balance {
        TransactionPayment::weight_to_fee(weight)
    }
    fn query_length_to_fee(length: u32) -> Balance {
        TransactionPayment::length_to_fee(length)
    }
}
impl pallet_nfts_runtime_api::runtime_decl_for_nfts_api::NftsApi<Block,
    AccountId, u32, u32> for Runtime {
    fn owner(collection: u32, item: u32) -> Option<AccountId> {
        <Nfts as Inspect<AccountId>>::owner(&collection, &item)
    }
    fn collection_owner(collection: u32) -> Option<AccountId> {
        <Nfts as Inspect<AccountId>>::collection_owner(&collection)
    }
    fn attribute(collection: u32, item: u32, key: Vec<u8>)
        -> Option<Vec<u8>> {
        <Nfts as Inspect<AccountId>>::attribute(&collection, &item, &key)
    }
    fn custom_attribute(account: AccountId, collection: u32, item: u32,
        key: Vec<u8>) -> Option<Vec<u8>> {
        <Nfts as
                Inspect<AccountId>>::custom_attribute(&account, &collection,
            &item, &key)
    }
    fn system_attribute(collection: u32, item: u32, key: Vec<u8>)
        -> Option<Vec<u8>> {
        <Nfts as
                Inspect<AccountId>>::system_attribute(&collection, &item,
            &key)
    }
    fn collection_attribute(collection: u32, key: Vec<u8>)
        -> Option<Vec<u8>> {
        <Nfts as Inspect<AccountId>>::collection_attribute(&collection, &key)
    }
}
impl pallet_mmr::primitives::runtime_decl_for_mmr_api::MmrApi<Block,
    mmr::Hash, BlockNumber> for Runtime {
    fn mmr_root() -> Result<mmr::Hash, mmr::Error> { Ok(Mmr::mmr_root()) }
    fn mmr_leaf_count() -> Result<mmr::LeafIndex, mmr::Error> {
        Ok(Mmr::mmr_leaves())
    }
    fn generate_proof(block_numbers: Vec<BlockNumber>,
        best_known_block_number: Option<BlockNumber>)
        ->
            Result<(Vec<mmr::EncodableOpaqueLeaf>, mmr::Proof<mmr::Hash>),
            mmr::Error> {
        Mmr::generate_proof(block_numbers,
                best_known_block_number).map(|(leaves, proof)|
                {
                    (leaves.into_iter().map(|leaf|
                                    mmr::EncodableOpaqueLeaf::from_leaf(&leaf)).collect(),
                        proof)
                })
    }
    fn verify_proof(leaves: Vec<mmr::EncodableOpaqueLeaf>,
        proof: mmr::Proof<mmr::Hash>) -> Result<(), mmr::Error> {
        let leaves =
            leaves.into_iter().map(|leaf|
                            leaf.into_opaque_leaf().try_decode().ok_or(mmr::Error::Verify)).collect::<Result<Vec<mmr::Leaf>,
                    mmr::Error>>()?;
        Mmr::verify_leaves(leaves, proof)
    }
    fn verify_proof_stateless(root: mmr::Hash,
        leaves: Vec<mmr::EncodableOpaqueLeaf>, proof: mmr::Proof<mmr::Hash>)
        -> Result<(), mmr::Error> {
        let nodes =
            leaves.into_iter().map(|leaf|
                        mmr::DataOrHash::Data(leaf.into_opaque_leaf())).collect();
        pallet_mmr::verify_leaves_proof::<mmr::Hashing, _>(root, nodes, proof)
    }
}
impl sp_session::runtime_decl_for_session_keys::SessionKeys<Block> for Runtime
    {
    fn generate_session_keys(seed: Option<Vec<u8>>) -> Vec<u8> {
        SessionKeys::generate(seed)
    }
    fn decode_session_keys(encoded: Vec<u8>)
        -> Option<Vec<(Vec<u8>, KeyTypeId)>> {
        SessionKeys::decode_into_raw_public_keys(&encoded)
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_api::Core<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    RuntimeVersion: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    __SrApiBlock__: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Header: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_api::Metadata<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    OpaqueMetadata: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    u32: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Option<OpaqueMetadata>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, sp_std::vec::Vec<u32>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_block_builder::BlockBuilder<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    <__SrApiBlock__ as BlockT>::Extrinsic: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, ApplyExtrinsicResult: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Header: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, InherentData: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Vec<<__SrApiBlock__ as BlockT>::Extrinsic>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, __SrApiBlock__: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, InherentData: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, CheckInherentsResult: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_transaction_pool::runtime_api::TaggedTransactionQueue<__SrApiBlock__>
    for RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    TransactionSource: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Extrinsic: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Hash: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, TransactionValidity: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_statement_store::runtime_api::ValidateStatement<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    sp_statement_store::runtime_api::StatementSource: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_statement_store::Statement: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Result<sp_statement_store::runtime_api::ValidStatement,
    sp_statement_store::runtime_api::InvalidStatement>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_offchain::OffchainWorkerApi<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    <__SrApiBlock__ as BlockT>::Header: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_consensus_grandpa::GrandpaApi<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    sp_consensus_grandpa::AuthorityList: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_grandpa::SetId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_grandpa::EquivocationProof<<__SrApiBlock__ as BlockT>::Hash,
    NumberFor<__SrApiBlock__>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_grandpa::OpaqueKeyOwnershipProof: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<()>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_grandpa::SetId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, GrandpaId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Option<sp_consensus_grandpa::OpaqueKeyOwnershipProof>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_nomination_pools_runtime_api::NominationPoolsApi<__SrApiBlock__,
    AccountId, Balance> for RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall>
    where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, AccountId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    pallet_nomination_pools::PoolId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    pallet_nomination_pools::PoolId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_staking_runtime_api::StakingApi<__SrApiBlock__, Balance> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_consensus_babe::BabeApi<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    sp_consensus_babe::BabeConfiguration: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::Slot: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::Epoch: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::Epoch: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::Slot: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::AuthorityId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Option<sp_consensus_babe::OpaqueKeyOwnershipProof>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    sp_consensus_babe::EquivocationProof<<__SrApiBlock__ as
    BlockT>::Header>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    sp_consensus_babe::OpaqueKeyOwnershipProof: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<()>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_authority_discovery::AuthorityDiscoveryApi<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    Vec<AuthorityDiscoveryId>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    frame_system_rpc_runtime_api::AccountNonceApi<__SrApiBlock__, AccountId,
    Index> for RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, AccountId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Index: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    assets_api::AssetsApi<__SrApiBlock__, AccountId, Balance, u32> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, AccountId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<(u32, Balance)>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_contracts::ContractsApi<__SrApiBlock__, AccountId, Balance,
    BlockNumber, Hash, EventRecord> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, AccountId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, AccountId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<Weight>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<Balance>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    pallet_contracts_primitives::ContractExecResult<Balance,
    EventRecord>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    AccountId: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Balance: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Option<Weight>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Option<Balance>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    pallet_contracts_primitives::Code<Hash>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    pallet_contracts_primitives::ContractInstantiateResult<AccountId, Balance,
    EventRecord>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    AccountId: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Vec<u8>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Option<Balance>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    pallet_contracts::Determinism: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    pallet_contracts_primitives::CodeUploadResult<Hash,
    Balance>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    AccountId: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Vec<u8>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    pallet_contracts_primitives::GetStorageResult: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_transaction_payment_rpc_runtime_api::TransactionPaymentApi<__SrApiBlock__,
    Balance> for RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    <__SrApiBlock__ as BlockT>::Extrinsic: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeDispatchInfo<Balance>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    <__SrApiBlock__ as BlockT>::Extrinsic: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, FeeDetails<Balance>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Weight: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_transaction_payment_rpc_runtime_api::TransactionPaymentCallApi<__SrApiBlock__,
    Balance, RuntimeCall> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, RuntimeCall: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeDispatchInfo<Balance>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, RuntimeCall: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, FeeDetails<Balance>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Weight: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Balance: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_nfts_runtime_api::NftsApi<__SrApiBlock__, AccountId, u32, u32> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<AccountId>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<AccountId>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, AccountId: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, u32: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<u8>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<Vec<u8>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    pallet_mmr::primitives::MmrApi<__SrApiBlock__, mmr::Hash, BlockNumber> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    Result<mmr::Hash, mmr::Error>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Result<mmr::LeafIndex, mmr::Error>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Vec<BlockNumber>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, Option<BlockNumber>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Result<(Vec<mmr::EncodableOpaqueLeaf>, mmr::Proof<mmr::Hash>),
    mmr::Error>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Vec<mmr::EncodableOpaqueLeaf>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, mmr::Proof<mmr::Hash>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Result<(), mmr::Error>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, mmr::Hash: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Vec<mmr::EncodableOpaqueLeaf>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe, mmr::Proof<mmr::Hash>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    Result<(), mmr::Error>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
#[cfg(any(feature = "std", test))]
impl<__SrApiBlock__: sp_api::BlockT + std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    RuntimeApiImplCall: sp_api::CallApiAt<__SrApiBlock__> + 'static>
    sp_session::SessionKeys<__SrApiBlock__> for
    RuntimeApiImpl<__SrApiBlock__, RuntimeApiImplCall> where
    RuntimeApiImplCall::StateBackend: sp_api::StateBackend<sp_api::HashFor<__SrApiBlock__>>,
    &'static RuntimeApiImplCall: Send,
    Option<Vec<u8>>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Vec<u8>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Vec<u8>: std::panic::UnwindSafe + std::panic::RefUnwindSafe,
    Option<Vec<(Vec<u8>, KeyTypeId)>>: std::panic::UnwindSafe +
    std::panic::RefUnwindSafe,
    __SrApiBlock__::Header: std::panic::UnwindSafe + std::panic::RefUnwindSafe
    {
    fn __runtime_api_internal_call_api_at(&self,
        at: <__SrApiBlock__ as sp_api::BlockT>::Hash,
        context: sp_api::ExecutionContext, params: std::vec::Vec<u8>,
        fn_name: &dyn Fn(sp_api::RuntimeVersion) -> &'static str)
        -> std::result::Result<std::vec::Vec<u8>, sp_api::ApiError> {
        self.start_transaction();
        let res =
            (||
                        {
                            let version =
                                sp_api::CallApiAt::<__SrApiBlock__>::runtime_version_at(self.call,
                                        at)?;
                            let params =
                                sp_api::CallApiAtParams {
                                    at,
                                    function: (*fn_name)(version),
                                    arguments: params,
                                    overlayed_changes: &self.changes,
                                    storage_transaction_cache: &self.storage_transaction_cache,
                                    context,
                                    recorder: &self.recorder,
                                };
                            sp_api::CallApiAt::<__SrApiBlock__>::call_api_at(self.call,
                                params)
                        })();
        self.commit_or_rollback(std::result::Result::is_ok(&res));
        res
    }
}
const RUNTIME_API_VERSIONS: sp_api::ApisVec =
    ::sp_version::sp_std::borrow::Cow::Borrowed(&[(sp_api::runtime_decl_for_core::ID,
                        sp_api::runtime_decl_for_core::VERSION),
                    (sp_api::runtime_decl_for_metadata::ID,
                        sp_api::runtime_decl_for_metadata::VERSION),
                    (sp_block_builder::runtime_decl_for_block_builder::ID,
                        sp_block_builder::runtime_decl_for_block_builder::VERSION),
                    (sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::ID,
                        sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::VERSION),
                    (sp_statement_store::runtime_api::runtime_decl_for_validate_statement::ID,
                        sp_statement_store::runtime_api::runtime_decl_for_validate_statement::VERSION),
                    (sp_offchain::runtime_decl_for_offchain_worker_api::ID,
                        sp_offchain::runtime_decl_for_offchain_worker_api::VERSION),
                    (sp_consensus_grandpa::runtime_decl_for_grandpa_api::ID,
                        sp_consensus_grandpa::runtime_decl_for_grandpa_api::VERSION),
                    (pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::ID,
                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::VERSION),
                    (pallet_staking_runtime_api::runtime_decl_for_staking_api::ID,
                        pallet_staking_runtime_api::runtime_decl_for_staking_api::VERSION),
                    (sp_consensus_babe::runtime_decl_for_babe_api::ID,
                        sp_consensus_babe::runtime_decl_for_babe_api::VERSION),
                    (sp_authority_discovery::runtime_decl_for_authority_discovery_api::ID,
                        sp_authority_discovery::runtime_decl_for_authority_discovery_api::VERSION),
                    (frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::ID,
                        frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::VERSION),
                    (assets_api::runtime_decl_for_assets_api::ID,
                        assets_api::runtime_decl_for_assets_api::VERSION),
                    (pallet_contracts::runtime_decl_for_contracts_api::ID,
                        pallet_contracts::runtime_decl_for_contracts_api::VERSION),
                    (pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::ID,
                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::VERSION),
                    (pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::ID,
                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::VERSION),
                    (pallet_nfts_runtime_api::runtime_decl_for_nfts_api::ID,
                        pallet_nfts_runtime_api::runtime_decl_for_nfts_api::VERSION),
                    (pallet_mmr::primitives::runtime_decl_for_mmr_api::ID,
                        pallet_mmr::primitives::runtime_decl_for_mmr_api::VERSION),
                    (sp_session::runtime_decl_for_session_keys::ID,
                        sp_session::runtime_decl_for_session_keys::VERSION)]);
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
const _: () = {};
#[doc(hidden)]
trait InternalImplRuntimeApis {
    #[inline(always)]
    fn runtime_metadata(&self)
        -> sp_api::vec::Vec<sp_api::metadata_ir::RuntimeApiMetadataIR> {
        <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([sp_api::runtime_decl_for_core::runtime_metadata::<Block>(),
                        sp_api::runtime_decl_for_metadata::runtime_metadata::<Block>(),
                        sp_block_builder::runtime_decl_for_block_builder::runtime_metadata::<Block>(),
                        sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::runtime_metadata::<Block>(),
                        sp_statement_store::runtime_api::runtime_decl_for_validate_statement::runtime_metadata::<Block>(),
                        sp_offchain::runtime_decl_for_offchain_worker_api::runtime_metadata::<Block>(),
                        sp_consensus_grandpa::runtime_decl_for_grandpa_api::runtime_metadata::<Block>(),
                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::runtime_metadata::<Block,
                                AccountId, Balance>(),
                        pallet_staking_runtime_api::runtime_decl_for_staking_api::runtime_metadata::<Block,
                                Balance>(),
                        sp_consensus_babe::runtime_decl_for_babe_api::runtime_metadata::<Block>(),
                        sp_authority_discovery::runtime_decl_for_authority_discovery_api::runtime_metadata::<Block>(),
                        frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::runtime_metadata::<Block,
                                AccountId, Index>(),
                        assets_api::runtime_decl_for_assets_api::runtime_metadata::<Block,
                                AccountId, Balance, u32>(),
                        pallet_contracts::runtime_decl_for_contracts_api::runtime_metadata::<Block,
                                AccountId, Balance, BlockNumber, Hash, EventRecord>(),
                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::runtime_metadata::<Block,
                                Balance>(),
                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::runtime_metadata::<Block,
                                Balance, RuntimeCall>(),
                        pallet_nfts_runtime_api::runtime_decl_for_nfts_api::runtime_metadata::<Block,
                                AccountId, u32, u32>(),
                        pallet_mmr::primitives::runtime_decl_for_mmr_api::runtime_metadata::<Block,
                                mmr::Hash, BlockNumber>(),
                        sp_session::runtime_decl_for_session_keys::runtime_metadata::<Block>()]))
    }
}
#[doc(hidden)]
impl InternalImplRuntimeApis for Runtime { }
pub mod api {
    use super::*;
    #[cfg(feature = "std")]
    pub fn dispatch(method: &str, mut _sp_api_input_data_: &[u8])
        -> Option<Vec<u8>> {
        match method {
            "Core_version" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"version")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_core::Core<Block>>::version()
                            })),
            "Core_execute_block" =>
                Some(sp_api::Encode::encode(&{
                                let block: Block =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"execute_block"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_core::Core<Block>>::execute_block(block)
                            })),
            "Core_initialize_block" =>
                Some(sp_api::Encode::encode(&{
                                let header: <Block as BlockT>::Header =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"initialize_block"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_core::Core<Block>>::initialize_block(&header)
                            })),
            "Metadata_metadata" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"metadata")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_metadata::Metadata<Block>>::metadata()
                            })),
            "Metadata_metadata_at_version" =>
                Some(sp_api::Encode::encode(&{
                                let version: u32 =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"metadata_at_version"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_metadata::Metadata<Block>>::metadata_at_version(version)
                            })),
            "Metadata_metadata_versions" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"metadata_versions")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_api::runtime_decl_for_metadata::Metadata<Block>>::metadata_versions()
                            })),
            "BlockBuilder_apply_extrinsic" =>
                Some(sp_api::Encode::encode(&{
                                let extrinsic: <Block as BlockT>::Extrinsic =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"apply_extrinsic"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block>>::apply_extrinsic(extrinsic)
                            })),
            "BlockBuilder_finalize_block" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"finalize_block")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block>>::finalize_block()
                            })),
            "BlockBuilder_inherent_extrinsics" =>
                Some(sp_api::Encode::encode(&{
                                let data: InherentData =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"inherent_extrinsics"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block>>::inherent_extrinsics(data)
                            })),
            "BlockBuilder_check_inherents" =>
                Some(sp_api::Encode::encode(&{
                                let (block, data): (Block, InherentData) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"check_inherents"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_block_builder::runtime_decl_for_block_builder::BlockBuilder<Block>>::check_inherents(block,
                                    data)
                            })),
            "TaggedTransactionQueue_validate_transaction" =>
                Some(sp_api::Encode::encode(&{
                                let (source, tx, block_hash):
                                        (TransactionSource, <Block as BlockT>::Extrinsic,
                                        <Block as BlockT>::Hash) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"validate_transaction"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_transaction_pool::runtime_api::runtime_decl_for_tagged_transaction_queue::TaggedTransactionQueue<Block>>::validate_transaction(source,
                                    tx, block_hash)
                            })),
            "ValidateStatement_validate_statement" =>
                Some(sp_api::Encode::encode(&{
                                let (source, statement):
                                        (sp_statement_store::runtime_api::StatementSource,
                                        sp_statement_store::Statement) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"validate_statement"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_statement_store::runtime_api::runtime_decl_for_validate_statement::ValidateStatement<Block>>::validate_statement(source,
                                    statement)
                            })),
            "OffchainWorkerApi_offchain_worker" =>
                Some(sp_api::Encode::encode(&{
                                let header: <Block as BlockT>::Header =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"offchain_worker"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_offchain::runtime_decl_for_offchain_worker_api::OffchainWorkerApi<Block>>::offchain_worker(&header)
                            })),
            "GrandpaApi_grandpa_authorities" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"grandpa_authorities")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_grandpa::runtime_decl_for_grandpa_api::GrandpaApi<Block>>::grandpa_authorities()
                            })),
            "GrandpaApi_current_set_id" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"current_set_id")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_grandpa::runtime_decl_for_grandpa_api::GrandpaApi<Block>>::current_set_id()
                            })),
            "GrandpaApi_submit_report_equivocation_unsigned_extrinsic" =>
                Some(sp_api::Encode::encode(&{
                                let (equivocation_proof, key_owner_proof):
                                        (sp_consensus_grandpa::EquivocationProof<<Block as
                                        BlockT>::Hash, NumberFor<Block>>,
                                        sp_consensus_grandpa::OpaqueKeyOwnershipProof) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"submit_report_equivocation_unsigned_extrinsic"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_grandpa::runtime_decl_for_grandpa_api::GrandpaApi<Block>>::submit_report_equivocation_unsigned_extrinsic(equivocation_proof,
                                    key_owner_proof)
                            })),
            "GrandpaApi_generate_key_ownership_proof" =>
                Some(sp_api::Encode::encode(&{
                                let (_set_id, authority_id):
                                        (sp_consensus_grandpa::SetId, GrandpaId) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"generate_key_ownership_proof"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_grandpa::runtime_decl_for_grandpa_api::GrandpaApi<Block>>::generate_key_ownership_proof(_set_id,
                                    authority_id)
                            })),
            "NominationPoolsApi_pending_rewards" =>
                Some(sp_api::Encode::encode(&{
                                let who: AccountId =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"pending_rewards"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::NominationPoolsApi<Block,
                                        AccountId, Balance>>::pending_rewards(who)
                            })),
            "NominationPoolsApi_points_to_balance" =>
                Some(sp_api::Encode::encode(&{
                                let (pool_id, points):
                                        (pallet_nomination_pools::PoolId, Balance) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"points_to_balance"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::NominationPoolsApi<Block,
                                        AccountId, Balance>>::points_to_balance(pool_id, points)
                            })),
            "NominationPoolsApi_balance_to_points" =>
                Some(sp_api::Encode::encode(&{
                                let (pool_id, new_funds):
                                        (pallet_nomination_pools::PoolId, Balance) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"balance_to_points"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nomination_pools_runtime_api::runtime_decl_for_nomination_pools_api::NominationPoolsApi<Block,
                                        AccountId, Balance>>::balance_to_points(pool_id, new_funds)
                            })),
            "StakingApi_nominations_quota" =>
                Some(sp_api::Encode::encode(&{
                                let balance: Balance =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"nominations_quota"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_staking_runtime_api::runtime_decl_for_staking_api::StakingApi<Block,
                                        Balance>>::nominations_quota(balance)
                            })),
            "BabeApi_configuration" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"configuration")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::configuration()
                            })),
            "BabeApi_current_epoch_start" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"current_epoch_start")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::current_epoch_start()
                            })),
            "BabeApi_current_epoch" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"current_epoch")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::current_epoch()
                            })),
            "BabeApi_next_epoch" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"next_epoch")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::next_epoch()
                            })),
            "BabeApi_generate_key_ownership_proof" =>
                Some(sp_api::Encode::encode(&{
                                let (_slot, authority_id):
                                        (sp_consensus_babe::Slot, sp_consensus_babe::AuthorityId) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"generate_key_ownership_proof"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::generate_key_ownership_proof(_slot,
                                    authority_id)
                            })),
            "BabeApi_submit_report_equivocation_unsigned_extrinsic" =>
                Some(sp_api::Encode::encode(&{
                                let (equivocation_proof, key_owner_proof):
                                        (sp_consensus_babe::EquivocationProof<<Block as
                                        BlockT>::Header>,
                                        sp_consensus_babe::OpaqueKeyOwnershipProof) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"submit_report_equivocation_unsigned_extrinsic"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_consensus_babe::runtime_decl_for_babe_api::BabeApi<Block>>::submit_report_equivocation_unsigned_extrinsic(equivocation_proof,
                                    key_owner_proof)
                            })),
            "AuthorityDiscoveryApi_authorities" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"authorities")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_authority_discovery::runtime_decl_for_authority_discovery_api::AuthorityDiscoveryApi<Block>>::authorities()
                            })),
            "AccountNonceApi_account_nonce" =>
                Some(sp_api::Encode::encode(&{
                                let account: AccountId =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"account_nonce"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        frame_system_rpc_runtime_api::runtime_decl_for_account_nonce_api::AccountNonceApi<Block,
                                        AccountId, Index>>::account_nonce(account)
                            })),
            "AssetsApi_account_balances" =>
                Some(sp_api::Encode::encode(&{
                                let account: AccountId =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"account_balances"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        assets_api::runtime_decl_for_assets_api::AssetsApi<Block,
                                        AccountId, Balance, u32>>::account_balances(account)
                            })),
            "ContractsApi_call" =>
                Some(sp_api::Encode::encode(&{
                                let (origin, dest, value, gas_limit, storage_deposit_limit,
                                        input_data):
                                        (AccountId, AccountId, Balance, Option<Weight>,
                                        Option<Balance>, Vec<u8>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"call"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_contracts::runtime_decl_for_contracts_api::ContractsApi<Block,
                                        AccountId, Balance, BlockNumber, Hash,
                                        EventRecord>>::call(origin, dest, value, gas_limit,
                                    storage_deposit_limit, input_data)
                            })),
            "ContractsApi_instantiate" =>
                Some(sp_api::Encode::encode(&{
                                let (origin, value, gas_limit, storage_deposit_limit, code,
                                        data, salt):
                                        (AccountId, Balance, Option<Weight>, Option<Balance>,
                                        pallet_contracts_primitives::Code<Hash>, Vec<u8>, Vec<u8>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"instantiate"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_contracts::runtime_decl_for_contracts_api::ContractsApi<Block,
                                        AccountId, Balance, BlockNumber, Hash,
                                        EventRecord>>::instantiate(origin, value, gas_limit,
                                    storage_deposit_limit, code, data, salt)
                            })),
            "ContractsApi_upload_code" =>
                Some(sp_api::Encode::encode(&{
                                let (origin, code, storage_deposit_limit, determinism):
                                        (AccountId, Vec<u8>, Option<Balance>,
                                        pallet_contracts::Determinism) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"upload_code"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_contracts::runtime_decl_for_contracts_api::ContractsApi<Block,
                                        AccountId, Balance, BlockNumber, Hash,
                                        EventRecord>>::upload_code(origin, code,
                                    storage_deposit_limit, determinism)
                            })),
            "ContractsApi_get_storage" =>
                Some(sp_api::Encode::encode(&{
                                let (address, key): (AccountId, Vec<u8>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"get_storage"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_contracts::runtime_decl_for_contracts_api::ContractsApi<Block,
                                        AccountId, Balance, BlockNumber, Hash,
                                        EventRecord>>::get_storage(address, key)
                            })),
            "TransactionPaymentApi_query_info" =>
                Some(sp_api::Encode::encode(&{
                                let (uxt, len): (<Block as BlockT>::Extrinsic, u32) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"query_info"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
                                        Balance>>::query_info(uxt, len)
                            })),
            "TransactionPaymentApi_query_fee_details" =>
                Some(sp_api::Encode::encode(&{
                                let (uxt, len): (<Block as BlockT>::Extrinsic, u32) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"query_fee_details"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
                                        Balance>>::query_fee_details(uxt, len)
                            })),
            "TransactionPaymentApi_query_weight_to_fee" =>
                Some(sp_api::Encode::encode(&{
                                let weight: Weight =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"query_weight_to_fee"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
                                        Balance>>::query_weight_to_fee(weight)
                            })),
            "TransactionPaymentApi_query_length_to_fee" =>
                Some(sp_api::Encode::encode(&{
                                let length: u32 =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"query_length_to_fee"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_api::TransactionPaymentApi<Block,
                                        Balance>>::query_length_to_fee(length)
                            })),
            "TransactionPaymentCallApi_query_call_info" =>
                Some(sp_api::Encode::encode(&{
                                let (call, len): (RuntimeCall, u32) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"query_call_info"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
                                        Balance, RuntimeCall>>::query_call_info(call, len)
                            })),
            "TransactionPaymentCallApi_query_call_fee_details" =>
                Some(sp_api::Encode::encode(&{
                                let (call, len): (RuntimeCall, u32) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"query_call_fee_details"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
                                        Balance, RuntimeCall>>::query_call_fee_details(call, len)
                            })),
            "TransactionPaymentCallApi_query_weight_to_fee" =>
                Some(sp_api::Encode::encode(&{
                                let weight: Weight =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"query_weight_to_fee"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
                                        Balance, RuntimeCall>>::query_weight_to_fee(weight)
                            })),
            "TransactionPaymentCallApi_query_length_to_fee" =>
                Some(sp_api::Encode::encode(&{
                                let length: u32 =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"query_length_to_fee"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_transaction_payment_rpc_runtime_api::runtime_decl_for_transaction_payment_call_api::TransactionPaymentCallApi<Block,
                                        Balance, RuntimeCall>>::query_length_to_fee(length)
                            })),
            "NftsApi_owner" =>
                Some(sp_api::Encode::encode(&{
                                let (collection, item): (u32, u32) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"owner"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nfts_runtime_api::runtime_decl_for_nfts_api::NftsApi<Block,
                                        AccountId, u32, u32>>::owner(collection, item)
                            })),
            "NftsApi_collection_owner" =>
                Some(sp_api::Encode::encode(&{
                                let collection: u32 =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"collection_owner"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nfts_runtime_api::runtime_decl_for_nfts_api::NftsApi<Block,
                                        AccountId, u32, u32>>::collection_owner(collection)
                            })),
            "NftsApi_attribute" =>
                Some(sp_api::Encode::encode(&{
                                let (collection, item, key): (u32, u32, Vec<u8>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"attribute"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nfts_runtime_api::runtime_decl_for_nfts_api::NftsApi<Block,
                                        AccountId, u32, u32>>::attribute(collection, item, key)
                            })),
            "NftsApi_custom_attribute" =>
                Some(sp_api::Encode::encode(&{
                                let (account, collection, item, key):
                                        (AccountId, u32, u32, Vec<u8>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"custom_attribute"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nfts_runtime_api::runtime_decl_for_nfts_api::NftsApi<Block,
                                        AccountId, u32,
                                        u32>>::custom_attribute(account, collection, item, key)
                            })),
            "NftsApi_system_attribute" =>
                Some(sp_api::Encode::encode(&{
                                let (collection, item, key): (u32, u32, Vec<u8>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"system_attribute"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nfts_runtime_api::runtime_decl_for_nfts_api::NftsApi<Block,
                                        AccountId, u32,
                                        u32>>::system_attribute(collection, item, key)
                            })),
            "NftsApi_collection_attribute" =>
                Some(sp_api::Encode::encode(&{
                                let (collection, key): (u32, Vec<u8>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"collection_attribute"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_nfts_runtime_api::runtime_decl_for_nfts_api::NftsApi<Block,
                                        AccountId, u32, u32>>::collection_attribute(collection, key)
                            })),
            "MmrApi_mmr_root" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"mmr_root")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_mmr::primitives::runtime_decl_for_mmr_api::MmrApi<Block,
                                        mmr::Hash, BlockNumber>>::mmr_root()
                            })),
            "MmrApi_mmr_leaf_count" =>
                Some(sp_api::Encode::encode(&{
                                if !_sp_api_input_data_.is_empty() {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                            ": expected no parameters, but input buffer is not empty."],
                                                &[::core::fmt::ArgumentV1::new_display(&"mmr_leaf_count")]));
                                    }

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_mmr::primitives::runtime_decl_for_mmr_api::MmrApi<Block,
                                        mmr::Hash, BlockNumber>>::mmr_leaf_count()
                            })),
            "MmrApi_generate_proof" =>
                Some(sp_api::Encode::encode(&{
                                let (block_numbers, best_known_block_number):
                                        (Vec<BlockNumber>, Option<BlockNumber>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"generate_proof"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_mmr::primitives::runtime_decl_for_mmr_api::MmrApi<Block,
                                        mmr::Hash,
                                        BlockNumber>>::generate_proof(block_numbers,
                                    best_known_block_number)
                            })),
            "MmrApi_verify_proof" =>
                Some(sp_api::Encode::encode(&{
                                let (leaves, proof):
                                        (Vec<mmr::EncodableOpaqueLeaf>, mmr::Proof<mmr::Hash>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"verify_proof"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_mmr::primitives::runtime_decl_for_mmr_api::MmrApi<Block,
                                        mmr::Hash, BlockNumber>>::verify_proof(leaves, proof)
                            })),
            "MmrApi_verify_proof_stateless" =>
                Some(sp_api::Encode::encode(&{
                                let (root, leaves, proof):
                                        (mmr::Hash, Vec<mmr::EncodableOpaqueLeaf>,
                                        mmr::Proof<mmr::Hash>) =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"verify_proof_stateless"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        pallet_mmr::primitives::runtime_decl_for_mmr_api::MmrApi<Block,
                                        mmr::Hash,
                                        BlockNumber>>::verify_proof_stateless(root, leaves, proof)
                            })),
            "SessionKeys_generate_session_keys" =>
                Some(sp_api::Encode::encode(&{
                                let seed: Option<Vec<u8>> =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"generate_session_keys"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_session::runtime_decl_for_session_keys::SessionKeys<Block>>::generate_session_keys(seed)
                            })),
            "SessionKeys_decode_session_keys" =>
                Some(sp_api::Encode::encode(&{
                                let encoded: Vec<u8> =
                                    match sp_api::DecodeLimit::decode_all_with_depth_limit(sp_api::MAX_EXTRINSIC_DEPTH,
                                            &mut _sp_api_input_data_) {
                                        Ok(res) => res,
                                        Err(e) =>
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["Bad input data provided to ",
                                                                ": "],
                                                    &[::core::fmt::ArgumentV1::new_display(&"decode_session_keys"),
                                                                ::core::fmt::ArgumentV1::new_display(&e)])),
                                    };

                                #[allow(deprecated)]
                                <Runtime as
                                        sp_session::runtime_decl_for_session_keys::SessionKeys<Block>>::decode_session_keys(encoded)
                            })),
            _ => None,
        }
    }
}
